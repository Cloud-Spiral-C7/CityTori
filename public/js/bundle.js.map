{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","bower_components/vue/dist/vue.js","bundle.js","src/js/main.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","global","factory","define","amd","Vue","this","set","obj","key","val","hasOwn","_isVue","_data","ob","__ob__","convert","dep","notify","vms","vm","_proxy","_digest","del","_unproxy","hasOwnProperty","isLiteral","exp","literalValueRE","test","isReserved","str","c","charCodeAt","_toString","value","toString","toNumber","parsed","Number","isNaN","toBoolean","stripQuotes","b","slice","camelize","replace","camelizeRE","toUpper","_","toUpperCase","hyphenate","hyphenateRE","toLowerCase","classify","classifyRE","bind$1","fn","ctx","arguments","apply","toArray","list","start","ret","Array","extend","to","from","keys","Object","isObject","isPlainObject","OBJECT_STRING","def","enumerable","defineProperty","writable","configurable","_debounce","func","wait","timeout","args","context","timestamp","result","later","last","Date","now","setTimeout","indexOf","arr","cancellable","cb","cancelled","cancel","looseEqual","JSON","stringify","Cache","limit","size","head","tail","undefined","_keymap","create","pushFilter","filter","lastFilterIndex","trim","tokens","match","filterTokenRE","name","map","processFilterArg","dir","filters","push","arg","reservedArgRE","dynamic","stripped","parseDirective","hit","cache$1","get","inSingle","inDouble","curly","square","paren","expression","put","escapeRegex","regexEscapeRE","compileRegex","open","config","delimiters","close","unsafeOpen","unsafeDelimiters","unsafeClose","tagRE","RegExp","htmlRE","cache","parseText","text","index","html","first","oneTime","lastIndex","exec","tag","tokensToExp","token","formatToken","join","single","inlineFilters","filterRE$1","appendWithTransition","el","target","applyTransition","appendChild","beforeWithTransition","before","removeWithTransition","remove","direction","op","transition","__v_trans","hooks","transitionEndEvent","_isCompiled","$parent","action","query","selector","document","querySelector","warn","inDoc","node","doc","documentElement","parent","parentNode","nodeType","contains","getAttr","_attr","getAttribute","removeAttribute","getBindAttr","insertBefore","after","nextSibling","removeChild","prepend","firstChild","replaceChild","on$1","event","addEventListener","off","removeEventListener","addClass","cls","classList","add","cur","setAttribute","removeClass","tar","className","extractContent","asFragment","child","rawContent","isTemplate","content","DocumentFragment","hasChildNodes","trimNode","createDocumentFragment","createElement","lastChild","data","tagName","createAnchor","persist","anchor","debug","createComment","createTextNode","__vue_anchor","findRef","hasAttributes","attrs","attributes","refRE","mapNodeRange","end","next","removeNodeRange","frag","onRemoved","removed","done","nodes","checkComponentAttr","options","hasAttrs","commonTagRE","getIsBinding","resolveAsset","id","is","initProp","prop","path","assertProp","raw","required","expectedType","type","valid","String","Boolean","Function","isArray","formatType","formatValue","validator","charAt","prototype","mergeData","toVal","fromVal","mergeAssets","parentVal","childVal","res","guardArrayAssets","guardComponents","components","ids","guardProps","props","assets","asset","mergeOptions","mergeField","strat","strats","defaultStrat","mixins","camelizedId","assertAsset","Dep","uid$3","subs","Observer","augment","hasProto","protoAugment","copyAugment","arrayMethods","arrayKeys","observeArray","walk","src","__proto__","observe","isFrozen","addVm","defineReactive","getter","setter","convertAllProperties","property","getOwnPropertyDescriptor","childOb","depend","newVal","initMixin","_init","$el","$root","$children","$refs","$els","_watchers","_directives","_uid","uid","_events","_eventsCount","_isFragment","_fragment","_fragmentStart","_fragmentEnd","_isDestroyed","_isReady","_isAttached","_isBeingDestroyed","_unlinkFn","_context","_scope","_frag","children","$options","constructor","_updateRef","_callHook","_initState","_initEvents","$mount","getPathCharType","ch","formatSubPath","trimmed","parse","maybeUnescapeQuote","nextChar","mode","IN_SINGLE_QUOTE","IN_DOUBLE_QUOTE","newChar","actions","APPEND","typeMap","BEFORE_PATH","subPathDepth","PUSH","INC_SUB_PATH_DEPTH","PUSH_SUB_PATH","IN_SUB_PATH","pathStateMachine","ERROR","AFTER_PATH","parsePath","pathCache","getPath","parseExpression","setPath","original","warnNonExistent","$set","save","isString","saved","newlineRE","rewrite","allowedKeywordsRE","restoreRE","restore","compileGetter","improperKeywordsRE","body","saveRE","wsRE","pathReplaceRE","makeGetterFn","compileSetter","scope","needSet","expressionCache","isSimplePath","pathTestRE","booleanLiteralRE","resetBatcherState","queue","userQueue","has","circular","waiting","internalQueueDepleted","flushBatcherQueue","runBatcherQueue","inBrowser","window","__VUE_DEVTOOLS_GLOBAL_HOOK__","emit","watcher","run","_maxUpdateCount","splice","pushWatcher","user","q","nextTick","Watcher","expOrFn","isFn","uid$2","active","dirty","lazy","deps","newDeps","prevError","twoWay","queued","shallow","traverse","normalize","propCache","prefix","camel","upper","testEl","style","prefixed","prefixes","camelPrefixes","keyFilter","handler","codes","charCode","parseInt","keyCodes","keyCode","stopFilter","stopPropagation","preventFilter","preventDefault","getValue","multi","init","selected","hasAttribute","_value","indexOf$1","isRealTemplate","stringToFragment","templateString","templateCache","tagMatch","tagRE$1","entityMatch","entityRE","wrap","efault","depth","suffix","innerHTML","nodeToFragment","textContent","clonedNode","cloneNode","querySelectorAll","cloned","hasBrokenTemplate","tempClone","hasTextareaCloneBug","parseTemplate","template","shouldClone","idSelectorCache","getElementById","Fragment","linker","host","parentFrag","childFrags","inserted","unlink","childNodes","singleBefore","singleRemove","multiBefore","multiRemove","__vfrag__","withTransition","method","callHook","attach","shouldCallRemove","self","destroyChild","detach","destroy","$destroy","FragmentFactory","cid","cacheId","outerHTML","linkerCache","compile","findPrevFrag","previousSibling","forId","findVmFromFrag","__vue__","range","pushJob","job","queue$1","flush","offsetHeight","Transition","enterClass","leaveClass","pendingCssEvent","pendingCssCb","pendingJsCb","justEntered","entered","left","typeCache","forEach","m","isHidden","offsetWidth","getClientRects","stringToObject","split","contains$1","compileProps","propOptions","attr","names","empty","identRE","propBindingModes","ONE_WAY","TWO_WAY","ONE_TIME","optimizedLiteral","settablePathRE","parentPath","makePropsLinkFn","_props","getDefault","$get","_bindDir","propDef","partial","nodeLinkFn","_asComponent","compileNode","childLinkFn","terminal","compileNodeList","dirs","linkAndCapture","makeUnlinkFn","originalDirCount","sort","directiveComparator","_bind","descriptor","priority","DEFAULT_PRIORITY","contextDirs","destroying","teardownDirs","_teardown","$remove","compileAndLinkProps","propsLinkFn","propDirs","compileRoot","contextOptions","contextLinkFn","replacerLinkFn","containerAttrs","_containerAttrs","replacerAttrs","_replacerAttrs","compileDirectives","onRE","plural","selfDirs","compileElement","compileTextNode","linkFn","checkTerminalDirectives","checkElementDirectives","checkComponent","_skip","removeText","wholeText","processTextToken","makeTextNodeLinkFn","setTokenType","publicDirectives","fragClone","$eval","nodeList","linkFns","makeChildLinkFn","childrenLinkFn","makeTerminalNodeLinkFn","component","ref","internalDirectives","modifiers","literal","componentLinkFn","skip","prev","previousElementSibling","dirName","terminalDirectives","pushDir","interp","rawName","rawValue","dirDef","parseModifiers","modifierRE","bind","some","transitionRE","bindRE","on","argRE","makeNodeLinkFn","directives","transclude","extractAttrs","_content","transcludeTemplate","replacer","mergeAttrs","specialCharRE","stateMixin","noop","makeComputedGetter","owner","evaluate","newData","_setData","_initProps","_initMeta","_initMethods","_initData","_initComputed","_propsUnlinkFn","propsData","optionsDataFn","optionsData","oldData","removeVm","update","computed","userDef","methods","metas","_meta","eventsMixin","registerComponentEvents","eventRE","$on","registerCallbacks","hash","handlers","j","register","onAttached","callAttach","onDetached","callDetach","events","watch","_initDOMHooks","hook","$emit","Directive","_locked","_bound","_listeners","_host","_vue_directives","lifecycleMixin","_ref","refs","_compile","_initElement","contentLinkFn","rootLinker","ctor","_linkerCachable","rootUnlinkFn","contentUnlinkFn","_destroy","deferCleanup","_cleanup","teardown","$off","miscMixin","_applyFilters","oldValue","write","offset","k","read","_resolveComponent","resolved","requested","pendingCallbacks","cbs","reason","globalAPI","createClass","util","compiler","parsers","text$1","directive","extendOptions","Super","isFirstExtend","_Ctor","Sub","_assetTypes","use","plugin","installed","unshift","install","mixin","definition","dataAPI","clean","asStatement","$delete","$watch","deep","immediate","filterRE","$interpolate","$log","console","log","domAPI","insert","op1","op2","targetIsDetached","shouldCallHook","append","beforeWithCb","removeWithCb","$nextTick","$appendTo","$prependTo","$before","$after","inDocument","realCb","eventsAPI","modifyListenerCount","count","hookRE","$once","shouldPropagate","$broadcast","$dispatch","lifecycleAPI","ready","$compile","limitBy","filterBy","search","delimiter","convertArray","item","reduce","concat","$value","$key","orderBy","sortKey","reverse","order","extractFragment","main","__v_selected","isIE9","navigator","userAgent","isAndroid","transitionProp","animationProp","animationEndEvent","isWebkitTrans","ontransitionend","onwebkittransitionend","isWebkitAnim","onanimationend","onwebkitanimationend","nextTickHandler","pending","copies","callbacks","timerFunc","MutationObserver","counter","observer","textNode","characterData","p","entry","newer","older","shift","returnEntry","freeze","defineProperties","silent","async","warnExpressionErrors","_delimitersChanged","_propBindingModes","hasConsole","msg","stack","optionMergeStrategies","instanceData","defaultData","created","attached","detached","beforeCompile","compiled","beforeDestroy","destroyed","paramAttributes","arrayProto","addSub","sub","removeSub","addDep","getOwnPropertyNames","items","debounce","IN_PATH","BEFORE_IDENT","IN_IDENT","ws","ident","[","eof",".","0","number","'","\"","]","else","allowedKeywords","improperKeywords","beforeGet","preProcess","postProcess","afterGet","forContext","$forContext","alias","_withLock","$index","sync","current","depIds","cloak","unbind","importantRE","cssText","handleObject","handleSingle","isImportant","setProperty","removeProperty","xlinkNS","xlinkRE","inputProps","checked","modelProps","true-value","false-value","disallowedInterpAttrRE","invalid","modelProp","model","__v_model","listener","setAttributeNS","esc","tab","enter","space","delete","up","right","down","acceptStatement","iframeBind","contentWindow","stop","prevent","reset","checkbox","getBooleanValue","_trueValue","_falseValue","params","_watcher","afterBind","select","forceUpdate","multiple","initValue","selectedIndex","radio","text$2","isRange","composing","focused","hasjQuery","jQuery","checkFilters","hasRead","hasWrite","_unbind","show","nextElementSibling","elseEl","display","legend","tr","col","td","th","option","optgroup","thead","tbody","colgroup","caption","tfoot","g","defs","symbol","image","circle","ellipse","line","polygon","polyline","rect","placeholder","vIf","elseFactory","elseFrag","uid$1","vFor","inMatch","itMatch","iterator","isOption","diff","updateRef","updateModel","primitive","convertedFromObject","fromObject","trackByKey","trackBy","oldFrags","frags","getCachedFrag","reused","fresh","removalIndex","totalRemoved","deleteCachedFrag","targetPrev","prevEl","currentPrev","insertionIndex","staggerCb","staggerAnchor","move","parentScope","cacheFrag","staggerAmount","getStagger","total","warnDuplicate","trans","stagger","_preProcess","_postProcess","swap","for","if","TYPE_TRANSITION","TYPE_ANIMATION","transDurationProp","animDurationProp","p$1","cancelPending","callHookWithCb","enterCancelled","enterNextTick","enterDone","getCssTransitionType","setupCssCb","leave","leaveCancelled","leaveDone","leaveNextTick","hasPending","hidden","css","inlineStyles","computedStyles","getComputedStyle","transDuration","animDuration","onEnd","oldId","bindingModes","childKey","parentKey","parentWatcher","childWatcher","keepAlive","inlineTemplate","pendingComponentCb","Component","pendingRemovals","pendingRemovalCb","setComponent","invalidatePending","resolveComponent","mountComponent","unbuild","childVM","ComponentName","activateHook","activate","cached","getCached","newComponent","build","waitingFor","extraOptions","_isRouterView","defer","_inactive","transitionMode","vClass","handleArray","cleanup","prevKeys","class","_setupParams","_checkStatement","_update","oldVal","mappedKey","_setupParamWatcher","called","unwatch","paramWatchers","_paramUnwatchFns","$event","listeners","unwatchFns","digitsRE","json","indent","capitalize","uppercase","lowercase","currency","_currency","parseFloat","isFinite","stringified","Math","abs","toFixed","_int","_float","sign","pluralize","delay","slot","fallback","slotName","compileDefaultContent","elementDirectives","version","transitions","partials",2,"./../../bower_components/vue/dist/vue.js"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*!\n * Vue.js v1.0.10\n * (c) 2015 Evan You\n * Released under the MIT License.\n */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  global.Vue = factory();\n}(this, function () { 'use strict';\n\n  function set(obj, key, val) {\n    if (hasOwn(obj, key)) {\n      obj[key] = val;\n      return;\n    }\n    if (obj._isVue) {\n      set(obj._data, key, val);\n      return;\n    }\n    var ob = obj.__ob__;\n    if (!ob) {\n      obj[key] = val;\n      return;\n    }\n    ob.convert(key, val);\n    ob.dep.notify();\n    if (ob.vms) {\n      var i = ob.vms.length;\n      while (i--) {\n        var vm = ob.vms[i];\n        vm._proxy(key);\n        vm._digest();\n      }\n    }\n  }\n\n  /**\n   * Delete a property and trigger change if necessary.\n   *\n   * @param {Object} obj\n   * @param {String} key\n   */\n\n  function del(obj, key) {\n    if (!hasOwn(obj, key)) {\n      return;\n    }\n    delete obj[key];\n    var ob = obj.__ob__;\n    if (!ob) {\n      return;\n    }\n    ob.dep.notify();\n    if (ob.vms) {\n      var i = ob.vms.length;\n      while (i--) {\n        var vm = ob.vms[i];\n        vm._unproxy(key);\n        vm._digest();\n      }\n    }\n  }\n\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  /**\n   * Check whether the object has the property.\n   *\n   * @param {Object} obj\n   * @param {String} key\n   * @return {Boolean}\n   */\n\n  function hasOwn(obj, key) {\n    return hasOwnProperty.call(obj, key);\n  }\n\n  /**\n   * Check if an expression is a literal value.\n   *\n   * @param {String} exp\n   * @return {Boolean}\n   */\n\n  var literalValueRE = /^\\s?(true|false|[\\d\\.]+|'[^']*'|\"[^\"]*\")\\s?$/;\n\n  function isLiteral(exp) {\n    return literalValueRE.test(exp);\n  }\n\n  /**\n   * Check if a string starts with $ or _\n   *\n   * @param {String} str\n   * @return {Boolean}\n   */\n\n  function isReserved(str) {\n    var c = (str + '').charCodeAt(0);\n    return c === 0x24 || c === 0x5F;\n  }\n\n  /**\n   * Guard text output, make sure undefined outputs\n   * empty string\n   *\n   * @param {*} value\n   * @return {String}\n   */\n\n  function _toString(value) {\n    return value == null ? '' : value.toString();\n  }\n\n  /**\n   * Check and convert possible numeric strings to numbers\n   * before setting back to data\n   *\n   * @param {*} value\n   * @return {*|Number}\n   */\n\n  function toNumber(value) {\n    if (typeof value !== 'string') {\n      return value;\n    } else {\n      var parsed = Number(value);\n      return isNaN(parsed) ? value : parsed;\n    }\n  }\n\n  /**\n   * Convert string boolean literals into real booleans.\n   *\n   * @param {*} value\n   * @return {*|Boolean}\n   */\n\n  function toBoolean(value) {\n    return value === 'true' ? true : value === 'false' ? false : value;\n  }\n\n  /**\n   * Strip quotes from a string\n   *\n   * @param {String} str\n   * @return {String | false}\n   */\n\n  function stripQuotes(str) {\n    var a = str.charCodeAt(0);\n    var b = str.charCodeAt(str.length - 1);\n    return a === b && (a === 0x22 || a === 0x27) ? str.slice(1, -1) : str;\n  }\n\n  /**\n   * Camelize a hyphen-delmited string.\n   *\n   * @param {String} str\n   * @return {String}\n   */\n\n  var camelizeRE = /-(\\w)/g;\n\n  function camelize(str) {\n    return str.replace(camelizeRE, toUpper);\n  }\n\n  function toUpper(_, c) {\n    return c ? c.toUpperCase() : '';\n  }\n\n  /**\n   * Hyphenate a camelCase string.\n   *\n   * @param {String} str\n   * @return {String}\n   */\n\n  var hyphenateRE = /([a-z\\d])([A-Z])/g;\n\n  function hyphenate(str) {\n    return str.replace(hyphenateRE, '$1-$2').toLowerCase();\n  }\n\n  /**\n   * Converts hyphen/underscore/slash delimitered names into\n   * camelized classNames.\n   *\n   * e.g. my-component => MyComponent\n   *      some_else    => SomeElse\n   *      some/comp    => SomeComp\n   *\n   * @param {String} str\n   * @return {String}\n   */\n\n  var classifyRE = /(?:^|[-_\\/])(\\w)/g;\n\n  function classify(str) {\n    return str.replace(classifyRE, toUpper);\n  }\n\n  /**\n   * Simple bind, faster than native\n   *\n   * @param {Function} fn\n   * @param {Object} ctx\n   * @return {Function}\n   */\n\n  function bind$1(fn, ctx) {\n    return function (a) {\n      var l = arguments.length;\n      return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);\n    };\n  }\n\n  /**\n   * Convert an Array-like object to a real Array.\n   *\n   * @param {Array-like} list\n   * @param {Number} [start] - start index\n   * @return {Array}\n   */\n\n  function toArray(list, start) {\n    start = start || 0;\n    var i = list.length - start;\n    var ret = new Array(i);\n    while (i--) {\n      ret[i] = list[i + start];\n    }\n    return ret;\n  }\n\n  /**\n   * Mix properties into target object.\n   *\n   * @param {Object} to\n   * @param {Object} from\n   */\n\n  function extend(to, from) {\n    var keys = Object.keys(from);\n    var i = keys.length;\n    while (i--) {\n      to[keys[i]] = from[keys[i]];\n    }\n    return to;\n  }\n\n  /**\n   * Quick object check - this is primarily used to tell\n   * Objects from primitive values when we know the value\n   * is a JSON-compliant type.\n   *\n   * @param {*} obj\n   * @return {Boolean}\n   */\n\n  function isObject(obj) {\n    return obj !== null && typeof obj === 'object';\n  }\n\n  /**\n   * Strict object type check. Only returns true\n   * for plain JavaScript objects.\n   *\n   * @param {*} obj\n   * @return {Boolean}\n   */\n\n  var toString = Object.prototype.toString;\n  var OBJECT_STRING = '[object Object]';\n\n  function isPlainObject(obj) {\n    return toString.call(obj) === OBJECT_STRING;\n  }\n\n  /**\n   * Array type check.\n   *\n   * @param {*} obj\n   * @return {Boolean}\n   */\n\n  var isArray = Array.isArray;\n\n  /**\n   * Define a non-enumerable property\n   *\n   * @param {Object} obj\n   * @param {String} key\n   * @param {*} val\n   * @param {Boolean} [enumerable]\n   */\n\n  function def(obj, key, val, enumerable) {\n    Object.defineProperty(obj, key, {\n      value: val,\n      enumerable: !!enumerable,\n      writable: true,\n      configurable: true\n    });\n  }\n\n  /**\n   * Debounce a function so it only gets called after the\n   * input stops arriving after the given wait period.\n   *\n   * @param {Function} func\n   * @param {Number} wait\n   * @return {Function} - the debounced function\n   */\n\n  function _debounce(func, wait) {\n    var timeout, args, context, timestamp, result;\n    var later = function later() {\n      var last = Date.now() - timestamp;\n      if (last < wait && last >= 0) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      }\n    };\n    return function () {\n      context = this;\n      args = arguments;\n      timestamp = Date.now();\n      if (!timeout) {\n        timeout = setTimeout(later, wait);\n      }\n      return result;\n    };\n  }\n\n  /**\n   * Manual indexOf because it's slightly faster than\n   * native.\n   *\n   * @param {Array} arr\n   * @param {*} obj\n   */\n\n  function indexOf(arr, obj) {\n    var i = arr.length;\n    while (i--) {\n      if (arr[i] === obj) return i;\n    }\n    return -1;\n  }\n\n  /**\n   * Make a cancellable version of an async callback.\n   *\n   * @param {Function} fn\n   * @return {Function}\n   */\n\n  function cancellable(fn) {\n    var cb = function cb() {\n      if (!cb.cancelled) {\n        return fn.apply(this, arguments);\n      }\n    };\n    cb.cancel = function () {\n      cb.cancelled = true;\n    };\n    return cb;\n  }\n\n  /**\n   * Check if two values are loosely equal - that is,\n   * if they are plain objects, do they have the same shape?\n   *\n   * @param {*} a\n   * @param {*} b\n   * @return {Boolean}\n   */\n\n  function looseEqual(a, b) {\n    /* eslint-disable eqeqeq */\n    return a == b || (isObject(a) && isObject(b) ? JSON.stringify(a) === JSON.stringify(b) : false);\n    /* eslint-enable eqeqeq */\n  }\n\n  var hasProto = ('__proto__' in {});\n\n  // Browser environment sniffing\n  var inBrowser = typeof window !== 'undefined' && Object.prototype.toString.call(window) !== '[object Object]';\n\n  var isIE9 = inBrowser && navigator.userAgent.toLowerCase().indexOf('msie 9.0') > 0;\n\n  var isAndroid = inBrowser && navigator.userAgent.toLowerCase().indexOf('android') > 0;\n\n  var transitionProp = undefined;\n  var transitionEndEvent = undefined;\n  var animationProp = undefined;\n  var animationEndEvent = undefined;\n\n  // Transition property/event sniffing\n  if (inBrowser && !isIE9) {\n    var isWebkitTrans = window.ontransitionend === undefined && window.onwebkittransitionend !== undefined;\n    var isWebkitAnim = window.onanimationend === undefined && window.onwebkitanimationend !== undefined;\n    transitionProp = isWebkitTrans ? 'WebkitTransition' : 'transition';\n    transitionEndEvent = isWebkitTrans ? 'webkitTransitionEnd' : 'transitionend';\n    animationProp = isWebkitAnim ? 'WebkitAnimation' : 'animation';\n    animationEndEvent = isWebkitAnim ? 'webkitAnimationEnd' : 'animationend';\n  }\n\n  /**\n   * Defer a task to execute it asynchronously. Ideally this\n   * should be executed as a microtask, so we leverage\n   * MutationObserver if it's available, and fallback to\n   * setTimeout(0).\n   *\n   * @param {Function} cb\n   * @param {Object} ctx\n   */\n\n  var nextTick = (function () {\n    var callbacks = [];\n    var pending = false;\n    var timerFunc;\n    function nextTickHandler() {\n      pending = false;\n      var copies = callbacks.slice(0);\n      callbacks = [];\n      for (var i = 0; i < copies.length; i++) {\n        copies[i]();\n      }\n    }\n    /* istanbul ignore if */\n    if (typeof MutationObserver !== 'undefined') {\n      var counter = 1;\n      var observer = new MutationObserver(nextTickHandler);\n      var textNode = document.createTextNode(counter);\n      observer.observe(textNode, {\n        characterData: true\n      });\n      timerFunc = function () {\n        counter = (counter + 1) % 2;\n        textNode.data = counter;\n      };\n    } else {\n      timerFunc = setTimeout;\n    }\n    return function (cb, ctx) {\n      var func = ctx ? function () {\n        cb.call(ctx);\n      } : cb;\n      callbacks.push(func);\n      if (pending) return;\n      pending = true;\n      timerFunc(nextTickHandler, 0);\n    };\n  })();\n\n  function Cache(limit) {\n    this.size = 0;\n    this.limit = limit;\n    this.head = this.tail = undefined;\n    this._keymap = Object.create(null);\n  }\n\n  var p = Cache.prototype;\n\n  /**\n   * Put <value> into the cache associated with <key>.\n   * Returns the entry which was removed to make room for\n   * the new entry. Otherwise undefined is returned.\n   * (i.e. if there was enough room already).\n   *\n   * @param {String} key\n   * @param {*} value\n   * @return {Entry|undefined}\n   */\n\n  p.put = function (key, value) {\n    var entry = {\n      key: key,\n      value: value\n    };\n    this._keymap[key] = entry;\n    if (this.tail) {\n      this.tail.newer = entry;\n      entry.older = this.tail;\n    } else {\n      this.head = entry;\n    }\n    this.tail = entry;\n    if (this.size === this.limit) {\n      return this.shift();\n    } else {\n      this.size++;\n    }\n  };\n\n  /**\n   * Purge the least recently used (oldest) entry from the\n   * cache. Returns the removed entry or undefined if the\n   * cache was empty.\n   */\n\n  p.shift = function () {\n    var entry = this.head;\n    if (entry) {\n      this.head = this.head.newer;\n      this.head.older = undefined;\n      entry.newer = entry.older = undefined;\n      this._keymap[entry.key] = undefined;\n    }\n    return entry;\n  };\n\n  /**\n   * Get and register recent use of <key>. Returns the value\n   * associated with <key> or undefined if not in cache.\n   *\n   * @param {String} key\n   * @param {Boolean} returnEntry\n   * @return {Entry|*}\n   */\n\n  p.get = function (key, returnEntry) {\n    var entry = this._keymap[key];\n    if (entry === undefined) return;\n    if (entry === this.tail) {\n      return returnEntry ? entry : entry.value;\n    }\n    // HEAD--------------TAIL\n    //   <.older   .newer>\n    //  <--- add direction --\n    //   A  B  C  <D>  E\n    if (entry.newer) {\n      if (entry === this.head) {\n        this.head = entry.newer;\n      }\n      entry.newer.older = entry.older; // C <-- E.\n    }\n    if (entry.older) {\n      entry.older.newer = entry.newer; // C. --> E\n    }\n    entry.newer = undefined; // D --x\n    entry.older = this.tail; // D. --> E\n    if (this.tail) {\n      this.tail.newer = entry; // E. <-- D\n    }\n    this.tail = entry;\n    return returnEntry ? entry : entry.value;\n  };\n\n  var cache$1 = new Cache(1000);\n  var filterTokenRE = /[^\\s'\"]+|'[^']*'|\"[^\"]*\"/g;\n  var reservedArgRE = /^in$|^-?\\d+/;\n\n  /**\n   * Parser state\n   */\n\n  var str;\n  var dir;\n  var c;\n  var i;\n  var l;\n  var lastFilterIndex;\n  var inSingle;\n  var inDouble;\n  var curly;\n  var square;\n  var paren;\n  /**\n   * Push a filter to the current directive object\n   */\n\n  function pushFilter() {\n    var exp = str.slice(lastFilterIndex, i).trim();\n    var filter;\n    if (exp) {\n      filter = {};\n      var tokens = exp.match(filterTokenRE);\n      filter.name = tokens[0];\n      if (tokens.length > 1) {\n        filter.args = tokens.slice(1).map(processFilterArg);\n      }\n    }\n    if (filter) {\n      (dir.filters = dir.filters || []).push(filter);\n    }\n    lastFilterIndex = i + 1;\n  }\n\n  /**\n   * Check if an argument is dynamic and strip quotes.\n   *\n   * @param {String} arg\n   * @return {Object}\n   */\n\n  function processFilterArg(arg) {\n    if (reservedArgRE.test(arg)) {\n      return {\n        value: toNumber(arg),\n        dynamic: false\n      };\n    } else {\n      var stripped = stripQuotes(arg);\n      var dynamic = stripped === arg;\n      return {\n        value: dynamic ? arg : stripped,\n        dynamic: dynamic\n      };\n    }\n  }\n\n  /**\n   * Parse a directive value and extract the expression\n   * and its filters into a descriptor.\n   *\n   * Example:\n   *\n   * \"a + 1 | uppercase\" will yield:\n   * {\n   *   expression: 'a + 1',\n   *   filters: [\n   *     { name: 'uppercase', args: null }\n   *   ]\n   * }\n   *\n   * @param {String} str\n   * @return {Object}\n   */\n\n  function parseDirective(s) {\n\n    var hit = cache$1.get(s);\n    if (hit) {\n      return hit;\n    }\n\n    // reset parser state\n    str = s;\n    inSingle = inDouble = false;\n    curly = square = paren = 0;\n    lastFilterIndex = 0;\n    dir = {};\n\n    for (i = 0, l = str.length; i < l; i++) {\n      c = str.charCodeAt(i);\n      if (inSingle) {\n        // check single quote\n        if (c === 0x27) inSingle = !inSingle;\n      } else if (inDouble) {\n        // check double quote\n        if (c === 0x22) inDouble = !inDouble;\n      } else if (c === 0x7C && // pipe\n      str.charCodeAt(i + 1) !== 0x7C && str.charCodeAt(i - 1) !== 0x7C) {\n        if (dir.expression == null) {\n          // first filter, end of expression\n          lastFilterIndex = i + 1;\n          dir.expression = str.slice(0, i).trim();\n        } else {\n          // already has filter\n          pushFilter();\n        }\n      } else {\n        switch (c) {\n          case 0x22:\n            inDouble = true;break; // \"\n          case 0x27:\n            inSingle = true;break; // '\n          case 0x28:\n            paren++;break; // (\n          case 0x29:\n            paren--;break; // )\n          case 0x5B:\n            square++;break; // [\n          case 0x5D:\n            square--;break; // ]\n          case 0x7B:\n            curly++;break; // {\n          case 0x7D:\n            curly--;break; // }\n        }\n      }\n    }\n\n    if (dir.expression == null) {\n      dir.expression = str.slice(0, i).trim();\n    } else if (lastFilterIndex !== 0) {\n      pushFilter();\n    }\n\n    cache$1.put(s, dir);\n    return dir;\n  }\n\n  var directive = Object.freeze({\n    parseDirective: parseDirective\n  });\n\n  var regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\n  var cache = undefined;\n  var tagRE = undefined;\n  var htmlRE = undefined;\n  /**\n   * Escape a string so it can be used in a RegExp\n   * constructor.\n   *\n   * @param {String} str\n   */\n\n  function escapeRegex(str) {\n    return str.replace(regexEscapeRE, '\\\\$&');\n  }\n\n  function compileRegex() {\n    var open = escapeRegex(config.delimiters[0]);\n    var close = escapeRegex(config.delimiters[1]);\n    var unsafeOpen = escapeRegex(config.unsafeDelimiters[0]);\n    var unsafeClose = escapeRegex(config.unsafeDelimiters[1]);\n    tagRE = new RegExp(unsafeOpen + '(.+?)' + unsafeClose + '|' + open + '(.+?)' + close, 'g');\n    htmlRE = new RegExp('^' + unsafeOpen + '.*' + unsafeClose + '$');\n    // reset cache\n    cache = new Cache(1000);\n  }\n\n  /**\n   * Parse a template text string into an array of tokens.\n   *\n   * @param {String} text\n   * @return {Array<Object> | null}\n   *               - {String} type\n   *               - {String} value\n   *               - {Boolean} [html]\n   *               - {Boolean} [oneTime]\n   */\n\n  function parseText(text) {\n    if (!cache) {\n      compileRegex();\n    }\n    var hit = cache.get(text);\n    if (hit) {\n      return hit;\n    }\n    text = text.replace(/\\n/g, '');\n    if (!tagRE.test(text)) {\n      return null;\n    }\n    var tokens = [];\n    var lastIndex = tagRE.lastIndex = 0;\n    var match, index, html, value, first, oneTime;\n    /* eslint-disable no-cond-assign */\n    while (match = tagRE.exec(text)) {\n      /* eslint-enable no-cond-assign */\n      index = match.index;\n      // push text token\n      if (index > lastIndex) {\n        tokens.push({\n          value: text.slice(lastIndex, index)\n        });\n      }\n      // tag token\n      html = htmlRE.test(match[0]);\n      value = html ? match[1] : match[2];\n      first = value.charCodeAt(0);\n      oneTime = first === 42; // *\n      value = oneTime ? value.slice(1) : value;\n      tokens.push({\n        tag: true,\n        value: value.trim(),\n        html: html,\n        oneTime: oneTime\n      });\n      lastIndex = index + match[0].length;\n    }\n    if (lastIndex < text.length) {\n      tokens.push({\n        value: text.slice(lastIndex)\n      });\n    }\n    cache.put(text, tokens);\n    return tokens;\n  }\n\n  /**\n   * Format a list of tokens into an expression.\n   * e.g. tokens parsed from 'a {{b}} c' can be serialized\n   * into one single expression as '\"a \" + b + \" c\"'.\n   *\n   * @param {Array} tokens\n   * @return {String}\n   */\n\n  function tokensToExp(tokens) {\n    if (tokens.length > 1) {\n      return tokens.map(function (token) {\n        return formatToken(token);\n      }).join('+');\n    } else {\n      return formatToken(tokens[0], true);\n    }\n  }\n\n  /**\n   * Format a single token.\n   *\n   * @param {Object} token\n   * @param {Boolean} single\n   * @return {String}\n   */\n\n  function formatToken(token, single) {\n    return token.tag ? inlineFilters(token.value, single) : '\"' + token.value + '\"';\n  }\n\n  /**\n   * For an attribute with multiple interpolation tags,\n   * e.g. attr=\"some-{{thing | filter}}\", in order to combine\n   * the whole thing into a single watchable expression, we\n   * have to inline those filters. This function does exactly\n   * that. This is a bit hacky but it avoids heavy changes\n   * to directive parser and watcher mechanism.\n   *\n   * @param {String} exp\n   * @param {Boolean} single\n   * @return {String}\n   */\n\n  var filterRE$1 = /[^|]\\|[^|]/;\n  function inlineFilters(exp, single) {\n    if (!filterRE$1.test(exp)) {\n      return single ? exp : '(' + exp + ')';\n    } else {\n      var dir = parseDirective(exp);\n      if (!dir.filters) {\n        return '(' + exp + ')';\n      } else {\n        return 'this._applyFilters(' + dir.expression + // value\n        ',null,' + // oldValue (null for read)\n        JSON.stringify(dir.filters) + // filter descriptors\n        ',false)'; // write?\n      }\n    }\n  }\n\n  var text$1 = Object.freeze({\n    compileRegex: compileRegex,\n    parseText: parseText,\n    tokensToExp: tokensToExp\n  });\n\n  var delimiters = ['{{', '}}'];\n  var unsafeDelimiters = ['{{{', '}}}'];\n\n  var config = Object.defineProperties({\n\n    /**\n     * Whether to print debug messages.\n     * Also enables stack trace for warnings.\n     *\n     * @type {Boolean}\n     */\n\n    debug: false,\n\n    /**\n     * Whether to suppress warnings.\n     *\n     * @type {Boolean}\n     */\n\n    silent: false,\n\n    /**\n     * Whether to use async rendering.\n     */\n\n    async: true,\n\n    /**\n     * Whether to warn against errors caught when evaluating\n     * expressions.\n     */\n\n    warnExpressionErrors: true,\n\n    /**\n     * Whether or not to handle fully object properties which\n     * are already backed by getters and seters. Depending on\n     * use case and environment, this might introduce non-neglible\n     * performance penalties.\n     */\n    convertAllProperties: false,\n\n    /**\n     * Internal flag to indicate the delimiters have been\n     * changed.\n     *\n     * @type {Boolean}\n     */\n\n    _delimitersChanged: true,\n\n    /**\n     * List of asset types that a component can own.\n     *\n     * @type {Array}\n     */\n\n    _assetTypes: ['component', 'directive', 'elementDirective', 'filter', 'transition', 'partial'],\n\n    /**\n     * prop binding modes\n     */\n\n    _propBindingModes: {\n      ONE_WAY: 0,\n      TWO_WAY: 1,\n      ONE_TIME: 2\n    },\n\n    /**\n     * Max circular updates allowed in a batcher flush cycle.\n     */\n\n    _maxUpdateCount: 100\n\n  }, {\n    delimiters: { /**\n                   * Interpolation delimiters. Changing these would trigger\n                   * the text parser to re-compile the regular expressions.\n                   *\n                   * @type {Array<String>}\n                   */\n\n      get: function get() {\n        return delimiters;\n      },\n      set: function set(val) {\n        delimiters = val;\n        compileRegex();\n      },\n      configurable: true,\n      enumerable: true\n    },\n    unsafeDelimiters: {\n      get: function get() {\n        return unsafeDelimiters;\n      },\n      set: function set(val) {\n        unsafeDelimiters = val;\n        compileRegex();\n      },\n      configurable: true,\n      enumerable: true\n    }\n  });\n\n  var warn = undefined;\n\n  if ('development' !== 'production') {\n    (function () {\n      var hasConsole = typeof console !== 'undefined';\n      warn = function (msg, e) {\n        if (hasConsole && (!config.silent || config.debug)) {\n          console.warn('[Vue warn]: ' + msg);\n          /* istanbul ignore if */\n          if (config.debug) {\n            if (e) {\n              throw e;\n            } else {\n              console.warn(new Error('Warning Stack Trace').stack);\n            }\n          }\n        }\n      };\n    })();\n  }\n\n  /**\n   * Append with transition.\n   *\n   * @param {Element} el\n   * @param {Element} target\n   * @param {Vue} vm\n   * @param {Function} [cb]\n   */\n\n  function appendWithTransition(el, target, vm, cb) {\n    applyTransition(el, 1, function () {\n      target.appendChild(el);\n    }, vm, cb);\n  }\n\n  /**\n   * InsertBefore with transition.\n   *\n   * @param {Element} el\n   * @param {Element} target\n   * @param {Vue} vm\n   * @param {Function} [cb]\n   */\n\n  function beforeWithTransition(el, target, vm, cb) {\n    applyTransition(el, 1, function () {\n      before(el, target);\n    }, vm, cb);\n  }\n\n  /**\n   * Remove with transition.\n   *\n   * @param {Element} el\n   * @param {Vue} vm\n   * @param {Function} [cb]\n   */\n\n  function removeWithTransition(el, vm, cb) {\n    applyTransition(el, -1, function () {\n      remove(el);\n    }, vm, cb);\n  }\n\n  /**\n   * Apply transitions with an operation callback.\n   *\n   * @param {Element} el\n   * @param {Number} direction\n   *                  1: enter\n   *                 -1: leave\n   * @param {Function} op - the actual DOM operation\n   * @param {Vue} vm\n   * @param {Function} [cb]\n   */\n\n  function applyTransition(el, direction, op, vm, cb) {\n    var transition = el.__v_trans;\n    if (!transition ||\n    // skip if there are no js hooks and CSS transition is\n    // not supported\n    !transition.hooks && !transitionEndEvent ||\n    // skip transitions for initial compile\n    !vm._isCompiled ||\n    // if the vm is being manipulated by a parent directive\n    // during the parent's compilation phase, skip the\n    // animation.\n    vm.$parent && !vm.$parent._isCompiled) {\n      op();\n      if (cb) cb();\n      return;\n    }\n    var action = direction > 0 ? 'enter' : 'leave';\n    transition[action](op, cb);\n  }\n\n  /**\n   * Query an element selector if it's not an element already.\n   *\n   * @param {String|Element} el\n   * @return {Element}\n   */\n\n  function query(el) {\n    if (typeof el === 'string') {\n      var selector = el;\n      el = document.querySelector(el);\n      if (!el) {\n        'development' !== 'production' && warn('Cannot find element: ' + selector);\n      }\n    }\n    return el;\n  }\n\n  /**\n   * Check if a node is in the document.\n   * Note: document.documentElement.contains should work here\n   * but always returns false for comment nodes in phantomjs,\n   * making unit tests difficult. This is fixed by doing the\n   * contains() check on the node's parentNode instead of\n   * the node itself.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  function inDoc(node) {\n    var doc = document.documentElement;\n    var parent = node && node.parentNode;\n    return doc === node || doc === parent || !!(parent && parent.nodeType === 1 && doc.contains(parent));\n  }\n\n  /**\n   * Get and remove an attribute from a node.\n   *\n   * @param {Node} node\n   * @param {String} _attr\n   */\n\n  function getAttr(node, _attr) {\n    var val = node.getAttribute(_attr);\n    if (val !== null) {\n      node.removeAttribute(_attr);\n    }\n    return val;\n  }\n\n  /**\n   * Get an attribute with colon or v-bind: prefix.\n   *\n   * @param {Node} node\n   * @param {String} name\n   * @return {String|null}\n   */\n\n  function getBindAttr(node, name) {\n    var val = getAttr(node, ':' + name);\n    if (val === null) {\n      val = getAttr(node, 'v-bind:' + name);\n    }\n    return val;\n  }\n\n  /**\n   * Insert el before target\n   *\n   * @param {Element} el\n   * @param {Element} target\n   */\n\n  function before(el, target) {\n    target.parentNode.insertBefore(el, target);\n  }\n\n  /**\n   * Insert el after target\n   *\n   * @param {Element} el\n   * @param {Element} target\n   */\n\n  function after(el, target) {\n    if (target.nextSibling) {\n      before(el, target.nextSibling);\n    } else {\n      target.parentNode.appendChild(el);\n    }\n  }\n\n  /**\n   * Remove el from DOM\n   *\n   * @param {Element} el\n   */\n\n  function remove(el) {\n    el.parentNode.removeChild(el);\n  }\n\n  /**\n   * Prepend el to target\n   *\n   * @param {Element} el\n   * @param {Element} target\n   */\n\n  function prepend(el, target) {\n    if (target.firstChild) {\n      before(el, target.firstChild);\n    } else {\n      target.appendChild(el);\n    }\n  }\n\n  /**\n   * Replace target with el\n   *\n   * @param {Element} target\n   * @param {Element} el\n   */\n\n  function replace(target, el) {\n    var parent = target.parentNode;\n    if (parent) {\n      parent.replaceChild(el, target);\n    }\n  }\n\n  /**\n   * Add event listener shorthand.\n   *\n   * @param {Element} el\n   * @param {String} event\n   * @param {Function} cb\n   */\n\n  function on$1(el, event, cb) {\n    el.addEventListener(event, cb);\n  }\n\n  /**\n   * Remove event listener shorthand.\n   *\n   * @param {Element} el\n   * @param {String} event\n   * @param {Function} cb\n   */\n\n  function off(el, event, cb) {\n    el.removeEventListener(event, cb);\n  }\n\n  /**\n   * Add class with compatibility for IE & SVG\n   *\n   * @param {Element} el\n   * @param {Strong} cls\n   */\n\n  function addClass(el, cls) {\n    if (el.classList) {\n      el.classList.add(cls);\n    } else {\n      var cur = ' ' + (el.getAttribute('class') || '') + ' ';\n      if (cur.indexOf(' ' + cls + ' ') < 0) {\n        el.setAttribute('class', (cur + cls).trim());\n      }\n    }\n  }\n\n  /**\n   * Remove class with compatibility for IE & SVG\n   *\n   * @param {Element} el\n   * @param {Strong} cls\n   */\n\n  function removeClass(el, cls) {\n    if (el.classList) {\n      el.classList.remove(cls);\n    } else {\n      var cur = ' ' + (el.getAttribute('class') || '') + ' ';\n      var tar = ' ' + cls + ' ';\n      while (cur.indexOf(tar) >= 0) {\n        cur = cur.replace(tar, ' ');\n      }\n      el.setAttribute('class', cur.trim());\n    }\n    if (!el.className) {\n      el.removeAttribute('class');\n    }\n  }\n\n  /**\n   * Extract raw content inside an element into a temporary\n   * container div\n   *\n   * @param {Element} el\n   * @param {Boolean} asFragment\n   * @return {Element}\n   */\n\n  function extractContent(el, asFragment) {\n    var child;\n    var rawContent;\n    /* istanbul ignore if */\n    if (isTemplate(el) && el.content instanceof DocumentFragment) {\n      el = el.content;\n    }\n    if (el.hasChildNodes()) {\n      trimNode(el);\n      rawContent = asFragment ? document.createDocumentFragment() : document.createElement('div');\n      /* eslint-disable no-cond-assign */\n      while (child = el.firstChild) {\n        /* eslint-enable no-cond-assign */\n        rawContent.appendChild(child);\n      }\n    }\n    return rawContent;\n  }\n\n  /**\n   * Trim possible empty head/tail textNodes inside a parent.\n   *\n   * @param {Node} node\n   */\n\n  function trimNode(node) {\n    trim(node, node.firstChild);\n    trim(node, node.lastChild);\n  }\n\n  function trim(parent, node) {\n    if (node && node.nodeType === 3 && !node.data.trim()) {\n      parent.removeChild(node);\n    }\n  }\n\n  /**\n   * Check if an element is a template tag.\n   * Note if the template appears inside an SVG its tagName\n   * will be in lowercase.\n   *\n   * @param {Element} el\n   */\n\n  function isTemplate(el) {\n    return el.tagName && el.tagName.toLowerCase() === 'template';\n  }\n\n  /**\n   * Create an \"anchor\" for performing dom insertion/removals.\n   * This is used in a number of scenarios:\n   * - fragment instance\n   * - v-html\n   * - v-if\n   * - v-for\n   * - component\n   *\n   * @param {String} content\n   * @param {Boolean} persist - IE trashes empty textNodes on\n   *                            cloneNode(true), so in certain\n   *                            cases the anchor needs to be\n   *                            non-empty to be persisted in\n   *                            templates.\n   * @return {Comment|Text}\n   */\n\n  function createAnchor(content, persist) {\n    var anchor = config.debug ? document.createComment(content) : document.createTextNode(persist ? ' ' : '');\n    anchor.__vue_anchor = true;\n    return anchor;\n  }\n\n  /**\n   * Find a component ref attribute that starts with $.\n   *\n   * @param {Element} node\n   * @return {String|undefined}\n   */\n\n  var refRE = /^v-ref:/;\n\n  function findRef(node) {\n    if (node.hasAttributes()) {\n      var attrs = node.attributes;\n      for (var i = 0, l = attrs.length; i < l; i++) {\n        var name = attrs[i].name;\n        if (refRE.test(name)) {\n          return camelize(name.replace(refRE, ''));\n        }\n      }\n    }\n  }\n\n  /**\n   * Map a function to a range of nodes .\n   *\n   * @param {Node} node\n   * @param {Node} end\n   * @param {Function} op\n   */\n\n  function mapNodeRange(node, end, op) {\n    var next;\n    while (node !== end) {\n      next = node.nextSibling;\n      op(node);\n      node = next;\n    }\n    op(end);\n  }\n\n  /**\n   * Remove a range of nodes with transition, store\n   * the nodes in a fragment with correct ordering,\n   * and call callback when done.\n   *\n   * @param {Node} start\n   * @param {Node} end\n   * @param {Vue} vm\n   * @param {DocumentFragment} frag\n   * @param {Function} cb\n   */\n\n  function removeNodeRange(start, end, vm, frag, cb) {\n    var done = false;\n    var removed = 0;\n    var nodes = [];\n    mapNodeRange(start, end, function (node) {\n      if (node === end) done = true;\n      nodes.push(node);\n      removeWithTransition(node, vm, onRemoved);\n    });\n    function onRemoved() {\n      removed++;\n      if (done && removed >= nodes.length) {\n        for (var i = 0; i < nodes.length; i++) {\n          frag.appendChild(nodes[i]);\n        }\n        cb && cb();\n      }\n    }\n  }\n\n  var commonTagRE = /^(div|p|span|img|a|b|i|br|ul|ol|li|h1|h2|h3|h4|h5|h6|code|pre|table|th|td|tr|form|label|input|select|option|nav|article|section|header|footer)$/;\n\n  /**\n   * Check if an element is a component, if yes return its\n   * component id.\n   *\n   * @param {Element} el\n   * @param {Object} options\n   * @return {Object|undefined}\n   */\n\n  function checkComponentAttr(el, options) {\n    var tag = el.tagName.toLowerCase();\n    var hasAttrs = el.hasAttributes();\n    if (!commonTagRE.test(tag) && tag !== 'component') {\n      if (resolveAsset(options, 'components', tag)) {\n        return { id: tag };\n      } else {\n        var is = hasAttrs && getIsBinding(el);\n        if (is) {\n          return is;\n        } else if ('development' !== 'production') {\n          if (tag.indexOf('-') > -1 || /HTMLUnknownElement/.test(el.toString()) &&\n          // Chrome returns unknown for several HTML5 elements.\n          // https://code.google.com/p/chromium/issues/detail?id=540526\n          !/^(data|time|rtc|rb)$/.test(tag)) {\n            warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly?');\n          }\n        }\n      }\n    } else if (hasAttrs) {\n      return getIsBinding(el);\n    }\n  }\n\n  /**\n   * Get \"is\" binding from an element.\n   *\n   * @param {Element} el\n   * @return {Object|undefined}\n   */\n\n  function getIsBinding(el) {\n    // dynamic syntax\n    var exp = getAttr(el, 'is');\n    if (exp != null) {\n      return { id: exp };\n    } else {\n      exp = getBindAttr(el, 'is');\n      if (exp != null) {\n        return { id: exp, dynamic: true };\n      }\n    }\n  }\n\n  /**\n   * Set a prop's initial value on a vm and its data object.\n   *\n   * @param {Vue} vm\n   * @param {Object} prop\n   * @param {*} value\n   */\n\n  function initProp(vm, prop, value) {\n    var key = prop.path;\n    vm[key] = vm._data[key] = assertProp(prop, value) ? value : undefined;\n  }\n\n  /**\n   * Assert whether a prop is valid.\n   *\n   * @param {Object} prop\n   * @param {*} value\n   */\n\n  function assertProp(prop, value) {\n    // if a prop is not provided and is not required,\n    // skip the check.\n    if (prop.raw === null && !prop.required) {\n      return true;\n    }\n    var options = prop.options;\n    var type = options.type;\n    var valid = true;\n    var expectedType;\n    if (type) {\n      if (type === String) {\n        expectedType = 'string';\n        valid = typeof value === expectedType;\n      } else if (type === Number) {\n        expectedType = 'number';\n        valid = typeof value === 'number';\n      } else if (type === Boolean) {\n        expectedType = 'boolean';\n        valid = typeof value === 'boolean';\n      } else if (type === Function) {\n        expectedType = 'function';\n        valid = typeof value === 'function';\n      } else if (type === Object) {\n        expectedType = 'object';\n        valid = isPlainObject(value);\n      } else if (type === Array) {\n        expectedType = 'array';\n        valid = isArray(value);\n      } else {\n        valid = value instanceof type;\n      }\n    }\n    if (!valid) {\n      'development' !== 'production' && warn('Invalid prop: type check failed for ' + prop.path + '=\"' + prop.raw + '\".' + ' Expected ' + formatType(expectedType) + ', got ' + formatValue(value) + '.');\n      return false;\n    }\n    var validator = options.validator;\n    if (validator) {\n      if (!validator.call(null, value)) {\n        'development' !== 'production' && warn('Invalid prop: custom validator check failed for ' + prop.path + '=\"' + prop.raw + '\"');\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function formatType(val) {\n    return val ? val.charAt(0).toUpperCase() + val.slice(1) : 'custom type';\n  }\n\n  function formatValue(val) {\n    return Object.prototype.toString.call(val).slice(8, -1);\n  }\n\n  /**\n   * Option overwriting strategies are functions that handle\n   * how to merge a parent option value and a child option\n   * value into the final value.\n   *\n   * All strategy functions follow the same signature:\n   *\n   * @param {*} parentVal\n   * @param {*} childVal\n   * @param {Vue} [vm]\n   */\n\n  var strats = config.optionMergeStrategies = Object.create(null);\n\n  /**\n   * Helper that recursively merges two data objects together.\n   */\n\n  function mergeData(to, from) {\n    var key, toVal, fromVal;\n    for (key in from) {\n      toVal = to[key];\n      fromVal = from[key];\n      if (!hasOwn(to, key)) {\n        set(to, key, fromVal);\n      } else if (isObject(toVal) && isObject(fromVal)) {\n        mergeData(toVal, fromVal);\n      }\n    }\n    return to;\n  }\n\n  /**\n   * Data\n   */\n\n  strats.data = function (parentVal, childVal, vm) {\n    if (!vm) {\n      // in a Vue.extend merge, both should be functions\n      if (!childVal) {\n        return parentVal;\n      }\n      if (typeof childVal !== 'function') {\n        'development' !== 'production' && warn('The \"data\" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.');\n        return parentVal;\n      }\n      if (!parentVal) {\n        return childVal;\n      }\n      // when parentVal & childVal are both present,\n      // we need to return a function that returns the\n      // merged result of both functions... no need to\n      // check if parentVal is a function here because\n      // it has to be a function to pass previous merges.\n      return function mergedDataFn() {\n        return mergeData(childVal.call(this), parentVal.call(this));\n      };\n    } else if (parentVal || childVal) {\n      return function mergedInstanceDataFn() {\n        // instance merge\n        var instanceData = typeof childVal === 'function' ? childVal.call(vm) : childVal;\n        var defaultData = typeof parentVal === 'function' ? parentVal.call(vm) : undefined;\n        if (instanceData) {\n          return mergeData(instanceData, defaultData);\n        } else {\n          return defaultData;\n        }\n      };\n    }\n  };\n\n  /**\n   * El\n   */\n\n  strats.el = function (parentVal, childVal, vm) {\n    if (!vm && childVal && typeof childVal !== 'function') {\n      'development' !== 'production' && warn('The \"el\" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.');\n      return;\n    }\n    var ret = childVal || parentVal;\n    // invoke the element factory if this is instance merge\n    return vm && typeof ret === 'function' ? ret.call(vm) : ret;\n  };\n\n  /**\n   * Hooks and param attributes are merged as arrays.\n   */\n\n  strats.init = strats.created = strats.ready = strats.attached = strats.detached = strats.beforeCompile = strats.compiled = strats.beforeDestroy = strats.destroyed = function (parentVal, childVal) {\n    return childVal ? parentVal ? parentVal.concat(childVal) : isArray(childVal) ? childVal : [childVal] : parentVal;\n  };\n\n  /**\n   * 0.11 deprecation warning\n   */\n\n  strats.paramAttributes = function () {\n    /* istanbul ignore next */\n    'development' !== 'production' && warn('\"paramAttributes\" option has been deprecated in 0.12. ' + 'Use \"props\" instead.');\n  };\n\n  /**\n   * Assets\n   *\n   * When a vm is present (instance creation), we need to do\n   * a three-way merge between constructor options, instance\n   * options and parent options.\n   */\n\n  function mergeAssets(parentVal, childVal) {\n    var res = Object.create(parentVal);\n    return childVal ? extend(res, guardArrayAssets(childVal)) : res;\n  }\n\n  config._assetTypes.forEach(function (type) {\n    strats[type + 's'] = mergeAssets;\n  });\n\n  /**\n   * Events & Watchers.\n   *\n   * Events & watchers hashes should not overwrite one\n   * another, so we merge them as arrays.\n   */\n\n  strats.watch = strats.events = function (parentVal, childVal) {\n    if (!childVal) return parentVal;\n    if (!parentVal) return childVal;\n    var ret = {};\n    extend(ret, parentVal);\n    for (var key in childVal) {\n      var parent = ret[key];\n      var child = childVal[key];\n      if (parent && !isArray(parent)) {\n        parent = [parent];\n      }\n      ret[key] = parent ? parent.concat(child) : [child];\n    }\n    return ret;\n  };\n\n  /**\n   * Other object hashes.\n   */\n\n  strats.props = strats.methods = strats.computed = function (parentVal, childVal) {\n    if (!childVal) return parentVal;\n    if (!parentVal) return childVal;\n    var ret = Object.create(null);\n    extend(ret, parentVal);\n    extend(ret, childVal);\n    return ret;\n  };\n\n  /**\n   * Default strategy.\n   */\n\n  var defaultStrat = function defaultStrat(parentVal, childVal) {\n    return childVal === undefined ? parentVal : childVal;\n  };\n\n  /**\n   * Make sure component options get converted to actual\n   * constructors.\n   *\n   * @param {Object} options\n   */\n\n  function guardComponents(options) {\n    if (options.components) {\n      var components = options.components = guardArrayAssets(options.components);\n      var def;\n      var ids = Object.keys(components);\n      for (var i = 0, l = ids.length; i < l; i++) {\n        var key = ids[i];\n        if (commonTagRE.test(key)) {\n          'development' !== 'production' && warn('Do not use built-in HTML elements as component ' + 'id: ' + key);\n          continue;\n        }\n        def = components[key];\n        if (isPlainObject(def)) {\n          components[key] = Vue.extend(def);\n        }\n      }\n    }\n  }\n\n  /**\n   * Ensure all props option syntax are normalized into the\n   * Object-based format.\n   *\n   * @param {Object} options\n   */\n\n  function guardProps(options) {\n    var props = options.props;\n    var i, val;\n    if (isArray(props)) {\n      options.props = {};\n      i = props.length;\n      while (i--) {\n        val = props[i];\n        if (typeof val === 'string') {\n          options.props[val] = null;\n        } else if (val.name) {\n          options.props[val.name] = val;\n        }\n      }\n    } else if (isPlainObject(props)) {\n      var keys = Object.keys(props);\n      i = keys.length;\n      while (i--) {\n        val = props[keys[i]];\n        if (typeof val === 'function') {\n          props[keys[i]] = { type: val };\n        }\n      }\n    }\n  }\n\n  /**\n   * Guard an Array-format assets option and converted it\n   * into the key-value Object format.\n   *\n   * @param {Object|Array} assets\n   * @return {Object}\n   */\n\n  function guardArrayAssets(assets) {\n    if (isArray(assets)) {\n      var res = {};\n      var i = assets.length;\n      var asset;\n      while (i--) {\n        asset = assets[i];\n        var id = typeof asset === 'function' ? asset.options && asset.options.name || asset.id : asset.name || asset.id;\n        if (!id) {\n          'development' !== 'production' && warn('Array-syntax assets must provide a \"name\" or \"id\" field.');\n        } else {\n          res[id] = asset;\n        }\n      }\n      return res;\n    }\n    return assets;\n  }\n\n  /**\n   * Merge two option objects into a new one.\n   * Core utility used in both instantiation and inheritance.\n   *\n   * @param {Object} parent\n   * @param {Object} child\n   * @param {Vue} [vm] - if vm is present, indicates this is\n   *                     an instantiation merge.\n   */\n\n  function mergeOptions(parent, child, vm) {\n    guardComponents(child);\n    guardProps(child);\n    var options = {};\n    var key;\n    if (child.mixins) {\n      for (var i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm);\n      }\n    }\n    for (key in parent) {\n      mergeField(key);\n    }\n    for (key in child) {\n      if (!hasOwn(parent, key)) {\n        mergeField(key);\n      }\n    }\n    function mergeField(key) {\n      var strat = strats[key] || defaultStrat;\n      options[key] = strat(parent[key], child[key], vm, key);\n    }\n    return options;\n  }\n\n  /**\n   * Resolve an asset.\n   * This function is used because child instances need access\n   * to assets defined in its ancestor chain.\n   *\n   * @param {Object} options\n   * @param {String} type\n   * @param {String} id\n   * @return {Object|Function}\n   */\n\n  function resolveAsset(options, type, id) {\n    var assets = options[type];\n    var camelizedId;\n    return assets[id] ||\n    // camelCase ID\n    assets[camelizedId = camelize(id)] ||\n    // Pascal Case ID\n    assets[camelizedId.charAt(0).toUpperCase() + camelizedId.slice(1)];\n  }\n\n  /**\n   * Assert asset exists\n   */\n\n  function assertAsset(val, type, id) {\n    if (!val) {\n      'development' !== 'production' && warn('Failed to resolve ' + type + ': ' + id);\n    }\n  }\n\n  var arrayProto = Array.prototype;\n  var arrayMethods = Object.create(arrayProto)\n\n  /**\n   * Intercept mutating methods and emit events\n   */\n\n  ;['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(function (method) {\n    // cache original method\n    var original = arrayProto[method];\n    def(arrayMethods, method, function mutator() {\n      // avoid leaking arguments:\n      // http://jsperf.com/closure-with-arguments\n      var i = arguments.length;\n      var args = new Array(i);\n      while (i--) {\n        args[i] = arguments[i];\n      }\n      var result = original.apply(this, args);\n      var ob = this.__ob__;\n      var inserted;\n      switch (method) {\n        case 'push':\n          inserted = args;\n          break;\n        case 'unshift':\n          inserted = args;\n          break;\n        case 'splice':\n          inserted = args.slice(2);\n          break;\n      }\n      if (inserted) ob.observeArray(inserted);\n      // notify change\n      ob.dep.notify();\n      return result;\n    });\n  });\n\n  /**\n   * Swap the element at the given index with a new value\n   * and emits corresponding event.\n   *\n   * @param {Number} index\n   * @param {*} val\n   * @return {*} - replaced element\n   */\n\n  def(arrayProto, '$set', function $set(index, val) {\n    if (index >= this.length) {\n      this.length = index + 1;\n    }\n    return this.splice(index, 1, val)[0];\n  });\n\n  /**\n   * Convenience method to remove the element at given index.\n   *\n   * @param {Number} index\n   * @param {*} val\n   */\n\n  def(arrayProto, '$remove', function $remove(item) {\n    /* istanbul ignore if */\n    if (!this.length) return;\n    var index = indexOf(this, item);\n    if (index > -1) {\n      return this.splice(index, 1);\n    }\n  });\n\n  var uid$3 = 0;\n\n  /**\n   * A dep is an observable that can have multiple\n   * directives subscribing to it.\n   *\n   * @constructor\n   */\n  function Dep() {\n    this.id = uid$3++;\n    this.subs = [];\n  }\n\n  // the current target watcher being evaluated.\n  // this is globally unique because there could be only one\n  // watcher being evaluated at any time.\n  Dep.target = null;\n\n  /**\n   * Add a directive subscriber.\n   *\n   * @param {Directive} sub\n   */\n\n  Dep.prototype.addSub = function (sub) {\n    this.subs.push(sub);\n  };\n\n  /**\n   * Remove a directive subscriber.\n   *\n   * @param {Directive} sub\n   */\n\n  Dep.prototype.removeSub = function (sub) {\n    this.subs.$remove(sub);\n  };\n\n  /**\n   * Add self as a dependency to the target watcher.\n   */\n\n  Dep.prototype.depend = function () {\n    Dep.target.addDep(this);\n  };\n\n  /**\n   * Notify all subscribers of a new value.\n   */\n\n  Dep.prototype.notify = function () {\n    // stablize the subscriber list first\n    var subs = toArray(this.subs);\n    for (var i = 0, l = subs.length; i < l; i++) {\n      subs[i].update();\n    }\n  };\n\n  var arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n  /**\n   * Observer class that are attached to each observed\n   * object. Once attached, the observer converts target\n   * object's property keys into getter/setters that\n   * collect dependencies and dispatches updates.\n   *\n   * @param {Array|Object} value\n   * @constructor\n   */\n\n  function Observer(value) {\n    this.value = value;\n    this.dep = new Dep();\n    def(value, '__ob__', this);\n    if (isArray(value)) {\n      var augment = hasProto ? protoAugment : copyAugment;\n      augment(value, arrayMethods, arrayKeys);\n      this.observeArray(value);\n    } else {\n      this.walk(value);\n    }\n  }\n\n  // Instance methods\n\n  /**\n   * Walk through each property and convert them into\n   * getter/setters. This method should only be called when\n   * value type is Object.\n   *\n   * @param {Object} obj\n   */\n\n  Observer.prototype.walk = function (obj) {\n    var keys = Object.keys(obj);\n    var i = keys.length;\n    while (i--) {\n      this.convert(keys[i], obj[keys[i]]);\n    }\n  };\n\n  /**\n   * Observe a list of Array items.\n   *\n   * @param {Array} items\n   */\n\n  Observer.prototype.observeArray = function (items) {\n    var i = items.length;\n    while (i--) {\n      observe(items[i]);\n    }\n  };\n\n  /**\n   * Convert a property into getter/setter so we can emit\n   * the events when the property is accessed/changed.\n   *\n   * @param {String} key\n   * @param {*} val\n   */\n\n  Observer.prototype.convert = function (key, val) {\n    defineReactive(this.value, key, val);\n  };\n\n  /**\n   * Add an owner vm, so that when $set/$delete mutations\n   * happen we can notify owner vms to proxy the keys and\n   * digest the watchers. This is only called when the object\n   * is observed as an instance's root $data.\n   *\n   * @param {Vue} vm\n   */\n\n  Observer.prototype.addVm = function (vm) {\n    (this.vms || (this.vms = [])).push(vm);\n  };\n\n  /**\n   * Remove an owner vm. This is called when the object is\n   * swapped out as an instance's $data object.\n   *\n   * @param {Vue} vm\n   */\n\n  Observer.prototype.removeVm = function (vm) {\n    this.vms.$remove(vm);\n  };\n\n  // helpers\n\n  /**\n   * Augment an target Object or Array by intercepting\n   * the prototype chain using __proto__\n   *\n   * @param {Object|Array} target\n   * @param {Object} proto\n   */\n\n  function protoAugment(target, src) {\n    target.__proto__ = src;\n  }\n\n  /**\n   * Augment an target Object or Array by defining\n   * hidden properties.\n   *\n   * @param {Object|Array} target\n   * @param {Object} proto\n   */\n\n  function copyAugment(target, src, keys) {\n    var i = keys.length;\n    var key;\n    while (i--) {\n      key = keys[i];\n      def(target, key, src[key]);\n    }\n  }\n\n  /**\n   * Attempt to create an observer instance for a value,\n   * returns the new observer if successfully observed,\n   * or the existing observer if the value already has one.\n   *\n   * @param {*} value\n   * @param {Vue} [vm]\n   * @return {Observer|undefined}\n   * @static\n   */\n\n  function observe(value, vm) {\n    if (!value || typeof value !== 'object') {\n      return;\n    }\n    var ob;\n    if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n      ob = value.__ob__;\n    } else if ((isArray(value) || isPlainObject(value)) && !Object.isFrozen(value) && !value._isVue) {\n      ob = new Observer(value);\n    }\n    if (ob && vm) {\n      ob.addVm(vm);\n    }\n    return ob;\n  }\n\n  /**\n   * Define a reactive property on an Object.\n   *\n   * @param {Object} obj\n   * @param {String} key\n   * @param {*} val\n   */\n\n  function defineReactive(obj, key, val) {\n    var dep = new Dep();\n\n    // cater for pre-defined getter/setters\n    var getter, setter;\n    if (config.convertAllProperties) {\n      var property = Object.getOwnPropertyDescriptor(obj, key);\n      if (property && property.configurable === false) {\n        return;\n      }\n      getter = property && property.get;\n      setter = property && property.set;\n    }\n\n    var childOb = observe(val);\n    Object.defineProperty(obj, key, {\n      enumerable: true,\n      configurable: true,\n      get: function reactiveGetter() {\n        var value = getter ? getter.call(obj) : val;\n        if (Dep.target) {\n          dep.depend();\n          if (childOb) {\n            childOb.dep.depend();\n          }\n          if (isArray(value)) {\n            for (var e, i = 0, l = value.length; i < l; i++) {\n              e = value[i];\n              e && e.__ob__ && e.__ob__.dep.depend();\n            }\n          }\n        }\n        return value;\n      },\n      set: function reactiveSetter(newVal) {\n        var value = getter ? getter.call(obj) : val;\n        if (newVal === value) {\n          return;\n        }\n        if (setter) {\n          setter.call(obj, newVal);\n        } else {\n          val = newVal;\n        }\n        childOb = observe(newVal);\n        dep.notify();\n      }\n    });\n  }\n\n  var util = Object.freeze({\n  \tdefineReactive: defineReactive,\n  \tset: set,\n  \tdel: del,\n  \thasOwn: hasOwn,\n  \tisLiteral: isLiteral,\n  \tisReserved: isReserved,\n  \t_toString: _toString,\n  \ttoNumber: toNumber,\n  \ttoBoolean: toBoolean,\n  \tstripQuotes: stripQuotes,\n  \tcamelize: camelize,\n  \thyphenate: hyphenate,\n  \tclassify: classify,\n  \tbind: bind$1,\n  \ttoArray: toArray,\n  \textend: extend,\n  \tisObject: isObject,\n  \tisPlainObject: isPlainObject,\n  \tdef: def,\n  \tdebounce: _debounce,\n  \tindexOf: indexOf,\n  \tcancellable: cancellable,\n  \tlooseEqual: looseEqual,\n  \tisArray: isArray,\n  \thasProto: hasProto,\n  \tinBrowser: inBrowser,\n  \tisIE9: isIE9,\n  \tisAndroid: isAndroid,\n  \tget transitionProp () { return transitionProp; },\n  \tget transitionEndEvent () { return transitionEndEvent; },\n  \tget animationProp () { return animationProp; },\n  \tget animationEndEvent () { return animationEndEvent; },\n  \tnextTick: nextTick,\n  \tquery: query,\n  \tinDoc: inDoc,\n  \tgetAttr: getAttr,\n  \tgetBindAttr: getBindAttr,\n  \tbefore: before,\n  \tafter: after,\n  \tremove: remove,\n  \tprepend: prepend,\n  \treplace: replace,\n  \ton: on$1,\n  \toff: off,\n  \taddClass: addClass,\n  \tremoveClass: removeClass,\n  \textractContent: extractContent,\n  \ttrimNode: trimNode,\n  \tisTemplate: isTemplate,\n  \tcreateAnchor: createAnchor,\n  \tfindRef: findRef,\n  \tmapNodeRange: mapNodeRange,\n  \tremoveNodeRange: removeNodeRange,\n  \tmergeOptions: mergeOptions,\n  \tresolveAsset: resolveAsset,\n  \tassertAsset: assertAsset,\n  \tcheckComponentAttr: checkComponentAttr,\n  \tinitProp: initProp,\n  \tassertProp: assertProp,\n  \tcommonTagRE: commonTagRE,\n  \tget warn () { return warn; }\n  });\n\n  var uid = 0;\n\n  function initMixin (Vue) {\n\n    /**\n     * The main init sequence. This is called for every\n     * instance, including ones that are created from extended\n     * constructors.\n     *\n     * @param {Object} options - this options object should be\n     *                           the result of merging class\n     *                           options and the options passed\n     *                           in to the constructor.\n     */\n\n    Vue.prototype._init = function (options) {\n\n      options = options || {};\n\n      this.$el = null;\n      this.$parent = options.parent;\n      this.$root = this.$parent ? this.$parent.$root : this;\n      this.$children = [];\n      this.$refs = {}; // child vm references\n      this.$els = {}; // element references\n      this._watchers = []; // all watchers as an array\n      this._directives = []; // all directives\n\n      // a uid\n      this._uid = uid++;\n\n      // a flag to avoid this being observed\n      this._isVue = true;\n\n      // events bookkeeping\n      this._events = {}; // registered callbacks\n      this._eventsCount = {}; // for $broadcast optimization\n\n      // fragment instance properties\n      this._isFragment = false;\n      this._fragment = // @type {DocumentFragment}\n      this._fragmentStart = // @type {Text|Comment}\n      this._fragmentEnd = null; // @type {Text|Comment}\n\n      // lifecycle state\n      this._isCompiled = this._isDestroyed = this._isReady = this._isAttached = this._isBeingDestroyed = false;\n      this._unlinkFn = null;\n\n      // context:\n      // if this is a transcluded component, context\n      // will be the common parent vm of this instance\n      // and its host.\n      this._context = options._context || this.$parent;\n\n      // scope:\n      // if this is inside an inline v-for, the scope\n      // will be the intermediate scope created for this\n      // repeat fragment. this is used for linking props\n      // and container directives.\n      this._scope = options._scope;\n\n      // fragment:\n      // if this instance is compiled inside a Fragment, it\n      // needs to reigster itself as a child of that fragment\n      // for attach/detach to work properly.\n      this._frag = options._frag;\n      if (this._frag) {\n        this._frag.children.push(this);\n      }\n\n      // push self into parent / transclusion host\n      if (this.$parent) {\n        this.$parent.$children.push(this);\n      }\n\n      // merge options.\n      options = this.$options = mergeOptions(this.constructor.options, options, this);\n\n      // set ref\n      this._updateRef();\n\n      // initialize data as empty object.\n      // it will be filled up in _initScope().\n      this._data = {};\n\n      // call init hook\n      this._callHook('init');\n\n      // initialize data observation and scope inheritance.\n      this._initState();\n\n      // setup event system and option events.\n      this._initEvents();\n\n      // call created hook\n      this._callHook('created');\n\n      // if `el` option is passed, start compilation.\n      if (options.el) {\n        this.$mount(options.el);\n      }\n    };\n  }\n\n  var pathCache = new Cache(1000);\n\n  // actions\n  var APPEND = 0;\n  var PUSH = 1;\n  var INC_SUB_PATH_DEPTH = 2;\n  var PUSH_SUB_PATH = 3;\n\n  // states\n  var BEFORE_PATH = 0;\n  var IN_PATH = 1;\n  var BEFORE_IDENT = 2;\n  var IN_IDENT = 3;\n  var IN_SUB_PATH = 4;\n  var IN_SINGLE_QUOTE = 5;\n  var IN_DOUBLE_QUOTE = 6;\n  var AFTER_PATH = 7;\n  var ERROR = 8;\n\n  var pathStateMachine = [];\n\n  pathStateMachine[BEFORE_PATH] = {\n    'ws': [BEFORE_PATH],\n    'ident': [IN_IDENT, APPEND],\n    '[': [IN_SUB_PATH],\n    'eof': [AFTER_PATH]\n  };\n\n  pathStateMachine[IN_PATH] = {\n    'ws': [IN_PATH],\n    '.': [BEFORE_IDENT],\n    '[': [IN_SUB_PATH],\n    'eof': [AFTER_PATH]\n  };\n\n  pathStateMachine[BEFORE_IDENT] = {\n    'ws': [BEFORE_IDENT],\n    'ident': [IN_IDENT, APPEND]\n  };\n\n  pathStateMachine[IN_IDENT] = {\n    'ident': [IN_IDENT, APPEND],\n    '0': [IN_IDENT, APPEND],\n    'number': [IN_IDENT, APPEND],\n    'ws': [IN_PATH, PUSH],\n    '.': [BEFORE_IDENT, PUSH],\n    '[': [IN_SUB_PATH, PUSH],\n    'eof': [AFTER_PATH, PUSH]\n  };\n\n  pathStateMachine[IN_SUB_PATH] = {\n    \"'\": [IN_SINGLE_QUOTE, APPEND],\n    '\"': [IN_DOUBLE_QUOTE, APPEND],\n    '[': [IN_SUB_PATH, INC_SUB_PATH_DEPTH],\n    ']': [IN_PATH, PUSH_SUB_PATH],\n    'eof': ERROR,\n    'else': [IN_SUB_PATH, APPEND]\n  };\n\n  pathStateMachine[IN_SINGLE_QUOTE] = {\n    \"'\": [IN_SUB_PATH, APPEND],\n    'eof': ERROR,\n    'else': [IN_SINGLE_QUOTE, APPEND]\n  };\n\n  pathStateMachine[IN_DOUBLE_QUOTE] = {\n    '\"': [IN_SUB_PATH, APPEND],\n    'eof': ERROR,\n    'else': [IN_DOUBLE_QUOTE, APPEND]\n  };\n\n  /**\n   * Determine the type of a character in a keypath.\n   *\n   * @param {Char} ch\n   * @return {String} type\n   */\n\n  function getPathCharType(ch) {\n    if (ch === undefined) {\n      return 'eof';\n    }\n\n    var code = ch.charCodeAt(0);\n\n    switch (code) {\n      case 0x5B: // [\n      case 0x5D: // ]\n      case 0x2E: // .\n      case 0x22: // \"\n      case 0x27: // '\n      case 0x30:\n        // 0\n        return ch;\n\n      case 0x5F: // _\n      case 0x24:\n        // $\n        return 'ident';\n\n      case 0x20: // Space\n      case 0x09: // Tab\n      case 0x0A: // Newline\n      case 0x0D: // Return\n      case 0xA0: // No-break space\n      case 0xFEFF: // Byte Order Mark\n      case 0x2028: // Line Separator\n      case 0x2029:\n        // Paragraph Separator\n        return 'ws';\n    }\n\n    // a-z, A-Z\n    if (code >= 0x61 && code <= 0x7A || code >= 0x41 && code <= 0x5A) {\n      return 'ident';\n    }\n\n    // 1-9\n    if (code >= 0x31 && code <= 0x39) {\n      return 'number';\n    }\n\n    return 'else';\n  }\n\n  /**\n   * Format a subPath, return its plain form if it is\n   * a literal string or number. Otherwise prepend the\n   * dynamic indicator (*).\n   *\n   * @param {String} path\n   * @return {String}\n   */\n\n  function formatSubPath(path) {\n    var trimmed = path.trim();\n    // invalid leading 0\n    if (path.charAt(0) === '0' && isNaN(path)) {\n      return false;\n    }\n    return isLiteral(trimmed) ? stripQuotes(trimmed) : '*' + trimmed;\n  }\n\n  /**\n   * Parse a string path into an array of segments\n   *\n   * @param {String} path\n   * @return {Array|undefined}\n   */\n\n  function parse(path) {\n    var keys = [];\n    var index = -1;\n    var mode = BEFORE_PATH;\n    var subPathDepth = 0;\n    var c, newChar, key, type, transition, action, typeMap;\n\n    var actions = [];\n\n    actions[PUSH] = function () {\n      if (key !== undefined) {\n        keys.push(key);\n        key = undefined;\n      }\n    };\n\n    actions[APPEND] = function () {\n      if (key === undefined) {\n        key = newChar;\n      } else {\n        key += newChar;\n      }\n    };\n\n    actions[INC_SUB_PATH_DEPTH] = function () {\n      actions[APPEND]();\n      subPathDepth++;\n    };\n\n    actions[PUSH_SUB_PATH] = function () {\n      if (subPathDepth > 0) {\n        subPathDepth--;\n        mode = IN_SUB_PATH;\n        actions[APPEND]();\n      } else {\n        subPathDepth = 0;\n        key = formatSubPath(key);\n        if (key === false) {\n          return false;\n        } else {\n          actions[PUSH]();\n        }\n      }\n    };\n\n    function maybeUnescapeQuote() {\n      var nextChar = path[index + 1];\n      if (mode === IN_SINGLE_QUOTE && nextChar === \"'\" || mode === IN_DOUBLE_QUOTE && nextChar === '\"') {\n        index++;\n        newChar = '\\\\' + nextChar;\n        actions[APPEND]();\n        return true;\n      }\n    }\n\n    while (mode != null) {\n      index++;\n      c = path[index];\n\n      if (c === '\\\\' && maybeUnescapeQuote()) {\n        continue;\n      }\n\n      type = getPathCharType(c);\n      typeMap = pathStateMachine[mode];\n      transition = typeMap[type] || typeMap['else'] || ERROR;\n\n      if (transition === ERROR) {\n        return; // parse error\n      }\n\n      mode = transition[0];\n      action = actions[transition[1]];\n      if (action) {\n        newChar = transition[2];\n        newChar = newChar === undefined ? c : newChar;\n        if (action() === false) {\n          return;\n        }\n      }\n\n      if (mode === AFTER_PATH) {\n        keys.raw = path;\n        return keys;\n      }\n    }\n  }\n\n  /**\n   * External parse that check for a cache hit first\n   *\n   * @param {String} path\n   * @return {Array|undefined}\n   */\n\n  function parsePath(path) {\n    var hit = pathCache.get(path);\n    if (!hit) {\n      hit = parse(path);\n      if (hit) {\n        pathCache.put(path, hit);\n      }\n    }\n    return hit;\n  }\n\n  /**\n   * Get from an object from a path string\n   *\n   * @param {Object} obj\n   * @param {String} path\n   */\n\n  function getPath(obj, path) {\n    return parseExpression(path).get(obj);\n  }\n\n  /**\n   * Warn against setting non-existent root path on a vm.\n   */\n\n  var warnNonExistent;\n  if ('development' !== 'production') {\n    warnNonExistent = function (path) {\n      warn('You are setting a non-existent path \"' + path.raw + '\" ' + 'on a vm instance. Consider pre-initializing the property ' + 'with the \"data\" option for more reliable reactivity ' + 'and better performance.');\n    };\n  }\n\n  /**\n   * Set on an object from a path\n   *\n   * @param {Object} obj\n   * @param {String | Array} path\n   * @param {*} val\n   */\n\n  function setPath(obj, path, val) {\n    var original = obj;\n    if (typeof path === 'string') {\n      path = parse(path);\n    }\n    if (!path || !isObject(obj)) {\n      return false;\n    }\n    var last, key;\n    for (var i = 0, l = path.length; i < l; i++) {\n      last = obj;\n      key = path[i];\n      if (key.charAt(0) === '*') {\n        key = parseExpression(key.slice(1)).get.call(original, original);\n      }\n      if (i < l - 1) {\n        obj = obj[key];\n        if (!isObject(obj)) {\n          obj = {};\n          if ('development' !== 'production' && last._isVue) {\n            warnNonExistent(path);\n          }\n          set(last, key, obj);\n        }\n      } else {\n        if (isArray(obj)) {\n          obj.$set(key, val);\n        } else if (key in obj) {\n          obj[key] = val;\n        } else {\n          if ('development' !== 'production' && obj._isVue) {\n            warnNonExistent(path);\n          }\n          set(obj, key, val);\n        }\n      }\n    }\n    return true;\n  }\n\n  var path = Object.freeze({\n    parsePath: parsePath,\n    getPath: getPath,\n    setPath: setPath\n  });\n\n  var expressionCache = new Cache(1000);\n\n  var allowedKeywords = 'Math,Date,this,true,false,null,undefined,Infinity,NaN,' + 'isNaN,isFinite,decodeURI,decodeURIComponent,encodeURI,' + 'encodeURIComponent,parseInt,parseFloat';\n  var allowedKeywordsRE = new RegExp('^(' + allowedKeywords.replace(/,/g, '\\\\b|') + '\\\\b)');\n\n  // keywords that don't make sense inside expressions\n  var improperKeywords = 'break,case,class,catch,const,continue,debugger,default,' + 'delete,do,else,export,extends,finally,for,function,if,' + 'import,in,instanceof,let,return,super,switch,throw,try,' + 'var,while,with,yield,enum,await,implements,package,' + 'proctected,static,interface,private,public';\n  var improperKeywordsRE = new RegExp('^(' + improperKeywords.replace(/,/g, '\\\\b|') + '\\\\b)');\n\n  var wsRE = /\\s/g;\n  var newlineRE = /\\n/g;\n  var saveRE = /[\\{,]\\s*[\\w\\$_]+\\s*:|('[^']*'|\"[^\"]*\")|new |typeof |void /g;\n  var restoreRE = /\"(\\d+)\"/g;\n  var pathTestRE = /^[A-Za-z_$][\\w$]*(\\.[A-Za-z_$][\\w$]*|\\['.*?'\\]|\\[\".*?\"\\]|\\[\\d+\\]|\\[[A-Za-z_$][\\w$]*\\])*$/;\n  var pathReplaceRE = /[^\\w$\\.]([A-Za-z_$][\\w$]*(\\.[A-Za-z_$][\\w$]*|\\['.*?'\\]|\\[\".*?\"\\])*)/g;\n  var booleanLiteralRE = /^(true|false)$/;\n\n  /**\n   * Save / Rewrite / Restore\n   *\n   * When rewriting paths found in an expression, it is\n   * possible for the same letter sequences to be found in\n   * strings and Object literal property keys. Therefore we\n   * remove and store these parts in a temporary array, and\n   * restore them after the path rewrite.\n   */\n\n  var saved = [];\n\n  /**\n   * Save replacer\n   *\n   * The save regex can match two possible cases:\n   * 1. An opening object literal\n   * 2. A string\n   * If matched as a plain string, we need to escape its\n   * newlines, since the string needs to be preserved when\n   * generating the function body.\n   *\n   * @param {String} str\n   * @param {String} isString - str if matched as a string\n   * @return {String} - placeholder with index\n   */\n\n  function save(str, isString) {\n    var i = saved.length;\n    saved[i] = isString ? str.replace(newlineRE, '\\\\n') : str;\n    return '\"' + i + '\"';\n  }\n\n  /**\n   * Path rewrite replacer\n   *\n   * @param {String} raw\n   * @return {String}\n   */\n\n  function rewrite(raw) {\n    var c = raw.charAt(0);\n    var path = raw.slice(1);\n    if (allowedKeywordsRE.test(path)) {\n      return raw;\n    } else {\n      path = path.indexOf('\"') > -1 ? path.replace(restoreRE, restore) : path;\n      return c + 'scope.' + path;\n    }\n  }\n\n  /**\n   * Restore replacer\n   *\n   * @param {String} str\n   * @param {String} i - matched save index\n   * @return {String}\n   */\n\n  function restore(str, i) {\n    return saved[i];\n  }\n\n  /**\n   * Rewrite an expression, prefixing all path accessors with\n   * `scope.` and generate getter/setter functions.\n   *\n   * @param {String} exp\n   * @return {Function}\n   */\n\n  function compileGetter(exp) {\n    if (improperKeywordsRE.test(exp)) {\n      'development' !== 'production' && warn('Avoid using reserved keywords in expression: ' + exp);\n    }\n    // reset state\n    saved.length = 0;\n    // save strings and object literal keys\n    var body = exp.replace(saveRE, save).replace(wsRE, '');\n    // rewrite all paths\n    // pad 1 space here becaue the regex matches 1 extra char\n    body = (' ' + body).replace(pathReplaceRE, rewrite).replace(restoreRE, restore);\n    return makeGetterFn(body);\n  }\n\n  /**\n   * Build a getter function. Requires eval.\n   *\n   * We isolate the try/catch so it doesn't affect the\n   * optimization of the parse function when it is not called.\n   *\n   * @param {String} body\n   * @return {Function|undefined}\n   */\n\n  function makeGetterFn(body) {\n    try {\n      return new Function('scope', 'return ' + body + ';');\n    } catch (e) {\n      'development' !== 'production' && warn('Invalid expression. ' + 'Generated function body: ' + body);\n    }\n  }\n\n  /**\n   * Compile a setter function for the expression.\n   *\n   * @param {String} exp\n   * @return {Function|undefined}\n   */\n\n  function compileSetter(exp) {\n    var path = parsePath(exp);\n    if (path) {\n      return function (scope, val) {\n        setPath(scope, path, val);\n      };\n    } else {\n      'development' !== 'production' && warn('Invalid setter expression: ' + exp);\n    }\n  }\n\n  /**\n   * Parse an expression into re-written getter/setters.\n   *\n   * @param {String} exp\n   * @param {Boolean} needSet\n   * @return {Function}\n   */\n\n  function parseExpression(exp, needSet) {\n    exp = exp.trim();\n    // try cache\n    var hit = expressionCache.get(exp);\n    if (hit) {\n      if (needSet && !hit.set) {\n        hit.set = compileSetter(hit.exp);\n      }\n      return hit;\n    }\n    var res = { exp: exp };\n    res.get = isSimplePath(exp) && exp.indexOf('[') < 0\n    // optimized super simple getter\n    ? makeGetterFn('scope.' + exp)\n    // dynamic getter\n    : compileGetter(exp);\n    if (needSet) {\n      res.set = compileSetter(exp);\n    }\n    expressionCache.put(exp, res);\n    return res;\n  }\n\n  /**\n   * Check if an expression is a simple path.\n   *\n   * @param {String} exp\n   * @return {Boolean}\n   */\n\n  function isSimplePath(exp) {\n    return pathTestRE.test(exp) &&\n    // don't treat true/false as paths\n    !booleanLiteralRE.test(exp) &&\n    // Math constants e.g. Math.PI, Math.E etc.\n    exp.slice(0, 5) !== 'Math.';\n  }\n\n  var expression = Object.freeze({\n    parseExpression: parseExpression,\n    isSimplePath: isSimplePath\n  });\n\n  // we have two separate queues: one for directive updates\n  // and one for user watcher registered via $watch().\n  // we want to guarantee directive updates to be called\n  // before user watchers so that when user watchers are\n  // triggered, the DOM would have already been in updated\n  // state.\n  var queue = [];\n  var userQueue = [];\n  var has = {};\n  var circular = {};\n  var waiting = false;\n  var internalQueueDepleted = false;\n\n  /**\n   * Reset the batcher's state.\n   */\n\n  function resetBatcherState() {\n    queue = [];\n    userQueue = [];\n    has = {};\n    circular = {};\n    waiting = internalQueueDepleted = false;\n  }\n\n  /**\n   * Flush both queues and run the watchers.\n   */\n\n  function flushBatcherQueue() {\n    runBatcherQueue(queue);\n    internalQueueDepleted = true;\n    runBatcherQueue(userQueue);\n    // dev tool hook\n    /* istanbul ignore if */\n    if ('development' !== 'production') {\n      if (inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__) {\n        window.__VUE_DEVTOOLS_GLOBAL_HOOK__.emit('flush');\n      }\n    }\n    resetBatcherState();\n  }\n\n  /**\n   * Run the watchers in a single queue.\n   *\n   * @param {Array} queue\n   */\n\n  function runBatcherQueue(queue) {\n    // do not cache length because more watchers might be pushed\n    // as we run existing watchers\n    for (var i = 0; i < queue.length; i++) {\n      var watcher = queue[i];\n      var id = watcher.id;\n      has[id] = null;\n      watcher.run();\n      // in dev build, check and stop circular updates.\n      if ('development' !== 'production' && has[id] != null) {\n        circular[id] = (circular[id] || 0) + 1;\n        if (circular[id] > config._maxUpdateCount) {\n          queue.splice(has[id], 1);\n          warn('You may have an infinite update loop for watcher ' + 'with expression: ' + watcher.expression);\n        }\n      }\n    }\n  }\n\n  /**\n   * Push a watcher into the watcher queue.\n   * Jobs with duplicate IDs will be skipped unless it's\n   * pushed when the queue is being flushed.\n   *\n   * @param {Watcher} watcher\n   *   properties:\n   *   - {Number} id\n   *   - {Function} run\n   */\n\n  function pushWatcher(watcher) {\n    var id = watcher.id;\n    if (has[id] == null) {\n      // if an internal watcher is pushed, but the internal\n      // queue is already depleted, we run it immediately.\n      if (internalQueueDepleted && !watcher.user) {\n        watcher.run();\n        return;\n      }\n      // push watcher into appropriate queue\n      var q = watcher.user ? userQueue : queue;\n      has[id] = q.length;\n      q.push(watcher);\n      // queue the flush\n      if (!waiting) {\n        waiting = true;\n        nextTick(flushBatcherQueue);\n      }\n    }\n  }\n\n  var uid$2 = 0;\n\n  /**\n   * A watcher parses an expression, collects dependencies,\n   * and fires callback when the expression value changes.\n   * This is used for both the $watch() api and directives.\n   *\n   * @param {Vue} vm\n   * @param {String} expression\n   * @param {Function} cb\n   * @param {Object} options\n   *                 - {Array} filters\n   *                 - {Boolean} twoWay\n   *                 - {Boolean} deep\n   *                 - {Boolean} user\n   *                 - {Boolean} sync\n   *                 - {Boolean} lazy\n   *                 - {Function} [preProcess]\n   *                 - {Function} [postProcess]\n   * @constructor\n   */\n  function Watcher(vm, expOrFn, cb, options) {\n    // mix in options\n    if (options) {\n      extend(this, options);\n    }\n    var isFn = typeof expOrFn === 'function';\n    this.vm = vm;\n    vm._watchers.push(this);\n    this.expression = isFn ? expOrFn.toString() : expOrFn;\n    this.cb = cb;\n    this.id = ++uid$2; // uid for batching\n    this.active = true;\n    this.dirty = this.lazy; // for lazy watchers\n    this.deps = Object.create(null);\n    this.newDeps = null;\n    this.prevError = null; // for async error stacks\n    // parse expression for getter/setter\n    if (isFn) {\n      this.getter = expOrFn;\n      this.setter = undefined;\n    } else {\n      var res = parseExpression(expOrFn, this.twoWay);\n      this.getter = res.get;\n      this.setter = res.set;\n    }\n    this.value = this.lazy ? undefined : this.get();\n    // state for avoiding false triggers for deep and Array\n    // watchers during vm._digest()\n    this.queued = this.shallow = false;\n  }\n\n  /**\n   * Add a dependency to this directive.\n   *\n   * @param {Dep} dep\n   */\n\n  Watcher.prototype.addDep = function (dep) {\n    var id = dep.id;\n    if (!this.newDeps[id]) {\n      this.newDeps[id] = dep;\n      if (!this.deps[id]) {\n        this.deps[id] = dep;\n        dep.addSub(this);\n      }\n    }\n  };\n\n  /**\n   * Evaluate the getter, and re-collect dependencies.\n   */\n\n  Watcher.prototype.get = function () {\n    this.beforeGet();\n    var scope = this.scope || this.vm;\n    var value;\n    try {\n      value = this.getter.call(scope, scope);\n    } catch (e) {\n      if ('development' !== 'production' && config.warnExpressionErrors) {\n        warn('Error when evaluating expression \"' + this.expression + '\". ' + (config.debug ? '' : 'Turn on debug mode to see stack trace.'), e);\n      }\n    }\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    if (this.preProcess) {\n      value = this.preProcess(value);\n    }\n    if (this.filters) {\n      value = scope._applyFilters(value, null, this.filters, false);\n    }\n    if (this.postProcess) {\n      value = this.postProcess(value);\n    }\n    this.afterGet();\n    return value;\n  };\n\n  /**\n   * Set the corresponding value with the setter.\n   *\n   * @param {*} value\n   */\n\n  Watcher.prototype.set = function (value) {\n    var scope = this.scope || this.vm;\n    if (this.filters) {\n      value = scope._applyFilters(value, this.value, this.filters, true);\n    }\n    try {\n      this.setter.call(scope, scope, value);\n    } catch (e) {\n      if ('development' !== 'production' && config.warnExpressionErrors) {\n        warn('Error when evaluating setter \"' + this.expression + '\"', e);\n      }\n    }\n    // two-way sync for v-for alias\n    var forContext = scope.$forContext;\n    if (forContext && forContext.alias === this.expression) {\n      if (forContext.filters) {\n        'development' !== 'production' && warn('It seems you are using two-way binding on ' + 'a v-for alias (' + this.expression + '), and the ' + 'v-for has filters. This will not work properly. ' + 'Either remove the filters or use an array of ' + 'objects and bind to object properties instead.');\n        return;\n      }\n      forContext._withLock(function () {\n        if (scope.$key) {\n          // original is an object\n          forContext.rawValue[scope.$key] = value;\n        } else {\n          forContext.rawValue.$set(scope.$index, value);\n        }\n      });\n    }\n  };\n\n  /**\n   * Prepare for dependency collection.\n   */\n\n  Watcher.prototype.beforeGet = function () {\n    Dep.target = this;\n    this.newDeps = Object.create(null);\n  };\n\n  /**\n   * Clean up for dependency collection.\n   */\n\n  Watcher.prototype.afterGet = function () {\n    Dep.target = null;\n    var ids = Object.keys(this.deps);\n    var i = ids.length;\n    while (i--) {\n      var id = ids[i];\n      if (!this.newDeps[id]) {\n        this.deps[id].removeSub(this);\n      }\n    }\n    this.deps = this.newDeps;\n  };\n\n  /**\n   * Subscriber interface.\n   * Will be called when a dependency changes.\n   *\n   * @param {Boolean} shallow\n   */\n\n  Watcher.prototype.update = function (shallow) {\n    if (this.lazy) {\n      this.dirty = true;\n    } else if (this.sync || !config.async) {\n      this.run();\n    } else {\n      // if queued, only overwrite shallow with non-shallow,\n      // but not the other way around.\n      this.shallow = this.queued ? shallow ? this.shallow : false : !!shallow;\n      this.queued = true;\n      // record before-push error stack in debug mode\n      /* istanbul ignore if */\n      if ('development' !== 'production' && config.debug) {\n        this.prevError = new Error('[vue] async stack trace');\n      }\n      pushWatcher(this);\n    }\n  };\n\n  /**\n   * Batcher job interface.\n   * Will be called by the batcher.\n   */\n\n  Watcher.prototype.run = function () {\n    if (this.active) {\n      var value = this.get();\n      if (value !== this.value ||\n      // Deep watchers and Array watchers should fire even\n      // when the value is the same, because the value may\n      // have mutated; but only do so if this is a\n      // non-shallow update (caused by a vm digest).\n      (isArray(value) || this.deep) && !this.shallow) {\n        // set new value\n        var oldValue = this.value;\n        this.value = value;\n        // in debug + async mode, when a watcher callbacks\n        // throws, we also throw the saved before-push error\n        // so the full cross-tick stack trace is available.\n        var prevError = this.prevError;\n        /* istanbul ignore if */\n        if ('development' !== 'production' && config.debug && prevError) {\n          this.prevError = null;\n          try {\n            this.cb.call(this.vm, value, oldValue);\n          } catch (e) {\n            nextTick(function () {\n              throw prevError;\n            }, 0);\n            throw e;\n          }\n        } else {\n          this.cb.call(this.vm, value, oldValue);\n        }\n      }\n      this.queued = this.shallow = false;\n    }\n  };\n\n  /**\n   * Evaluate the value of the watcher.\n   * This only gets called for lazy watchers.\n   */\n\n  Watcher.prototype.evaluate = function () {\n    // avoid overwriting another watcher that is being\n    // collected.\n    var current = Dep.target;\n    this.value = this.get();\n    this.dirty = false;\n    Dep.target = current;\n  };\n\n  /**\n   * Depend on all deps collected by this watcher.\n   */\n\n  Watcher.prototype.depend = function () {\n    var depIds = Object.keys(this.deps);\n    var i = depIds.length;\n    while (i--) {\n      this.deps[depIds[i]].depend();\n    }\n  };\n\n  /**\n   * Remove self from all dependencies' subcriber list.\n   */\n\n  Watcher.prototype.teardown = function () {\n    if (this.active) {\n      // remove self from vm's watcher list\n      // we can skip this if the vm if being destroyed\n      // which can improve teardown performance.\n      if (!this.vm._isBeingDestroyed) {\n        this.vm._watchers.$remove(this);\n      }\n      var depIds = Object.keys(this.deps);\n      var i = depIds.length;\n      while (i--) {\n        this.deps[depIds[i]].removeSub(this);\n      }\n      this.active = false;\n      this.vm = this.cb = this.value = null;\n    }\n  };\n\n  /**\n   * Recrusively traverse an object to evoke all converted\n   * getters, so that every nested property inside the object\n   * is collected as a \"deep\" dependency.\n   *\n   * @param {*} val\n   */\n\n  function traverse(val) {\n    var i, keys;\n    if (isArray(val)) {\n      i = val.length;\n      while (i--) traverse(val[i]);\n    } else if (isObject(val)) {\n      keys = Object.keys(val);\n      i = keys.length;\n      while (i--) traverse(val[keys[i]]);\n    }\n  }\n\n  var cloak = {\n    bind: function bind() {\n      var el = this.el;\n      this.vm.$once('hook:compiled', function () {\n        el.removeAttribute('v-cloak');\n      });\n    }\n  };\n\n  var ref = {\n    bind: function bind() {\n      'development' !== 'production' && warn('v-ref:' + this.arg + ' must be used on a child ' + 'component. Found on <' + this.el.tagName.toLowerCase() + '>.');\n    }\n  };\n\n  var el = {\n\n    priority: 1500,\n\n    bind: function bind() {\n      /* istanbul ignore if */\n      if (!this.arg) {\n        return;\n      }\n      var id = this.id = camelize(this.arg);\n      var refs = (this._scope || this.vm).$els;\n      if (hasOwn(refs, id)) {\n        refs[id] = this.el;\n      } else {\n        defineReactive(refs, id, this.el);\n      }\n    },\n\n    unbind: function unbind() {\n      var refs = (this._scope || this.vm).$els;\n      if (refs[this.id] === this.el) {\n        refs[this.id] = null;\n      }\n    }\n  };\n\n  var prefixes = ['-webkit-', '-moz-', '-ms-'];\n  var camelPrefixes = ['Webkit', 'Moz', 'ms'];\n  var importantRE = /!important;?$/;\n  var propCache = Object.create(null);\n\n  var testEl = null;\n\n  var style = {\n\n    deep: true,\n\n    update: function update(value) {\n      if (typeof value === 'string') {\n        this.el.style.cssText = value;\n      } else if (isArray(value)) {\n        this.handleObject(value.reduce(extend, {}));\n      } else {\n        this.handleObject(value || {});\n      }\n    },\n\n    handleObject: function handleObject(value) {\n      // cache object styles so that only changed props\n      // are actually updated.\n      var cache = this.cache || (this.cache = {});\n      var name, val;\n      for (name in cache) {\n        if (!(name in value)) {\n          this.handleSingle(name, null);\n          delete cache[name];\n        }\n      }\n      for (name in value) {\n        val = value[name];\n        if (val !== cache[name]) {\n          cache[name] = val;\n          this.handleSingle(name, val);\n        }\n      }\n    },\n\n    handleSingle: function handleSingle(prop, value) {\n      prop = normalize(prop);\n      if (!prop) return; // unsupported prop\n      // cast possible numbers/booleans into strings\n      if (value != null) value += '';\n      if (value) {\n        var isImportant = importantRE.test(value) ? 'important' : '';\n        if (isImportant) {\n          value = value.replace(importantRE, '').trim();\n        }\n        this.el.style.setProperty(prop, value, isImportant);\n      } else {\n        this.el.style.removeProperty(prop);\n      }\n    }\n\n  };\n\n  /**\n   * Normalize a CSS property name.\n   * - cache result\n   * - auto prefix\n   * - camelCase -> dash-case\n   *\n   * @param {String} prop\n   * @return {String}\n   */\n\n  function normalize(prop) {\n    if (propCache[prop]) {\n      return propCache[prop];\n    }\n    var res = prefix(prop);\n    propCache[prop] = propCache[res] = res;\n    return res;\n  }\n\n  /**\n   * Auto detect the appropriate prefix for a CSS property.\n   * https://gist.github.com/paulirish/523692\n   *\n   * @param {String} prop\n   * @return {String}\n   */\n\n  function prefix(prop) {\n    prop = hyphenate(prop);\n    var camel = camelize(prop);\n    var upper = camel.charAt(0).toUpperCase() + camel.slice(1);\n    if (!testEl) {\n      testEl = document.createElement('div');\n    }\n    if (camel in testEl.style) {\n      return prop;\n    }\n    var i = prefixes.length;\n    var prefixed;\n    while (i--) {\n      prefixed = camelPrefixes[i] + upper;\n      if (prefixed in testEl.style) {\n        return prefixes[i] + prop;\n      }\n    }\n  }\n\n  // xlink\n  var xlinkNS = 'http://www.w3.org/1999/xlink';\n  var xlinkRE = /^xlink:/;\n\n  // these input element attributes should also set their\n  // corresponding properties\n  var inputProps = {\n    value: 1,\n    checked: 1,\n    selected: 1\n  };\n\n  // these attributes should set a hidden property for\n  // binding v-model to object values\n  var modelProps = {\n    value: '_value',\n    'true-value': '_trueValue',\n    'false-value': '_falseValue'\n  };\n\n  // check for attributes that prohibit interpolations\n  var disallowedInterpAttrRE = /^v-|^:|^@|^(is|transition|transition-mode|debounce|track-by|stagger|enter-stagger|leave-stagger)$/;\n\n  var bind = {\n\n    priority: 850,\n\n    bind: function bind() {\n      var attr = this.arg;\n      var tag = this.el.tagName;\n      // should be deep watch on object mode\n      if (!attr) {\n        this.deep = true;\n      }\n      // handle interpolation bindings\n      if (this.descriptor.interp) {\n        // only allow binding on native attributes\n        if (disallowedInterpAttrRE.test(attr) || attr === 'name' && (tag === 'PARTIAL' || tag === 'SLOT')) {\n          'development' !== 'production' && warn(attr + '=\"' + this.descriptor.raw + '\": ' + 'attribute interpolation is not allowed in Vue.js ' + 'directives and special attributes.');\n          this.el.removeAttribute(attr);\n          this.invalid = true;\n        }\n\n        /* istanbul ignore if */\n        if ('development' !== 'production') {\n          var raw = attr + '=\"' + this.descriptor.raw + '\": ';\n          // warn src\n          if (attr === 'src') {\n            warn(raw + 'interpolation in \"src\" attribute will cause ' + 'a 404 request. Use v-bind:src instead.');\n          }\n\n          // warn style\n          if (attr === 'style') {\n            warn(raw + 'interpolation in \"style\" attribute will cause ' + 'the attribute to be discarded in Internet Explorer. ' + 'Use v-bind:style instead.');\n          }\n        }\n      }\n    },\n\n    update: function update(value) {\n      if (this.invalid) {\n        return;\n      }\n      var attr = this.arg;\n      if (this.arg) {\n        this.handleSingle(attr, value);\n      } else {\n        this.handleObject(value || {});\n      }\n    },\n\n    // share object handler with v-bind:class\n    handleObject: style.handleObject,\n\n    handleSingle: function handleSingle(attr, value) {\n      if (inputProps[attr] && attr in this.el) {\n        this.el[attr] = attr === 'value' ? value || '' : // IE9 will set input.value to \"null\" for null...\n        value;\n      }\n      // set model props\n      var modelProp = modelProps[attr];\n      if (modelProp) {\n        this.el[modelProp] = value;\n        // update v-model if present\n        var model = this.el.__v_model;\n        if (model) {\n          model.listener();\n        }\n      }\n      // do not set value attribute for textarea\n      if (attr === 'value' && this.el.tagName === 'TEXTAREA') {\n        this.el.removeAttribute(attr);\n        return;\n      }\n      // update attribute\n      if (value != null && value !== false) {\n        if (xlinkRE.test(attr)) {\n          this.el.setAttributeNS(xlinkNS, attr, value);\n        } else {\n          this.el.setAttribute(attr, value);\n        }\n      } else {\n        this.el.removeAttribute(attr);\n      }\n    }\n  };\n\n  // keyCode aliases\n  var keyCodes = {\n    esc: 27,\n    tab: 9,\n    enter: 13,\n    space: 32,\n    'delete': 46,\n    up: 38,\n    left: 37,\n    right: 39,\n    down: 40\n  };\n\n  function keyFilter(handler, keys) {\n    var codes = keys.map(function (key) {\n      var charCode = key.charCodeAt(0);\n      if (charCode > 47 && charCode < 58) {\n        return parseInt(key, 10);\n      }\n      if (key.length === 1) {\n        charCode = key.toUpperCase().charCodeAt(0);\n        if (charCode > 64 && charCode < 91) {\n          return charCode;\n        }\n      }\n      return keyCodes[key];\n    });\n    return function keyHandler(e) {\n      if (codes.indexOf(e.keyCode) > -1) {\n        return handler.call(this, e);\n      }\n    };\n  }\n\n  function stopFilter(handler) {\n    return function stopHandler(e) {\n      e.stopPropagation();\n      return handler.call(this, e);\n    };\n  }\n\n  function preventFilter(handler) {\n    return function preventHandler(e) {\n      e.preventDefault();\n      return handler.call(this, e);\n    };\n  }\n\n  var on = {\n\n    acceptStatement: true,\n    priority: 700,\n\n    bind: function bind() {\n      // deal with iframes\n      if (this.el.tagName === 'IFRAME' && this.arg !== 'load') {\n        var self = this;\n        this.iframeBind = function () {\n          on$1(self.el.contentWindow, self.arg, self.handler);\n        };\n        this.on('load', this.iframeBind);\n      }\n    },\n\n    update: function update(handler) {\n      // stub a noop for v-on with no value,\n      // e.g. @mousedown.prevent\n      if (!this.descriptor.raw) {\n        handler = function () {};\n      }\n\n      if (typeof handler !== 'function') {\n        'development' !== 'production' && warn('v-on:' + this.arg + '=\"' + this.expression + '\" expects a function value, ' + 'got ' + handler);\n        return;\n      }\n\n      // apply modifiers\n      if (this.modifiers.stop) {\n        handler = stopFilter(handler);\n      }\n      if (this.modifiers.prevent) {\n        handler = preventFilter(handler);\n      }\n      // key filter\n      var keys = Object.keys(this.modifiers).filter(function (key) {\n        return key !== 'stop' && key !== 'prevent';\n      });\n      if (keys.length) {\n        handler = keyFilter(handler, keys);\n      }\n\n      this.reset();\n      this.handler = handler;\n\n      if (this.iframeBind) {\n        this.iframeBind();\n      } else {\n        on$1(this.el, this.arg, this.handler);\n      }\n    },\n\n    reset: function reset() {\n      var el = this.iframeBind ? this.el.contentWindow : this.el;\n      if (this.handler) {\n        off(el, this.arg, this.handler);\n      }\n    },\n\n    unbind: function unbind() {\n      this.reset();\n    }\n  };\n\n  var checkbox = {\n\n    bind: function bind() {\n      var self = this;\n      var el = this.el;\n\n      this.getValue = function () {\n        return el.hasOwnProperty('_value') ? el._value : self.params.number ? toNumber(el.value) : el.value;\n      };\n\n      function getBooleanValue() {\n        var val = el.checked;\n        if (val && el.hasOwnProperty('_trueValue')) {\n          return el._trueValue;\n        }\n        if (!val && el.hasOwnProperty('_falseValue')) {\n          return el._falseValue;\n        }\n        return val;\n      }\n\n      this.listener = function () {\n        var model = self._watcher.value;\n        if (isArray(model)) {\n          var val = self.getValue();\n          if (el.checked) {\n            if (indexOf(model, val) < 0) {\n              model.push(val);\n            }\n          } else {\n            model.$remove(val);\n          }\n        } else {\n          self.set(getBooleanValue());\n        }\n      };\n\n      this.on('change', this.listener);\n      if (el.checked) {\n        this.afterBind = this.listener;\n      }\n    },\n\n    update: function update(value) {\n      var el = this.el;\n      if (isArray(value)) {\n        el.checked = indexOf(value, this.getValue()) > -1;\n      } else {\n        if (el.hasOwnProperty('_trueValue')) {\n          el.checked = looseEqual(value, el._trueValue);\n        } else {\n          el.checked = !!value;\n        }\n      }\n    }\n  };\n\n  var select = {\n\n    bind: function bind() {\n      var self = this;\n      var el = this.el;\n\n      // method to force update DOM using latest value.\n      this.forceUpdate = function () {\n        if (self._watcher) {\n          self.update(self._watcher.get());\n        }\n      };\n\n      // check if this is a multiple select\n      var multiple = this.multiple = el.hasAttribute('multiple');\n\n      // attach listener\n      this.listener = function () {\n        var value = getValue(el, multiple);\n        value = self.params.number ? isArray(value) ? value.map(toNumber) : toNumber(value) : value;\n        self.set(value);\n      };\n      this.on('change', this.listener);\n\n      // if has initial value, set afterBind\n      var initValue = getValue(el, multiple, true);\n      if (multiple && initValue.length || !multiple && initValue !== null) {\n        this.afterBind = this.listener;\n      }\n\n      // All major browsers except Firefox resets\n      // selectedIndex with value -1 to 0 when the element\n      // is appended to a new parent, therefore we have to\n      // force a DOM update whenever that happens...\n      this.vm.$on('hook:attached', this.forceUpdate);\n    },\n\n    update: function update(value) {\n      var el = this.el;\n      el.selectedIndex = -1;\n      var multi = this.multiple && isArray(value);\n      var options = el.options;\n      var i = options.length;\n      var op, val;\n      while (i--) {\n        op = options[i];\n        val = op.hasOwnProperty('_value') ? op._value : op.value;\n        /* eslint-disable eqeqeq */\n        op.selected = multi ? indexOf$1(value, val) > -1 : looseEqual(value, val);\n        /* eslint-enable eqeqeq */\n      }\n    },\n\n    unbind: function unbind() {\n      /* istanbul ignore next */\n      this.vm.$off('hook:attached', this.forceUpdate);\n    }\n  };\n\n  /**\n   * Get select value\n   *\n   * @param {SelectElement} el\n   * @param {Boolean} multi\n   * @param {Boolean} init\n   * @return {Array|*}\n   */\n\n  function getValue(el, multi, init) {\n    var res = multi ? [] : null;\n    var op, val, selected;\n    for (var i = 0, l = el.options.length; i < l; i++) {\n      op = el.options[i];\n      selected = init ? op.hasAttribute('selected') : op.selected;\n      if (selected) {\n        val = op.hasOwnProperty('_value') ? op._value : op.value;\n        if (multi) {\n          res.push(val);\n        } else {\n          return val;\n        }\n      }\n    }\n    return res;\n  }\n\n  /**\n   * Native Array.indexOf uses strict equal, but in this\n   * case we need to match string/numbers with custom equal.\n   *\n   * @param {Array} arr\n   * @param {*} val\n   */\n\n  function indexOf$1(arr, val) {\n    var i = arr.length;\n    while (i--) {\n      if (looseEqual(arr[i], val)) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  var radio = {\n\n    bind: function bind() {\n      var self = this;\n      var el = this.el;\n\n      this.getValue = function () {\n        // value overwrite via v-bind:value\n        if (el.hasOwnProperty('_value')) {\n          return el._value;\n        }\n        var val = el.value;\n        if (self.params.number) {\n          val = toNumber(val);\n        }\n        return val;\n      };\n\n      this.listener = function () {\n        self.set(self.getValue());\n      };\n      this.on('change', this.listener);\n\n      if (el.checked) {\n        this.afterBind = this.listener;\n      }\n    },\n\n    update: function update(value) {\n      this.el.checked = looseEqual(value, this.getValue());\n    }\n  };\n\n  var text$2 = {\n\n    bind: function bind() {\n      var self = this;\n      var el = this.el;\n      var isRange = el.type === 'range';\n      var lazy = this.params.lazy;\n      var number = this.params.number;\n      var debounce = this.params.debounce;\n\n      // handle composition events.\n      //   http://blog.evanyou.me/2014/01/03/composition-event/\n      // skip this for Android because it handles composition\n      // events quite differently. Android doesn't trigger\n      // composition events for language input methods e.g.\n      // Chinese, but instead triggers them for spelling\n      // suggestions... (see Discussion/#162)\n      var composing = false;\n      if (!isAndroid && !isRange) {\n        this.on('compositionstart', function () {\n          composing = true;\n        });\n        this.on('compositionend', function () {\n          composing = false;\n          // in IE11 the \"compositionend\" event fires AFTER\n          // the \"input\" event, so the input handler is blocked\n          // at the end... have to call it here.\n          //\n          // #1327: in lazy mode this is unecessary.\n          if (!lazy) {\n            self.listener();\n          }\n        });\n      }\n\n      // prevent messing with the input when user is typing,\n      // and force update on blur.\n      this.focused = false;\n      if (!isRange) {\n        this.on('focus', function () {\n          self.focused = true;\n        });\n        this.on('blur', function () {\n          self.focused = false;\n          self.listener();\n        });\n      }\n\n      // Now attach the main listener\n      this.listener = function () {\n        if (composing) return;\n        var val = number || isRange ? toNumber(el.value) : el.value;\n        self.set(val);\n        // force update on next tick to avoid lock & same value\n        // also only update when user is not typing\n        nextTick(function () {\n          if (self._bound && !self.focused) {\n            self.update(self._watcher.value);\n          }\n        });\n      };\n\n      // apply debounce\n      if (debounce) {\n        this.listener = _debounce(this.listener, debounce);\n      }\n\n      // Support jQuery events, since jQuery.trigger() doesn't\n      // trigger native events in some cases and some plugins\n      // rely on $.trigger()\n      //\n      // We want to make sure if a listener is attached using\n      // jQuery, it is also removed with jQuery, that's why\n      // we do the check for each directive instance and\n      // store that check result on itself. This also allows\n      // easier test coverage control by unsetting the global\n      // jQuery variable in tests.\n      this.hasjQuery = typeof jQuery === 'function';\n      if (this.hasjQuery) {\n        jQuery(el).on('change', this.listener);\n        if (!lazy) {\n          jQuery(el).on('input', this.listener);\n        }\n      } else {\n        this.on('change', this.listener);\n        if (!lazy) {\n          this.on('input', this.listener);\n        }\n      }\n\n      // IE9 doesn't fire input event on backspace/del/cut\n      if (!lazy && isIE9) {\n        this.on('cut', function () {\n          nextTick(self.listener);\n        });\n        this.on('keyup', function (e) {\n          if (e.keyCode === 46 || e.keyCode === 8) {\n            self.listener();\n          }\n        });\n      }\n\n      // set initial value if present\n      if (el.hasAttribute('value') || el.tagName === 'TEXTAREA' && el.value.trim()) {\n        this.afterBind = this.listener;\n      }\n    },\n\n    update: function update(value) {\n      this.el.value = _toString(value);\n    },\n\n    unbind: function unbind() {\n      var el = this.el;\n      if (this.hasjQuery) {\n        jQuery(el).off('change', this.listener);\n        jQuery(el).off('input', this.listener);\n      }\n    }\n  };\n\n  var handlers = {\n    text: text$2,\n    radio: radio,\n    select: select,\n    checkbox: checkbox\n  };\n\n  var model = {\n\n    priority: 800,\n    twoWay: true,\n    handlers: handlers,\n    params: ['lazy', 'number', 'debounce'],\n\n    /**\n     * Possible elements:\n     *   <select>\n     *   <textarea>\n     *   <input type=\"*\">\n     *     - text\n     *     - checkbox\n     *     - radio\n     *     - number\n     */\n\n    bind: function bind() {\n      // friendly warning...\n      this.checkFilters();\n      if (this.hasRead && !this.hasWrite) {\n        'development' !== 'production' && warn('It seems you are using a read-only filter with ' + 'v-model. You might want to use a two-way filter ' + 'to ensure correct behavior.');\n      }\n      var el = this.el;\n      var tag = el.tagName;\n      var handler;\n      if (tag === 'INPUT') {\n        handler = handlers[el.type] || handlers.text;\n      } else if (tag === 'SELECT') {\n        handler = handlers.select;\n      } else if (tag === 'TEXTAREA') {\n        handler = handlers.text;\n      } else {\n        'development' !== 'production' && warn('v-model does not support element type: ' + tag);\n        return;\n      }\n      el.__v_model = this;\n      handler.bind.call(this);\n      this.update = handler.update;\n      this._unbind = handler.unbind;\n    },\n\n    /**\n     * Check read/write filter stats.\n     */\n\n    checkFilters: function checkFilters() {\n      var filters = this.filters;\n      if (!filters) return;\n      var i = filters.length;\n      while (i--) {\n        var filter = resolveAsset(this.vm.$options, 'filters', filters[i].name);\n        if (typeof filter === 'function' || filter.read) {\n          this.hasRead = true;\n        }\n        if (filter.write) {\n          this.hasWrite = true;\n        }\n      }\n    },\n\n    unbind: function unbind() {\n      this.el.__v_model = null;\n      this._unbind && this._unbind();\n    }\n  };\n\n  var show = {\n\n    bind: function bind() {\n      // check else block\n      var next = this.el.nextElementSibling;\n      if (next && getAttr(next, 'v-else') !== null) {\n        this.elseEl = next;\n      }\n    },\n\n    update: function update(value) {\n      this.apply(this.el, value);\n      if (this.elseEl) {\n        this.apply(this.elseEl, !value);\n      }\n    },\n\n    apply: function apply(el, value) {\n      applyTransition(el, value ? 1 : -1, function () {\n        el.style.display = value ? '' : 'none';\n      }, this.vm);\n    }\n  };\n\n  var templateCache = new Cache(1000);\n  var idSelectorCache = new Cache(1000);\n\n  var map = {\n    efault: [0, '', ''],\n    legend: [1, '<fieldset>', '</fieldset>'],\n    tr: [2, '<table><tbody>', '</tbody></table>'],\n    col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>']\n  };\n\n  map.td = map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];\n\n  map.option = map.optgroup = [1, '<select multiple=\"multiple\">', '</select>'];\n\n  map.thead = map.tbody = map.colgroup = map.caption = map.tfoot = [1, '<table>', '</table>'];\n\n  map.g = map.defs = map.symbol = map.use = map.image = map.text = map.circle = map.ellipse = map.line = map.path = map.polygon = map.polyline = map.rect = [1, '<svg ' + 'xmlns=\"http://www.w3.org/2000/svg\" ' + 'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ' + 'xmlns:ev=\"http://www.w3.org/2001/xml-events\"' + 'version=\"1.1\">', '</svg>'];\n\n  /**\n   * Check if a node is a supported template node with a\n   * DocumentFragment content.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  function isRealTemplate(node) {\n    return isTemplate(node) && node.content instanceof DocumentFragment;\n  }\n\n  var tagRE$1 = /<([\\w:]+)/;\n  var entityRE = /&\\w+;|&#\\d+;|&#x[\\dA-F]+;/;\n\n  /**\n   * Convert a string template to a DocumentFragment.\n   * Determines correct wrapping by tag types. Wrapping\n   * strategy found in jQuery & component/domify.\n   *\n   * @param {String} templateString\n   * @param {Boolean} raw\n   * @return {DocumentFragment}\n   */\n\n  function stringToFragment(templateString, raw) {\n    // try a cache hit first\n    var hit = templateCache.get(templateString);\n    if (hit) {\n      return hit;\n    }\n\n    var frag = document.createDocumentFragment();\n    var tagMatch = templateString.match(tagRE$1);\n    var entityMatch = entityRE.test(templateString);\n\n    if (!tagMatch && !entityMatch) {\n      // text only, return a single text node.\n      frag.appendChild(document.createTextNode(templateString));\n    } else {\n\n      var tag = tagMatch && tagMatch[1];\n      var wrap = map[tag] || map.efault;\n      var depth = wrap[0];\n      var prefix = wrap[1];\n      var suffix = wrap[2];\n      var node = document.createElement('div');\n\n      if (!raw) {\n        templateString = templateString.trim();\n      }\n      node.innerHTML = prefix + templateString + suffix;\n      while (depth--) {\n        node = node.lastChild;\n      }\n\n      var child;\n      /* eslint-disable no-cond-assign */\n      while (child = node.firstChild) {\n        /* eslint-enable no-cond-assign */\n        frag.appendChild(child);\n      }\n    }\n\n    templateCache.put(templateString, frag);\n    return frag;\n  }\n\n  /**\n   * Convert a template node to a DocumentFragment.\n   *\n   * @param {Node} node\n   * @return {DocumentFragment}\n   */\n\n  function nodeToFragment(node) {\n    // if its a template tag and the browser supports it,\n    // its content is already a document fragment.\n    if (isRealTemplate(node)) {\n      trimNode(node.content);\n      return node.content;\n    }\n    // script template\n    if (node.tagName === 'SCRIPT') {\n      return stringToFragment(node.textContent);\n    }\n    // normal node, clone it to avoid mutating the original\n    var clonedNode = cloneNode(node);\n    var frag = document.createDocumentFragment();\n    var child;\n    /* eslint-disable no-cond-assign */\n    while (child = clonedNode.firstChild) {\n      /* eslint-enable no-cond-assign */\n      frag.appendChild(child);\n    }\n    trimNode(frag);\n    return frag;\n  }\n\n  // Test for the presence of the Safari template cloning bug\n  // https://bugs.webkit.org/showug.cgi?id=137755\n  var hasBrokenTemplate = (function () {\n    /* istanbul ignore else */\n    if (inBrowser) {\n      var a = document.createElement('div');\n      a.innerHTML = '<template>1</template>';\n      return !a.cloneNode(true).firstChild.innerHTML;\n    } else {\n      return false;\n    }\n  })();\n\n  // Test for IE10/11 textarea placeholder clone bug\n  var hasTextareaCloneBug = (function () {\n    /* istanbul ignore else */\n    if (inBrowser) {\n      var t = document.createElement('textarea');\n      t.placeholder = 't';\n      return t.cloneNode(true).value === 't';\n    } else {\n      return false;\n    }\n  })();\n\n  /**\n   * 1. Deal with Safari cloning nested <template> bug by\n   *    manually cloning all template instances.\n   * 2. Deal with IE10/11 textarea placeholder bug by setting\n   *    the correct value after cloning.\n   *\n   * @param {Element|DocumentFragment} node\n   * @return {Element|DocumentFragment}\n   */\n\n  function cloneNode(node) {\n    if (!node.querySelectorAll) {\n      return node.cloneNode();\n    }\n    var res = node.cloneNode(true);\n    var i, original, cloned;\n    /* istanbul ignore if */\n    if (hasBrokenTemplate) {\n      var tempClone = res;\n      if (isRealTemplate(node)) {\n        node = node.content;\n        tempClone = res.content;\n      }\n      original = node.querySelectorAll('template');\n      if (original.length) {\n        cloned = tempClone.querySelectorAll('template');\n        i = cloned.length;\n        while (i--) {\n          cloned[i].parentNode.replaceChild(cloneNode(original[i]), cloned[i]);\n        }\n      }\n    }\n    /* istanbul ignore if */\n    if (hasTextareaCloneBug) {\n      if (node.tagName === 'TEXTAREA') {\n        res.value = node.value;\n      } else {\n        original = node.querySelectorAll('textarea');\n        if (original.length) {\n          cloned = res.querySelectorAll('textarea');\n          i = cloned.length;\n          while (i--) {\n            cloned[i].value = original[i].value;\n          }\n        }\n      }\n    }\n    return res;\n  }\n\n  /**\n   * Process the template option and normalizes it into a\n   * a DocumentFragment that can be used as a partial or a\n   * instance template.\n   *\n   * @param {*} template\n   *        Possible values include:\n   *        - DocumentFragment object\n   *        - Node object of type Template\n   *        - id selector: '#some-template-id'\n   *        - template string: '<div><span>{{msg}}</span></div>'\n   * @param {Boolean} shouldClone\n   * @param {Boolean} raw\n   *        inline HTML interpolation. Do not check for id\n   *        selector and keep whitespace in the string.\n   * @return {DocumentFragment|undefined}\n   */\n\n  function parseTemplate(template, shouldClone, raw) {\n    var node, frag;\n\n    // if the template is already a document fragment,\n    // do nothing\n    if (template instanceof DocumentFragment) {\n      trimNode(template);\n      return shouldClone ? cloneNode(template) : template;\n    }\n\n    if (typeof template === 'string') {\n      // id selector\n      if (!raw && template.charAt(0) === '#') {\n        // id selector can be cached too\n        frag = idSelectorCache.get(template);\n        if (!frag) {\n          node = document.getElementById(template.slice(1));\n          if (node) {\n            frag = nodeToFragment(node);\n            // save selector to cache\n            idSelectorCache.put(template, frag);\n          }\n        }\n      } else {\n        // normal string template\n        frag = stringToFragment(template, raw);\n      }\n    } else if (template.nodeType) {\n      // a direct node\n      frag = nodeToFragment(template);\n    }\n\n    return frag && shouldClone ? cloneNode(frag) : frag;\n  }\n\n  var template = Object.freeze({\n    cloneNode: cloneNode,\n    parseTemplate: parseTemplate\n  });\n\n  /**\n   * Abstraction for a partially-compiled fragment.\n   * Can optionally compile content with a child scope.\n   *\n   * @param {Function} linker\n   * @param {Vue} vm\n   * @param {DocumentFragment} frag\n   * @param {Vue} [host]\n   * @param {Object} [scope]\n   */\n  function Fragment(linker, vm, frag, host, scope, parentFrag) {\n    this.children = [];\n    this.childFrags = [];\n    this.vm = vm;\n    this.scope = scope;\n    this.inserted = false;\n    this.parentFrag = parentFrag;\n    if (parentFrag) {\n      parentFrag.childFrags.push(this);\n    }\n    this.unlink = linker(vm, frag, host, scope, this);\n    var single = this.single = frag.childNodes.length === 1 &&\n    // do not go single mode if the only node is an anchor\n    !frag.childNodes[0].__vue_anchor;\n    if (single) {\n      this.node = frag.childNodes[0];\n      this.before = singleBefore;\n      this.remove = singleRemove;\n    } else {\n      this.node = createAnchor('fragment-start');\n      this.end = createAnchor('fragment-end');\n      this.frag = frag;\n      prepend(this.node, frag);\n      frag.appendChild(this.end);\n      this.before = multiBefore;\n      this.remove = multiRemove;\n    }\n    this.node.__vfrag__ = this;\n  }\n\n  /**\n   * Call attach/detach for all components contained within\n   * this fragment. Also do so recursively for all child\n   * fragments.\n   *\n   * @param {Function} hook\n   */\n\n  Fragment.prototype.callHook = function (hook) {\n    var i, l;\n    for (i = 0, l = this.children.length; i < l; i++) {\n      hook(this.children[i]);\n    }\n    for (i = 0, l = this.childFrags.length; i < l; i++) {\n      this.childFrags[i].callHook(hook);\n    }\n  };\n\n  /**\n   * Destroy the fragment.\n   */\n\n  Fragment.prototype.destroy = function () {\n    if (this.parentFrag) {\n      this.parentFrag.childFrags.$remove(this);\n    }\n    this.unlink();\n  };\n\n  /**\n   * Insert fragment before target, single node version\n   *\n   * @param {Node} target\n   * @param {Boolean} withTransition\n   */\n\n  function singleBefore(target, withTransition) {\n    this.inserted = true;\n    var method = withTransition !== false ? beforeWithTransition : before;\n    method(this.node, target, this.vm);\n    if (inDoc(this.node)) {\n      this.callHook(attach);\n    }\n  }\n\n  /**\n   * Remove fragment, single node version\n   */\n\n  function singleRemove() {\n    this.inserted = false;\n    var shouldCallRemove = inDoc(this.node);\n    var self = this;\n    self.callHook(destroyChild);\n    removeWithTransition(this.node, this.vm, function () {\n      if (shouldCallRemove) {\n        self.callHook(detach);\n      }\n      self.destroy();\n    });\n  }\n\n  /**\n   * Insert fragment before target, multi-nodes version\n   *\n   * @param {Node} target\n   * @param {Boolean} withTransition\n   */\n\n  function multiBefore(target, withTransition) {\n    this.inserted = true;\n    var vm = this.vm;\n    var method = withTransition !== false ? beforeWithTransition : before;\n    mapNodeRange(this.node, this.end, function (node) {\n      method(node, target, vm);\n    });\n    if (inDoc(this.node)) {\n      this.callHook(attach);\n    }\n  }\n\n  /**\n   * Remove fragment, multi-nodes version\n   */\n\n  function multiRemove() {\n    this.inserted = false;\n    var self = this;\n    var shouldCallRemove = inDoc(this.node);\n    self.callHook(destroyChild);\n    removeNodeRange(this.node, this.end, this.vm, this.frag, function () {\n      if (shouldCallRemove) {\n        self.callHook(detach);\n      }\n      self.destroy();\n    });\n  }\n\n  /**\n   * Call attach hook for a Vue instance.\n   *\n   * @param {Vue} child\n   */\n\n  function attach(child) {\n    if (!child._isAttached) {\n      child._callHook('attached');\n    }\n  }\n\n  /**\n   * Call destroy for all contained instances,\n   * with remove:false and defer:true.\n   * Defer is necessary because we need to\n   * keep the children to call detach hooks\n   * on them.\n   *\n   * @param {Vue} child\n   */\n\n  function destroyChild(child) {\n    child.$destroy(false, true);\n  }\n\n  /**\n   * Call detach hook for a Vue instance.\n   *\n   * @param {Vue} child\n   */\n\n  function detach(child) {\n    if (child._isAttached) {\n      child._callHook('detached');\n    }\n  }\n\n  var linkerCache = new Cache(5000);\n\n  /**\n   * A factory that can be used to create instances of a\n   * fragment. Caches the compiled linker if possible.\n   *\n   * @param {Vue} vm\n   * @param {Element|String} el\n   */\n  function FragmentFactory(vm, el) {\n    this.vm = vm;\n    var template;\n    var isString = typeof el === 'string';\n    if (isString || isTemplate(el)) {\n      template = parseTemplate(el, true);\n    } else {\n      template = document.createDocumentFragment();\n      template.appendChild(el);\n    }\n    this.template = template;\n    // linker can be cached, but only for components\n    var linker;\n    var cid = vm.constructor.cid;\n    if (cid > 0) {\n      var cacheId = cid + (isString ? el : el.outerHTML);\n      linker = linkerCache.get(cacheId);\n      if (!linker) {\n        linker = compile(template, vm.$options, true);\n        linkerCache.put(cacheId, linker);\n      }\n    } else {\n      linker = compile(template, vm.$options, true);\n    }\n    this.linker = linker;\n  }\n\n  /**\n   * Create a fragment instance with given host and scope.\n   *\n   * @param {Vue} host\n   * @param {Object} scope\n   * @param {Fragment} parentFrag\n   */\n\n  FragmentFactory.prototype.create = function (host, scope, parentFrag) {\n    var frag = cloneNode(this.template);\n    return new Fragment(this.linker, this.vm, frag, host, scope, parentFrag);\n  };\n\n  var vIf = {\n\n    priority: 2000,\n\n    bind: function bind() {\n      var el = this.el;\n      if (!el.__vue__) {\n        // check else block\n        var next = el.nextElementSibling;\n        if (next && getAttr(next, 'v-else') !== null) {\n          remove(next);\n          this.elseFactory = new FragmentFactory(this.vm, next);\n        }\n        // check main block\n        this.anchor = createAnchor('v-if');\n        replace(el, this.anchor);\n        this.factory = new FragmentFactory(this.vm, el);\n      } else {\n        'development' !== 'production' && warn('v-if=\"' + this.expression + '\" cannot be ' + 'used on an instance root element.');\n        this.invalid = true;\n      }\n    },\n\n    update: function update(value) {\n      if (this.invalid) return;\n      if (value) {\n        if (!this.frag) {\n          this.insert();\n        }\n      } else {\n        this.remove();\n      }\n    },\n\n    insert: function insert() {\n      if (this.elseFrag) {\n        this.elseFrag.remove();\n        this.elseFrag = null;\n      }\n      this.frag = this.factory.create(this._host, this._scope, this._frag);\n      this.frag.before(this.anchor);\n    },\n\n    remove: function remove() {\n      if (this.frag) {\n        this.frag.remove();\n        this.frag = null;\n      }\n      if (this.elseFactory && !this.elseFrag) {\n        this.elseFrag = this.elseFactory.create(this._host, this._scope, this._frag);\n        this.elseFrag.before(this.anchor);\n      }\n    },\n\n    unbind: function unbind() {\n      if (this.frag) {\n        this.frag.destroy();\n      }\n    }\n  };\n\n  var uid$1 = 0;\n\n  var vFor = {\n\n    priority: 2000,\n\n    params: ['track-by', 'stagger', 'enter-stagger', 'leave-stagger'],\n\n    bind: function bind() {\n      // support \"item in items\" syntax\n      var inMatch = this.expression.match(/(.*) in (.*)/);\n      if (inMatch) {\n        var itMatch = inMatch[1].match(/\\((.*),(.*)\\)/);\n        if (itMatch) {\n          this.iterator = itMatch[1].trim();\n          this.alias = itMatch[2].trim();\n        } else {\n          this.alias = inMatch[1].trim();\n        }\n        this.expression = inMatch[2];\n      }\n\n      if (!this.alias) {\n        'development' !== 'production' && warn('Alias is required in v-for.');\n        return;\n      }\n\n      // uid as a cache identifier\n      this.id = '__v-for__' + ++uid$1;\n\n      // check if this is an option list,\n      // so that we know if we need to update the <select>'s\n      // v-model when the option list has changed.\n      // because v-model has a lower priority than v-for,\n      // the v-model is not bound here yet, so we have to\n      // retrive it in the actual updateModel() function.\n      var tag = this.el.tagName;\n      this.isOption = (tag === 'OPTION' || tag === 'OPTGROUP') && this.el.parentNode.tagName === 'SELECT';\n\n      // setup anchor nodes\n      this.start = createAnchor('v-for-start');\n      this.end = createAnchor('v-for-end');\n      replace(this.el, this.end);\n      before(this.start, this.end);\n\n      // cache\n      this.cache = Object.create(null);\n\n      // fragment factory\n      this.factory = new FragmentFactory(this.vm, this.el);\n    },\n\n    update: function update(data) {\n      this.diff(data);\n      this.updateRef();\n      this.updateModel();\n    },\n\n    /**\n     * Diff, based on new data and old data, determine the\n     * minimum amount of DOM manipulations needed to make the\n     * DOM reflect the new data Array.\n     *\n     * The algorithm diffs the new data Array by storing a\n     * hidden reference to an owner vm instance on previously\n     * seen data. This allows us to achieve O(n) which is\n     * better than a levenshtein distance based algorithm,\n     * which is O(m * n).\n     *\n     * @param {Array} data\n     */\n\n    diff: function diff(data) {\n      // check if the Array was converted from an Object\n      var item = data[0];\n      var convertedFromObject = this.fromObject = isObject(item) && hasOwn(item, '$key') && hasOwn(item, '$value');\n\n      var trackByKey = this.params.trackBy;\n      var oldFrags = this.frags;\n      var frags = this.frags = new Array(data.length);\n      var alias = this.alias;\n      var iterator = this.iterator;\n      var start = this.start;\n      var end = this.end;\n      var inDocument = inDoc(start);\n      var init = !oldFrags;\n      var i, l, frag, key, value, primitive;\n\n      // First pass, go through the new Array and fill up\n      // the new frags array. If a piece of data has a cached\n      // instance for it, we reuse it. Otherwise build a new\n      // instance.\n      for (i = 0, l = data.length; i < l; i++) {\n        item = data[i];\n        key = convertedFromObject ? item.$key : null;\n        value = convertedFromObject ? item.$value : item;\n        primitive = !isObject(value);\n        frag = !init && this.getCachedFrag(value, i, key);\n        if (frag) {\n          // reusable fragment\n          frag.reused = true;\n          // update $index\n          frag.scope.$index = i;\n          // update $key\n          if (key) {\n            frag.scope.$key = key;\n          }\n          // update iterator\n          if (iterator) {\n            frag.scope[iterator] = key !== null ? key : i;\n          }\n          // update data for track-by, object repeat &\n          // primitive values.\n          if (trackByKey || convertedFromObject || primitive) {\n            frag.scope[alias] = value;\n          }\n        } else {\n          // new isntance\n          frag = this.create(value, alias, i, key);\n          frag.fresh = !init;\n        }\n        frags[i] = frag;\n        if (init) {\n          frag.before(end);\n        }\n      }\n\n      // we're done for the initial render.\n      if (init) {\n        return;\n      }\n\n      // Second pass, go through the old fragments and\n      // destroy those who are not reused (and remove them\n      // from cache)\n      var removalIndex = 0;\n      var totalRemoved = oldFrags.length - frags.length;\n      for (i = 0, l = oldFrags.length; i < l; i++) {\n        frag = oldFrags[i];\n        if (!frag.reused) {\n          this.deleteCachedFrag(frag);\n          this.remove(frag, removalIndex++, totalRemoved, inDocument);\n        }\n      }\n\n      // Final pass, move/insert new fragments into the\n      // right place.\n      var targetPrev, prevEl, currentPrev;\n      var insertionIndex = 0;\n      for (i = 0, l = frags.length; i < l; i++) {\n        frag = frags[i];\n        // this is the frag that we should be after\n        targetPrev = frags[i - 1];\n        prevEl = targetPrev ? targetPrev.staggerCb ? targetPrev.staggerAnchor : targetPrev.end || targetPrev.node : start;\n        if (frag.reused && !frag.staggerCb) {\n          currentPrev = findPrevFrag(frag, start, this.id);\n          if (currentPrev !== targetPrev && (!currentPrev ||\n          // optimization for moving a single item.\n          // thanks to suggestions by @livoras in #1807\n          findPrevFrag(currentPrev, start, this.id) !== targetPrev)) {\n            this.move(frag, prevEl);\n          }\n        } else {\n          // new instance, or still in stagger.\n          // insert with updated stagger index.\n          this.insert(frag, insertionIndex++, prevEl, inDocument);\n        }\n        frag.reused = frag.fresh = false;\n      }\n    },\n\n    /**\n     * Create a new fragment instance.\n     *\n     * @param {*} value\n     * @param {String} alias\n     * @param {Number} index\n     * @param {String} [key]\n     * @return {Fragment}\n     */\n\n    create: function create(value, alias, index, key) {\n      var host = this._host;\n      // create iteration scope\n      var parentScope = this._scope || this.vm;\n      var scope = Object.create(parentScope);\n      // ref holder for the scope\n      scope.$refs = Object.create(parentScope.$refs);\n      scope.$els = Object.create(parentScope.$els);\n      // make sure point $parent to parent scope\n      scope.$parent = parentScope;\n      // for two-way binding on alias\n      scope.$forContext = this;\n      // define scope properties\n      defineReactive(scope, alias, value);\n      defineReactive(scope, '$index', index);\n      if (key) {\n        defineReactive(scope, '$key', key);\n      } else if (scope.$key) {\n        // avoid accidental fallback\n        def(scope, '$key', null);\n      }\n      if (this.iterator) {\n        defineReactive(scope, this.iterator, key !== null ? key : index);\n      }\n      var frag = this.factory.create(host, scope, this._frag);\n      frag.forId = this.id;\n      this.cacheFrag(value, frag, index, key);\n      return frag;\n    },\n\n    /**\n     * Update the v-ref on owner vm.\n     */\n\n    updateRef: function updateRef() {\n      var ref = this.descriptor.ref;\n      if (!ref) return;\n      var hash = (this._scope || this.vm).$refs;\n      var refs;\n      if (!this.fromObject) {\n        refs = this.frags.map(findVmFromFrag);\n      } else {\n        refs = {};\n        this.frags.forEach(function (frag) {\n          refs[frag.scope.$key] = findVmFromFrag(frag);\n        });\n      }\n      hash[ref] = refs;\n    },\n\n    /**\n     * For option lists, update the containing v-model on\n     * parent <select>.\n     */\n\n    updateModel: function updateModel() {\n      if (this.isOption) {\n        var parent = this.start.parentNode;\n        var model = parent && parent.__v_model;\n        if (model) {\n          model.forceUpdate();\n        }\n      }\n    },\n\n    /**\n     * Insert a fragment. Handles staggering.\n     *\n     * @param {Fragment} frag\n     * @param {Number} index\n     * @param {Node} prevEl\n     * @param {Boolean} inDocument\n     */\n\n    insert: function insert(frag, index, prevEl, inDocument) {\n      if (frag.staggerCb) {\n        frag.staggerCb.cancel();\n        frag.staggerCb = null;\n      }\n      var staggerAmount = this.getStagger(frag, index, null, 'enter');\n      if (inDocument && staggerAmount) {\n        // create an anchor and insert it synchronously,\n        // so that we can resolve the correct order without\n        // worrying about some elements not inserted yet\n        var anchor = frag.staggerAnchor;\n        if (!anchor) {\n          anchor = frag.staggerAnchor = createAnchor('stagger-anchor');\n          anchor.__vfrag__ = frag;\n        }\n        after(anchor, prevEl);\n        var op = frag.staggerCb = cancellable(function () {\n          frag.staggerCb = null;\n          frag.before(anchor);\n          remove(anchor);\n        });\n        setTimeout(op, staggerAmount);\n      } else {\n        frag.before(prevEl.nextSibling);\n      }\n    },\n\n    /**\n     * Remove a fragment. Handles staggering.\n     *\n     * @param {Fragment} frag\n     * @param {Number} index\n     * @param {Number} total\n     * @param {Boolean} inDocument\n     */\n\n    remove: function remove(frag, index, total, inDocument) {\n      if (frag.staggerCb) {\n        frag.staggerCb.cancel();\n        frag.staggerCb = null;\n        // it's not possible for the same frag to be removed\n        // twice, so if we have a pending stagger callback,\n        // it means this frag is queued for enter but removed\n        // before its transition started. Since it is already\n        // destroyed, we can just leave it in detached state.\n        return;\n      }\n      var staggerAmount = this.getStagger(frag, index, total, 'leave');\n      if (inDocument && staggerAmount) {\n        var op = frag.staggerCb = cancellable(function () {\n          frag.staggerCb = null;\n          frag.remove();\n        });\n        setTimeout(op, staggerAmount);\n      } else {\n        frag.remove();\n      }\n    },\n\n    /**\n     * Move a fragment to a new position.\n     * Force no transition.\n     *\n     * @param {Fragment} frag\n     * @param {Node} prevEl\n     */\n\n    move: function move(frag, prevEl) {\n      frag.before(prevEl.nextSibling, false);\n    },\n\n    /**\n     * Cache a fragment using track-by or the object key.\n     *\n     * @param {*} value\n     * @param {Fragment} frag\n     * @param {Number} index\n     * @param {String} [key]\n     */\n\n    cacheFrag: function cacheFrag(value, frag, index, key) {\n      var trackByKey = this.params.trackBy;\n      var cache = this.cache;\n      var primitive = !isObject(value);\n      var id;\n      if (key || trackByKey || primitive) {\n        id = trackByKey ? trackByKey === '$index' ? index : value[trackByKey] : key || value;\n        if (!cache[id]) {\n          cache[id] = frag;\n        } else if (trackByKey !== '$index') {\n          'development' !== 'production' && this.warnDuplicate(value);\n        }\n      } else {\n        id = this.id;\n        if (hasOwn(value, id)) {\n          if (value[id] === null) {\n            value[id] = frag;\n          } else {\n            'development' !== 'production' && this.warnDuplicate(value);\n          }\n        } else {\n          def(value, id, frag);\n        }\n      }\n      frag.raw = value;\n    },\n\n    /**\n     * Get a cached fragment from the value/index/key\n     *\n     * @param {*} value\n     * @param {Number} index\n     * @param {String} key\n     * @return {Fragment}\n     */\n\n    getCachedFrag: function getCachedFrag(value, index, key) {\n      var trackByKey = this.params.trackBy;\n      var primitive = !isObject(value);\n      var frag;\n      if (key || trackByKey || primitive) {\n        var id = trackByKey ? trackByKey === '$index' ? index : value[trackByKey] : key || value;\n        frag = this.cache[id];\n      } else {\n        frag = value[this.id];\n      }\n      if (frag && (frag.reused || frag.fresh)) {\n        'development' !== 'production' && this.warnDuplicate(value);\n      }\n      return frag;\n    },\n\n    /**\n     * Delete a fragment from cache.\n     *\n     * @param {Fragment} frag\n     */\n\n    deleteCachedFrag: function deleteCachedFrag(frag) {\n      var value = frag.raw;\n      var trackByKey = this.params.trackBy;\n      var scope = frag.scope;\n      var index = scope.$index;\n      // fix #948: avoid accidentally fall through to\n      // a parent repeater which happens to have $key.\n      var key = hasOwn(scope, '$key') && scope.$key;\n      var primitive = !isObject(value);\n      if (trackByKey || key || primitive) {\n        var id = trackByKey ? trackByKey === '$index' ? index : value[trackByKey] : key || value;\n        this.cache[id] = null;\n      } else {\n        value[this.id] = null;\n        frag.raw = null;\n      }\n    },\n\n    /**\n     * Get the stagger amount for an insertion/removal.\n     *\n     * @param {Fragment} frag\n     * @param {Number} index\n     * @param {Number} total\n     * @param {String} type\n     */\n\n    getStagger: function getStagger(frag, index, total, type) {\n      type = type + 'Stagger';\n      var trans = frag.node.__v_trans;\n      var hooks = trans && trans.hooks;\n      var hook = hooks && (hooks[type] || hooks.stagger);\n      return hook ? hook.call(frag, index, total) : index * parseInt(this.params[type] || this.params.stagger, 10);\n    },\n\n    /**\n     * Pre-process the value before piping it through the\n     * filters. This is passed to and called by the watcher.\n     */\n\n    _preProcess: function _preProcess(value) {\n      // regardless of type, store the un-filtered raw value.\n      this.rawValue = value;\n      return value;\n    },\n\n    /**\n     * Post-process the value after it has been piped through\n     * the filters. This is passed to and called by the watcher.\n     *\n     * It is necessary for this to be called during the\n     * wathcer's dependency collection phase because we want\n     * the v-for to update when the source Object is mutated.\n     */\n\n    _postProcess: function _postProcess(value) {\n      if (isArray(value)) {\n        return value;\n      } else if (isPlainObject(value)) {\n        // convert plain object to array.\n        var keys = Object.keys(value);\n        var i = keys.length;\n        var res = new Array(i);\n        var key;\n        while (i--) {\n          key = keys[i];\n          res[i] = {\n            $key: key,\n            $value: value[key]\n          };\n        }\n        return res;\n      } else {\n        if (typeof value === 'number') {\n          value = range(value);\n        }\n        return value || [];\n      }\n    },\n\n    unbind: function unbind() {\n      if (this.descriptor.ref) {\n        (this._scope || this.vm).$refs[this.descriptor.ref] = null;\n      }\n      if (this.frags) {\n        var i = this.frags.length;\n        var frag;\n        while (i--) {\n          frag = this.frags[i];\n          this.deleteCachedFrag(frag);\n          frag.destroy();\n        }\n      }\n    }\n  };\n\n  /**\n   * Helper to find the previous element that is a fragment\n   * anchor. This is necessary because a destroyed frag's\n   * element could still be lingering in the DOM before its\n   * leaving transition finishes, but its inserted flag\n   * should have been set to false so we can skip them.\n   *\n   * If this is a block repeat, we want to make sure we only\n   * return frag that is bound to this v-for. (see #929)\n   *\n   * @param {Fragment} frag\n   * @param {Comment|Text} anchor\n   * @param {String} id\n   * @return {Fragment}\n   */\n\n  function findPrevFrag(frag, anchor, id) {\n    var el = frag.node.previousSibling;\n    /* istanbul ignore if */\n    if (!el) return;\n    frag = el.__vfrag__;\n    while ((!frag || frag.forId !== id || !frag.inserted) && el !== anchor) {\n      el = el.previousSibling;\n      /* istanbul ignore if */\n      if (!el) return;\n      frag = el.__vfrag__;\n    }\n    return frag;\n  }\n\n  /**\n   * Find a vm from a fragment.\n   *\n   * @param {Fragment} frag\n   * @return {Vue|undefined}\n   */\n\n  function findVmFromFrag(frag) {\n    var node = frag.node;\n    // handle multi-node frag\n    if (frag.end) {\n      while (!node.__vue__ && node !== frag.end && node.nextSibling) {\n        node = node.nextSibling;\n      }\n    }\n    return node.__vue__;\n  }\n\n  /**\n   * Create a range array from given number.\n   *\n   * @param {Number} n\n   * @return {Array}\n   */\n\n  function range(n) {\n    var i = -1;\n    var ret = new Array(n);\n    while (++i < n) {\n      ret[i] = i;\n    }\n    return ret;\n  }\n\n  if ('development' !== 'production') {\n    vFor.warnDuplicate = function (value) {\n      warn('Duplicate value found in v-for=\"' + this.descriptor.raw + '\": ' + JSON.stringify(value) + '. Use track-by=\"$index\" if ' + 'you are expecting duplicate values.');\n    };\n  }\n\n  var html = {\n\n    bind: function bind() {\n      // a comment node means this is a binding for\n      // {{{ inline unescaped html }}}\n      if (this.el.nodeType === 8) {\n        // hold nodes\n        this.nodes = [];\n        // replace the placeholder with proper anchor\n        this.anchor = createAnchor('v-html');\n        replace(this.el, this.anchor);\n      }\n    },\n\n    update: function update(value) {\n      value = _toString(value);\n      if (this.nodes) {\n        this.swap(value);\n      } else {\n        this.el.innerHTML = value;\n      }\n    },\n\n    swap: function swap(value) {\n      // remove old nodes\n      var i = this.nodes.length;\n      while (i--) {\n        remove(this.nodes[i]);\n      }\n      // convert new value to a fragment\n      // do not attempt to retrieve from id selector\n      var frag = parseTemplate(value, true, true);\n      // save a reference to these nodes so we can remove later\n      this.nodes = toArray(frag.childNodes);\n      before(frag, this.anchor);\n    }\n  };\n\n  var text = {\n\n    bind: function bind() {\n      this.attr = this.el.nodeType === 3 ? 'data' : 'textContent';\n    },\n\n    update: function update(value) {\n      this.el[this.attr] = _toString(value);\n    }\n  };\n\n  // must export plain object\n  var publicDirectives = {\n    text: text,\n    html: html,\n    'for': vFor,\n    'if': vIf,\n    show: show,\n    model: model,\n    on: on,\n    bind: bind,\n    el: el,\n    ref: ref,\n    cloak: cloak\n  };\n\n  var queue$1 = [];\n  var queued = false;\n\n  /**\n   * Push a job into the queue.\n   *\n   * @param {Function} job\n   */\n\n  function pushJob(job) {\n    queue$1.push(job);\n    if (!queued) {\n      queued = true;\n      nextTick(flush);\n    }\n  }\n\n  /**\n   * Flush the queue, and do one forced reflow before\n   * triggering transitions.\n   */\n\n  function flush() {\n    // Force layout\n    var f = document.documentElement.offsetHeight;\n    for (var i = 0; i < queue$1.length; i++) {\n      queue$1[i]();\n    }\n    queue$1 = [];\n    queued = false;\n    // dummy return, so js linters don't complain about\n    // unused variable f\n    return f;\n  }\n\n  var TYPE_TRANSITION = 1;\n  var TYPE_ANIMATION = 2;\n  var transDurationProp = transitionProp + 'Duration';\n  var animDurationProp = animationProp + 'Duration';\n\n  /**\n   * A Transition object that encapsulates the state and logic\n   * of the transition.\n   *\n   * @param {Element} el\n   * @param {String} id\n   * @param {Object} hooks\n   * @param {Vue} vm\n   */\n  function Transition(el, id, hooks, vm) {\n    this.id = id;\n    this.el = el;\n    this.enterClass = id + '-enter';\n    this.leaveClass = id + '-leave';\n    this.hooks = hooks;\n    this.vm = vm;\n    // async state\n    this.pendingCssEvent = this.pendingCssCb = this.cancel = this.pendingJsCb = this.op = this.cb = null;\n    this.justEntered = false;\n    this.entered = this.left = false;\n    this.typeCache = {};\n    // bind\n    var self = this;['enterNextTick', 'enterDone', 'leaveNextTick', 'leaveDone'].forEach(function (m) {\n      self[m] = bind$1(self[m], self);\n    });\n  }\n\n  var p$1 = Transition.prototype;\n\n  /**\n   * Start an entering transition.\n   *\n   * 1. enter transition triggered\n   * 2. call beforeEnter hook\n   * 3. add enter class\n   * 4. insert/show element\n   * 5. call enter hook (with possible explicit js callback)\n   * 6. reflow\n   * 7. based on transition type:\n   *    - transition:\n   *        remove class now, wait for transitionend,\n   *        then done if there's no explicit js callback.\n   *    - animation:\n   *        wait for animationend, remove class,\n   *        then done if there's no explicit js callback.\n   *    - no css transition:\n   *        done now if there's no explicit js callback.\n   * 8. wait for either done or js callback, then call\n   *    afterEnter hook.\n   *\n   * @param {Function} op - insert/show the element\n   * @param {Function} [cb]\n   */\n\n  p$1.enter = function (op, cb) {\n    this.cancelPending();\n    this.callHook('beforeEnter');\n    this.cb = cb;\n    addClass(this.el, this.enterClass);\n    op();\n    this.entered = false;\n    this.callHookWithCb('enter');\n    if (this.entered) {\n      return; // user called done synchronously.\n    }\n    this.cancel = this.hooks && this.hooks.enterCancelled;\n    pushJob(this.enterNextTick);\n  };\n\n  /**\n   * The \"nextTick\" phase of an entering transition, which is\n   * to be pushed into a queue and executed after a reflow so\n   * that removing the class can trigger a CSS transition.\n   */\n\n  p$1.enterNextTick = function () {\n\n    // Important hack:\n    // in Chrome, if a just-entered element is applied the\n    // leave class while its interpolated property still has\n    // a very small value (within one frame), Chrome will\n    // skip the leave transition entirely and not firing the\n    // transtionend event. Therefore we need to protected\n    // against such cases using a one-frame timeout.\n    this.justEntered = true;\n    var self = this;\n    setTimeout(function () {\n      self.justEntered = false;\n    }, 17);\n\n    var enterDone = this.enterDone;\n    var type = this.getCssTransitionType(this.enterClass);\n    if (!this.pendingJsCb) {\n      if (type === TYPE_TRANSITION) {\n        // trigger transition by removing enter class now\n        removeClass(this.el, this.enterClass);\n        this.setupCssCb(transitionEndEvent, enterDone);\n      } else if (type === TYPE_ANIMATION) {\n        this.setupCssCb(animationEndEvent, enterDone);\n      } else {\n        enterDone();\n      }\n    } else if (type === TYPE_TRANSITION) {\n      removeClass(this.el, this.enterClass);\n    }\n  };\n\n  /**\n   * The \"cleanup\" phase of an entering transition.\n   */\n\n  p$1.enterDone = function () {\n    this.entered = true;\n    this.cancel = this.pendingJsCb = null;\n    removeClass(this.el, this.enterClass);\n    this.callHook('afterEnter');\n    if (this.cb) this.cb();\n  };\n\n  /**\n   * Start a leaving transition.\n   *\n   * 1. leave transition triggered.\n   * 2. call beforeLeave hook\n   * 3. add leave class (trigger css transition)\n   * 4. call leave hook (with possible explicit js callback)\n   * 5. reflow if no explicit js callback is provided\n   * 6. based on transition type:\n   *    - transition or animation:\n   *        wait for end event, remove class, then done if\n   *        there's no explicit js callback.\n   *    - no css transition:\n   *        done if there's no explicit js callback.\n   * 7. wait for either done or js callback, then call\n   *    afterLeave hook.\n   *\n   * @param {Function} op - remove/hide the element\n   * @param {Function} [cb]\n   */\n\n  p$1.leave = function (op, cb) {\n    this.cancelPending();\n    this.callHook('beforeLeave');\n    this.op = op;\n    this.cb = cb;\n    addClass(this.el, this.leaveClass);\n    this.left = false;\n    this.callHookWithCb('leave');\n    if (this.left) {\n      return; // user called done synchronously.\n    }\n    this.cancel = this.hooks && this.hooks.leaveCancelled;\n    // only need to handle leaveDone if\n    // 1. the transition is already done (synchronously called\n    //    by the user, which causes this.op set to null)\n    // 2. there's no explicit js callback\n    if (this.op && !this.pendingJsCb) {\n      // if a CSS transition leaves immediately after enter,\n      // the transitionend event never fires. therefore we\n      // detect such cases and end the leave immediately.\n      if (this.justEntered) {\n        this.leaveDone();\n      } else {\n        pushJob(this.leaveNextTick);\n      }\n    }\n  };\n\n  /**\n   * The \"nextTick\" phase of a leaving transition.\n   */\n\n  p$1.leaveNextTick = function () {\n    var type = this.getCssTransitionType(this.leaveClass);\n    if (type) {\n      var event = type === TYPE_TRANSITION ? transitionEndEvent : animationEndEvent;\n      this.setupCssCb(event, this.leaveDone);\n    } else {\n      this.leaveDone();\n    }\n  };\n\n  /**\n   * The \"cleanup\" phase of a leaving transition.\n   */\n\n  p$1.leaveDone = function () {\n    this.left = true;\n    this.cancel = this.pendingJsCb = null;\n    this.op();\n    removeClass(this.el, this.leaveClass);\n    this.callHook('afterLeave');\n    if (this.cb) this.cb();\n    this.op = null;\n  };\n\n  /**\n   * Cancel any pending callbacks from a previously running\n   * but not finished transition.\n   */\n\n  p$1.cancelPending = function () {\n    this.op = this.cb = null;\n    var hasPending = false;\n    if (this.pendingCssCb) {\n      hasPending = true;\n      off(this.el, this.pendingCssEvent, this.pendingCssCb);\n      this.pendingCssEvent = this.pendingCssCb = null;\n    }\n    if (this.pendingJsCb) {\n      hasPending = true;\n      this.pendingJsCb.cancel();\n      this.pendingJsCb = null;\n    }\n    if (hasPending) {\n      removeClass(this.el, this.enterClass);\n      removeClass(this.el, this.leaveClass);\n    }\n    if (this.cancel) {\n      this.cancel.call(this.vm, this.el);\n      this.cancel = null;\n    }\n  };\n\n  /**\n   * Call a user-provided synchronous hook function.\n   *\n   * @param {String} type\n   */\n\n  p$1.callHook = function (type) {\n    if (this.hooks && this.hooks[type]) {\n      this.hooks[type].call(this.vm, this.el);\n    }\n  };\n\n  /**\n   * Call a user-provided, potentially-async hook function.\n   * We check for the length of arguments to see if the hook\n   * expects a `done` callback. If true, the transition's end\n   * will be determined by when the user calls that callback;\n   * otherwise, the end is determined by the CSS transition or\n   * animation.\n   *\n   * @param {String} type\n   */\n\n  p$1.callHookWithCb = function (type) {\n    var hook = this.hooks && this.hooks[type];\n    if (hook) {\n      if (hook.length > 1) {\n        this.pendingJsCb = cancellable(this[type + 'Done']);\n      }\n      hook.call(this.vm, this.el, this.pendingJsCb);\n    }\n  };\n\n  /**\n   * Get an element's transition type based on the\n   * calculated styles.\n   *\n   * @param {String} className\n   * @return {Number}\n   */\n\n  p$1.getCssTransitionType = function (className) {\n    /* istanbul ignore if */\n    if (!transitionEndEvent ||\n    // skip CSS transitions if page is not visible -\n    // this solves the issue of transitionend events not\n    // firing until the page is visible again.\n    // pageVisibility API is supported in IE10+, same as\n    // CSS transitions.\n    document.hidden ||\n    // explicit js-only transition\n    this.hooks && this.hooks.css === false ||\n    // element is hidden\n    isHidden(this.el)) {\n      return;\n    }\n    var type = this.typeCache[className];\n    if (type) return type;\n    var inlineStyles = this.el.style;\n    var computedStyles = window.getComputedStyle(this.el);\n    var transDuration = inlineStyles[transDurationProp] || computedStyles[transDurationProp];\n    if (transDuration && transDuration !== '0s') {\n      type = TYPE_TRANSITION;\n    } else {\n      var animDuration = inlineStyles[animDurationProp] || computedStyles[animDurationProp];\n      if (animDuration && animDuration !== '0s') {\n        type = TYPE_ANIMATION;\n      }\n    }\n    if (type) {\n      this.typeCache[className] = type;\n    }\n    return type;\n  };\n\n  /**\n   * Setup a CSS transitionend/animationend callback.\n   *\n   * @param {String} event\n   * @param {Function} cb\n   */\n\n  p$1.setupCssCb = function (event, cb) {\n    this.pendingCssEvent = event;\n    var self = this;\n    var el = this.el;\n    var onEnd = this.pendingCssCb = function (e) {\n      if (e.target === el) {\n        off(el, event, onEnd);\n        self.pendingCssEvent = self.pendingCssCb = null;\n        if (!self.pendingJsCb && cb) {\n          cb();\n        }\n      }\n    };\n    on$1(el, event, onEnd);\n  };\n\n  /**\n   * Check if an element is hidden - in that case we can just\n   * skip the transition alltogether.\n   *\n   * @param {Element} el\n   * @return {Boolean}\n   */\n\n  function isHidden(el) {\n    return !(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n  }\n\n  var transition = {\n\n    priority: 1100,\n\n    update: function update(id, oldId) {\n      var el = this.el;\n      // resolve on owner vm\n      var hooks = resolveAsset(this.vm.$options, 'transitions', id);\n      id = id || 'v';\n      // apply on closest vm\n      el.__v_trans = new Transition(el, id, hooks, this.el.__vue__ || this.vm);\n      if (oldId) {\n        removeClass(el, oldId + '-transition');\n      }\n      addClass(el, id + '-transition');\n    }\n  };\n\n  var bindingModes = config._propBindingModes;\n\n  var propDef = {\n\n    bind: function bind() {\n\n      var child = this.vm;\n      var parent = child._context;\n      // passed in from compiler directly\n      var prop = this.descriptor.prop;\n      var childKey = prop.path;\n      var parentKey = prop.parentPath;\n      var twoWay = prop.mode === bindingModes.TWO_WAY;\n\n      var parentWatcher = this.parentWatcher = new Watcher(parent, parentKey, function (val) {\n        if (assertProp(prop, val)) {\n          child[childKey] = val;\n        }\n      }, {\n        twoWay: twoWay,\n        filters: prop.filters,\n        // important: props need to be observed on the\n        // v-for scope if present\n        scope: this._scope\n      });\n\n      // set the child initial value.\n      initProp(child, prop, parentWatcher.value);\n\n      // setup two-way binding\n      if (twoWay) {\n        // important: defer the child watcher creation until\n        // the created hook (after data observation)\n        var self = this;\n        child.$once('hook:created', function () {\n          self.childWatcher = new Watcher(child, childKey, function (val) {\n            parentWatcher.set(val);\n          }, {\n            // ensure sync upward before parent sync down.\n            // this is necessary in cases e.g. the child\n            // mutates a prop array, then replaces it. (#1683)\n            sync: true\n          });\n        });\n      }\n    },\n\n    unbind: function unbind() {\n      this.parentWatcher.teardown();\n      if (this.childWatcher) {\n        this.childWatcher.teardown();\n      }\n    }\n  };\n\n  var component = {\n\n    priority: 1500,\n\n    params: ['keep-alive', 'transition-mode', 'inline-template'],\n\n    /**\n     * Setup. Two possible usages:\n     *\n     * - static:\n     *   <comp> or <div v-component=\"comp\">\n     *\n     * - dynamic:\n     *   <component :is=\"view\">\n     */\n\n    bind: function bind() {\n      if (!this.el.__vue__) {\n        // keep-alive cache\n        this.keepAlive = this.params.keepAlive;\n        if (this.keepAlive) {\n          this.cache = {};\n        }\n        // check inline-template\n        if (this.params.inlineTemplate) {\n          // extract inline template as a DocumentFragment\n          this.inlineTemplate = extractContent(this.el, true);\n        }\n        // component resolution related state\n        this.pendingComponentCb = this.Component = null;\n        // transition related state\n        this.pendingRemovals = 0;\n        this.pendingRemovalCb = null;\n        // create a ref anchor\n        this.anchor = createAnchor('v-component');\n        replace(this.el, this.anchor);\n        // remove is attribute.\n        // this is removed during compilation, but because compilation is\n        // cached, when the component is used elsewhere this attribute\n        // will remain at link time.\n        this.el.removeAttribute('is');\n        // remove ref, same as above\n        if (this.descriptor.ref) {\n          this.el.removeAttribute('v-ref:' + hyphenate(this.descriptor.ref));\n        }\n        // if static, build right now.\n        if (this.literal) {\n          this.setComponent(this.expression);\n        }\n      } else {\n        'development' !== 'production' && warn('cannot mount component \"' + this.expression + '\" ' + 'on already mounted element: ' + this.el);\n      }\n    },\n\n    /**\n     * Public update, called by the watcher in the dynamic\n     * literal scenario, e.g. <component :is=\"view\">\n     */\n\n    update: function update(value) {\n      if (!this.literal) {\n        this.setComponent(value);\n      }\n    },\n\n    /**\n     * Switch dynamic components. May resolve the component\n     * asynchronously, and perform transition based on\n     * specified transition mode. Accepts a few additional\n     * arguments specifically for vue-router.\n     *\n     * The callback is called when the full transition is\n     * finished.\n     *\n     * @param {String} value\n     * @param {Function} [cb]\n     */\n\n    setComponent: function setComponent(value, cb) {\n      this.invalidatePending();\n      if (!value) {\n        // just remove current\n        this.unbuild(true);\n        this.remove(this.childVM, cb);\n        this.childVM = null;\n      } else {\n        var self = this;\n        this.resolveComponent(value, function () {\n          self.mountComponent(cb);\n        });\n      }\n    },\n\n    /**\n     * Resolve the component constructor to use when creating\n     * the child vm.\n     */\n\n    resolveComponent: function resolveComponent(id, cb) {\n      var self = this;\n      this.pendingComponentCb = cancellable(function (Component) {\n        self.ComponentName = Component.options.name || id;\n        self.Component = Component;\n        cb();\n      });\n      this.vm._resolveComponent(id, this.pendingComponentCb);\n    },\n\n    /**\n     * Create a new instance using the current constructor and\n     * replace the existing instance. This method doesn't care\n     * whether the new component and the old one are actually\n     * the same.\n     *\n     * @param {Function} [cb]\n     */\n\n    mountComponent: function mountComponent(cb) {\n      // actual mount\n      this.unbuild(true);\n      var self = this;\n      var activateHook = this.Component.options.activate;\n      var cached = this.getCached();\n      var newComponent = this.build();\n      if (activateHook && !cached) {\n        this.waitingFor = newComponent;\n        activateHook.call(newComponent, function () {\n          self.waitingFor = null;\n          self.transition(newComponent, cb);\n        });\n      } else {\n        // update ref for kept-alive component\n        if (cached) {\n          newComponent._updateRef();\n        }\n        this.transition(newComponent, cb);\n      }\n    },\n\n    /**\n     * When the component changes or unbinds before an async\n     * constructor is resolved, we need to invalidate its\n     * pending callback.\n     */\n\n    invalidatePending: function invalidatePending() {\n      if (this.pendingComponentCb) {\n        this.pendingComponentCb.cancel();\n        this.pendingComponentCb = null;\n      }\n    },\n\n    /**\n     * Instantiate/insert a new child vm.\n     * If keep alive and has cached instance, insert that\n     * instance; otherwise build a new one and cache it.\n     *\n     * @param {Object} [extraOptions]\n     * @return {Vue} - the created instance\n     */\n\n    build: function build(extraOptions) {\n      var cached = this.getCached();\n      if (cached) {\n        return cached;\n      }\n      if (this.Component) {\n        // default options\n        var options = {\n          name: this.ComponentName,\n          el: cloneNode(this.el),\n          template: this.inlineTemplate,\n          // make sure to add the child with correct parent\n          // if this is a transcluded component, its parent\n          // should be the transclusion host.\n          parent: this._host || this.vm,\n          // if no inline-template, then the compiled\n          // linker can be cached for better performance.\n          _linkerCachable: !this.inlineTemplate,\n          _ref: this.descriptor.ref,\n          _asComponent: true,\n          _isRouterView: this._isRouterView,\n          // if this is a transcluded component, context\n          // will be the common parent vm of this instance\n          // and its host.\n          _context: this.vm,\n          // if this is inside an inline v-for, the scope\n          // will be the intermediate scope created for this\n          // repeat fragment. this is used for linking props\n          // and container directives.\n          _scope: this._scope,\n          // pass in the owner fragment of this component.\n          // this is necessary so that the fragment can keep\n          // track of its contained components in order to\n          // call attach/detach hooks for them.\n          _frag: this._frag\n        };\n        // extra options\n        // in 1.0.0 this is used by vue-router only\n        /* istanbul ignore if */\n        if (extraOptions) {\n          extend(options, extraOptions);\n        }\n        var child = new this.Component(options);\n        if (this.keepAlive) {\n          this.cache[this.Component.cid] = child;\n        }\n        /* istanbul ignore if */\n        if ('development' !== 'production' && this.el.hasAttribute('transition') && child._isFragment) {\n          warn('Transitions will not work on a fragment instance. ' + 'Template: ' + child.$options.template);\n        }\n        return child;\n      }\n    },\n\n    /**\n     * Try to get a cached instance of the current component.\n     *\n     * @return {Vue|undefined}\n     */\n\n    getCached: function getCached() {\n      return this.keepAlive && this.cache[this.Component.cid];\n    },\n\n    /**\n     * Teardown the current child, but defers cleanup so\n     * that we can separate the destroy and removal steps.\n     *\n     * @param {Boolean} defer\n     */\n\n    unbuild: function unbuild(defer) {\n      if (this.waitingFor) {\n        this.waitingFor.$destroy();\n        this.waitingFor = null;\n      }\n      var child = this.childVM;\n      if (!child || this.keepAlive) {\n        if (child) {\n          // remove ref\n          child._updateRef(true);\n        }\n        return;\n      }\n      // the sole purpose of `deferCleanup` is so that we can\n      // \"deactivate\" the vm right now and perform DOM removal\n      // later.\n      child.$destroy(false, defer);\n    },\n\n    /**\n     * Remove current destroyed child and manually do\n     * the cleanup after removal.\n     *\n     * @param {Function} cb\n     */\n\n    remove: function remove(child, cb) {\n      var keepAlive = this.keepAlive;\n      if (child) {\n        // we may have a component switch when a previous\n        // component is still being transitioned out.\n        // we want to trigger only one lastest insertion cb\n        // when the existing transition finishes. (#1119)\n        this.pendingRemovals++;\n        this.pendingRemovalCb = cb;\n        var self = this;\n        child.$remove(function () {\n          self.pendingRemovals--;\n          if (!keepAlive) child._cleanup();\n          if (!self.pendingRemovals && self.pendingRemovalCb) {\n            self.pendingRemovalCb();\n            self.pendingRemovalCb = null;\n          }\n        });\n      } else if (cb) {\n        cb();\n      }\n    },\n\n    /**\n     * Actually swap the components, depending on the\n     * transition mode. Defaults to simultaneous.\n     *\n     * @param {Vue} target\n     * @param {Function} [cb]\n     */\n\n    transition: function transition(target, cb) {\n      var self = this;\n      var current = this.childVM;\n      // for devtool inspection\n      if ('development' !== 'production') {\n        if (current) current._inactive = true;\n        target._inactive = false;\n      }\n      this.childVM = target;\n      switch (self.params.transitionMode) {\n        case 'in-out':\n          target.$before(self.anchor, function () {\n            self.remove(current, cb);\n          });\n          break;\n        case 'out-in':\n          self.remove(current, function () {\n            target.$before(self.anchor, cb);\n          });\n          break;\n        default:\n          self.remove(current);\n          target.$before(self.anchor, cb);\n      }\n    },\n\n    /**\n     * Unbind.\n     */\n\n    unbind: function unbind() {\n      this.invalidatePending();\n      // Do not defer cleanup when unbinding\n      this.unbuild();\n      // destroy all keep-alive cached instances\n      if (this.cache) {\n        for (var key in this.cache) {\n          this.cache[key].$destroy();\n        }\n        this.cache = null;\n      }\n    }\n  };\n\n  var vClass = {\n\n    deep: true,\n\n    update: function update(value) {\n      if (value && typeof value === 'string') {\n        this.handleObject(stringToObject(value));\n      } else if (isPlainObject(value)) {\n        this.handleObject(value);\n      } else if (isArray(value)) {\n        this.handleArray(value);\n      } else {\n        this.cleanup();\n      }\n    },\n\n    handleObject: function handleObject(value) {\n      this.cleanup(value);\n      var keys = this.prevKeys = Object.keys(value);\n      for (var i = 0, l = keys.length; i < l; i++) {\n        var key = keys[i];\n        if (value[key]) {\n          addClass(this.el, key);\n        } else {\n          removeClass(this.el, key);\n        }\n      }\n    },\n\n    handleArray: function handleArray(value) {\n      this.cleanup(value);\n      for (var i = 0, l = value.length; i < l; i++) {\n        if (value[i]) {\n          addClass(this.el, value[i]);\n        }\n      }\n      this.prevKeys = value.slice();\n    },\n\n    cleanup: function cleanup(value) {\n      if (this.prevKeys) {\n        var i = this.prevKeys.length;\n        while (i--) {\n          var key = this.prevKeys[i];\n          if (key && (!value || !contains$1(value, key))) {\n            removeClass(this.el, key);\n          }\n        }\n      }\n    }\n  };\n\n  function stringToObject(value) {\n    var res = {};\n    var keys = value.trim().split(/\\s+/);\n    var i = keys.length;\n    while (i--) {\n      res[keys[i]] = true;\n    }\n    return res;\n  }\n\n  function contains$1(value, key) {\n    return isArray(value) ? value.indexOf(key) > -1 : hasOwn(value, key);\n  }\n\n  var internalDirectives = {\n    style: style,\n    'class': vClass,\n    component: component,\n    prop: propDef,\n    transition: transition\n  };\n\n  var propBindingModes = config._propBindingModes;\n  var empty = {};\n\n  // regexes\n  var identRE = /^[$_a-zA-Z]+[\\w$]*$/;\n  var settablePathRE = /^[A-Za-z_$][\\w$]*(\\.[A-Za-z_$][\\w$]*|\\[[^\\[\\]]+\\])*$/;\n\n  /**\n   * Compile props on a root element and return\n   * a props link function.\n   *\n   * @param {Element|DocumentFragment} el\n   * @param {Array} propOptions\n   * @return {Function} propsLinkFn\n   */\n\n  function compileProps(el, propOptions) {\n    var props = [];\n    var names = Object.keys(propOptions);\n    var i = names.length;\n    var options, name, attr, value, path, parsed, prop;\n    while (i--) {\n      name = names[i];\n      options = propOptions[name] || empty;\n\n      if ('development' !== 'production' && name === '$data') {\n        warn('Do not use $data as prop.');\n        continue;\n      }\n\n      // props could contain dashes, which will be\n      // interpreted as minus calculations by the parser\n      // so we need to camelize the path here\n      path = camelize(name);\n      if (!identRE.test(path)) {\n        'development' !== 'production' && warn('Invalid prop key: \"' + name + '\". Prop keys ' + 'must be valid identifiers.');\n        continue;\n      }\n\n      prop = {\n        name: name,\n        path: path,\n        options: options,\n        mode: propBindingModes.ONE_WAY,\n        raw: null\n      };\n\n      attr = hyphenate(name);\n      // first check dynamic version\n      if ((value = getBindAttr(el, attr)) === null) {\n        if ((value = getBindAttr(el, attr + '.sync')) !== null) {\n          prop.mode = propBindingModes.TWO_WAY;\n        } else if ((value = getBindAttr(el, attr + '.once')) !== null) {\n          prop.mode = propBindingModes.ONE_TIME;\n        }\n      }\n      if (value !== null) {\n        // has dynamic binding!\n        prop.raw = value;\n        parsed = parseDirective(value);\n        value = parsed.expression;\n        prop.filters = parsed.filters;\n        // check binding type\n        if (isLiteral(value)) {\n          // for expressions containing literal numbers and\n          // booleans, there's no need to setup a prop binding,\n          // so we can optimize them as a one-time set.\n          prop.optimizedLiteral = true;\n        } else {\n          prop.dynamic = true;\n          // check non-settable path for two-way bindings\n          if ('development' !== 'production' && prop.mode === propBindingModes.TWO_WAY && !settablePathRE.test(value)) {\n            prop.mode = propBindingModes.ONE_WAY;\n            warn('Cannot bind two-way prop with non-settable ' + 'parent path: ' + value);\n          }\n        }\n        prop.parentPath = value;\n\n        // warn required two-way\n        if ('development' !== 'production' && options.twoWay && prop.mode !== propBindingModes.TWO_WAY) {\n          warn('Prop \"' + name + '\" expects a two-way binding type.');\n        }\n      } else if ((value = getAttr(el, attr)) !== null) {\n        // has literal binding!\n        prop.raw = value;\n      } else if (options.required) {\n        // warn missing required\n        'development' !== 'production' && warn('Missing required prop: ' + name);\n      }\n      // push prop\n      props.push(prop);\n    }\n    return makePropsLinkFn(props);\n  }\n\n  /**\n   * Build a function that applies props to a vm.\n   *\n   * @param {Array} props\n   * @return {Function} propsLinkFn\n   */\n\n  function makePropsLinkFn(props) {\n    return function propsLinkFn(vm, scope) {\n      // store resolved props info\n      vm._props = {};\n      var i = props.length;\n      var prop, path, options, value, raw;\n      while (i--) {\n        prop = props[i];\n        raw = prop.raw;\n        path = prop.path;\n        options = prop.options;\n        vm._props[path] = prop;\n        if (raw === null) {\n          // initialize absent prop\n          initProp(vm, prop, getDefault(vm, options));\n        } else if (prop.dynamic) {\n          // dynamic prop\n          if (vm._context) {\n            if (prop.mode === propBindingModes.ONE_TIME) {\n              // one time binding\n              value = (scope || vm._context).$get(prop.parentPath);\n              initProp(vm, prop, value);\n            } else {\n              // dynamic binding\n              vm._bindDir({\n                name: 'prop',\n                def: propDef,\n                prop: prop\n              }, null, null, scope); // el, host, scope\n            }\n          } else {\n              'development' !== 'production' && warn('Cannot bind dynamic prop on a root instance' + ' with no parent: ' + prop.name + '=\"' + raw + '\"');\n            }\n        } else if (prop.optimizedLiteral) {\n          // optimized literal, cast it and just set once\n          var stripped = stripQuotes(raw);\n          value = stripped === raw ? toBoolean(toNumber(raw)) : stripped;\n          initProp(vm, prop, value);\n        } else {\n          // string literal, but we need to cater for\n          // Boolean props with no value\n          value = options.type === Boolean && raw === '' ? true : raw;\n          initProp(vm, prop, value);\n        }\n      }\n    };\n  }\n\n  /**\n   * Get the default value of a prop.\n   *\n   * @param {Vue} vm\n   * @param {Object} options\n   * @return {*}\n   */\n\n  function getDefault(vm, options) {\n    // no default, return undefined\n    if (!hasOwn(options, 'default')) {\n      // absent boolean value defaults to false\n      return options.type === Boolean ? false : undefined;\n    }\n    var def = options['default'];\n    // warn against non-factory defaults for Object & Array\n    if (isObject(def)) {\n      'development' !== 'production' && warn('Object/Array as default prop values will be shared ' + 'across multiple instances. Use a factory function ' + 'to return the default value instead.');\n    }\n    // call factory function for non-Function types\n    return typeof def === 'function' && options.type !== Function ? def.call(vm) : def;\n  }\n\n  // special binding prefixes\n  var bindRE = /^v-bind:|^:/;\n  var onRE = /^v-on:|^@/;\n  var argRE = /:(.*)$/;\n  var modifierRE = /\\.[^\\.]+/g;\n  var transitionRE = /^(v-bind:|:)?transition$/;\n\n  // terminal directives\n  var terminalDirectives = ['for', 'if'];\n\n  // default directive priority\n  var DEFAULT_PRIORITY = 1000;\n\n  /**\n   * Compile a template and return a reusable composite link\n   * function, which recursively contains more link functions\n   * inside. This top level compile function would normally\n   * be called on instance root nodes, but can also be used\n   * for partial compilation if the partial argument is true.\n   *\n   * The returned composite link function, when called, will\n   * return an unlink function that tearsdown all directives\n   * created during the linking phase.\n   *\n   * @param {Element|DocumentFragment} el\n   * @param {Object} options\n   * @param {Boolean} partial\n   * @return {Function}\n   */\n\n  function compile(el, options, partial) {\n    // link function for the node itself.\n    var nodeLinkFn = partial || !options._asComponent ? compileNode(el, options) : null;\n    // link function for the childNodes\n    var childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && el.tagName !== 'SCRIPT' && el.hasChildNodes() ? compileNodeList(el.childNodes, options) : null;\n\n    /**\n     * A composite linker function to be called on a already\n     * compiled piece of DOM, which instantiates all directive\n     * instances.\n     *\n     * @param {Vue} vm\n     * @param {Element|DocumentFragment} el\n     * @param {Vue} [host] - host vm of transcluded content\n     * @param {Object} [scope] - v-for scope\n     * @param {Fragment} [frag] - link context fragment\n     * @return {Function|undefined}\n     */\n\n    return function compositeLinkFn(vm, el, host, scope, frag) {\n      // cache childNodes before linking parent, fix #657\n      var childNodes = toArray(el.childNodes);\n      // link\n      var dirs = linkAndCapture(function compositeLinkCapturer() {\n        if (nodeLinkFn) nodeLinkFn(vm, el, host, scope, frag);\n        if (childLinkFn) childLinkFn(vm, childNodes, host, scope, frag);\n      }, vm);\n      return makeUnlinkFn(vm, dirs);\n    };\n  }\n\n  /**\n   * Apply a linker to a vm/element pair and capture the\n   * directives created during the process.\n   *\n   * @param {Function} linker\n   * @param {Vue} vm\n   */\n\n  function linkAndCapture(linker, vm) {\n    var originalDirCount = vm._directives.length;\n    linker();\n    var dirs = vm._directives.slice(originalDirCount);\n    dirs.sort(directiveComparator);\n    for (var i = 0, l = dirs.length; i < l; i++) {\n      dirs[i]._bind();\n    }\n    return dirs;\n  }\n\n  /**\n   * Directive priority sort comparator\n   *\n   * @param {Object} a\n   * @param {Object} b\n   */\n\n  function directiveComparator(a, b) {\n    a = a.descriptor.def.priority || DEFAULT_PRIORITY;\n    b = b.descriptor.def.priority || DEFAULT_PRIORITY;\n    return a > b ? -1 : a === b ? 0 : 1;\n  }\n\n  /**\n   * Linker functions return an unlink function that\n   * tearsdown all directives instances generated during\n   * the process.\n   *\n   * We create unlink functions with only the necessary\n   * information to avoid retaining additional closures.\n   *\n   * @param {Vue} vm\n   * @param {Array} dirs\n   * @param {Vue} [context]\n   * @param {Array} [contextDirs]\n   * @return {Function}\n   */\n\n  function makeUnlinkFn(vm, dirs, context, contextDirs) {\n    return function unlink(destroying) {\n      teardownDirs(vm, dirs, destroying);\n      if (context && contextDirs) {\n        teardownDirs(context, contextDirs);\n      }\n    };\n  }\n\n  /**\n   * Teardown partial linked directives.\n   *\n   * @param {Vue} vm\n   * @param {Array} dirs\n   * @param {Boolean} destroying\n   */\n\n  function teardownDirs(vm, dirs, destroying) {\n    var i = dirs.length;\n    while (i--) {\n      dirs[i]._teardown();\n      if (!destroying) {\n        vm._directives.$remove(dirs[i]);\n      }\n    }\n  }\n\n  /**\n   * Compile link props on an instance.\n   *\n   * @param {Vue} vm\n   * @param {Element} el\n   * @param {Object} props\n   * @param {Object} [scope]\n   * @return {Function}\n   */\n\n  function compileAndLinkProps(vm, el, props, scope) {\n    var propsLinkFn = compileProps(el, props);\n    var propDirs = linkAndCapture(function () {\n      propsLinkFn(vm, scope);\n    }, vm);\n    return makeUnlinkFn(vm, propDirs);\n  }\n\n  /**\n   * Compile the root element of an instance.\n   *\n   * 1. attrs on context container (context scope)\n   * 2. attrs on the component template root node, if\n   *    replace:true (child scope)\n   *\n   * If this is a fragment instance, we only need to compile 1.\n   *\n   * @param {Vue} vm\n   * @param {Element} el\n   * @param {Object} options\n   * @param {Object} contextOptions\n   * @return {Function}\n   */\n\n  function compileRoot(el, options, contextOptions) {\n    var containerAttrs = options._containerAttrs;\n    var replacerAttrs = options._replacerAttrs;\n    var contextLinkFn, replacerLinkFn;\n\n    // only need to compile other attributes for\n    // non-fragment instances\n    if (el.nodeType !== 11) {\n      // for components, container and replacer need to be\n      // compiled separately and linked in different scopes.\n      if (options._asComponent) {\n        // 2. container attributes\n        if (containerAttrs && contextOptions) {\n          contextLinkFn = compileDirectives(containerAttrs, contextOptions);\n        }\n        if (replacerAttrs) {\n          // 3. replacer attributes\n          replacerLinkFn = compileDirectives(replacerAttrs, options);\n        }\n      } else {\n        // non-component, just compile as a normal element.\n        replacerLinkFn = compileDirectives(el.attributes, options);\n      }\n    } else if ('development' !== 'production' && containerAttrs) {\n      // warn container directives for fragment instances\n      var names = containerAttrs.filter(function (attr) {\n        // allow vue-loader/vueify scoped css attributes\n        return attr.name.indexOf('_v-') < 0 &&\n        // allow event listeners\n        !onRE.test(attr.name) &&\n        // allow slots\n        attr.name !== 'slot';\n      }).map(function (attr) {\n        return '\"' + attr.name + '\"';\n      });\n      if (names.length) {\n        var plural = names.length > 1;\n        warn('Attribute' + (plural ? 's ' : ' ') + names.join(', ') + (plural ? ' are' : ' is') + ' ignored on component ' + '<' + options.el.tagName.toLowerCase() + '> because ' + 'the component is a fragment instance: ' + 'http://vuejs.org/guide/components.html#Fragment_Instance');\n      }\n    }\n\n    return function rootLinkFn(vm, el, scope) {\n      // link context scope dirs\n      var context = vm._context;\n      var contextDirs;\n      if (context && contextLinkFn) {\n        contextDirs = linkAndCapture(function () {\n          contextLinkFn(context, el, null, scope);\n        }, context);\n      }\n\n      // link self\n      var selfDirs = linkAndCapture(function () {\n        if (replacerLinkFn) replacerLinkFn(vm, el);\n      }, vm);\n\n      // return the unlink function that tearsdown context\n      // container directives.\n      return makeUnlinkFn(vm, selfDirs, context, contextDirs);\n    };\n  }\n\n  /**\n   * Compile a node and return a nodeLinkFn based on the\n   * node type.\n   *\n   * @param {Node} node\n   * @param {Object} options\n   * @return {Function|null}\n   */\n\n  function compileNode(node, options) {\n    var type = node.nodeType;\n    if (type === 1 && node.tagName !== 'SCRIPT') {\n      return compileElement(node, options);\n    } else if (type === 3 && node.data.trim()) {\n      return compileTextNode(node, options);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Compile an element and return a nodeLinkFn.\n   *\n   * @param {Element} el\n   * @param {Object} options\n   * @return {Function|null}\n   */\n\n  function compileElement(el, options) {\n    // preprocess textareas.\n    // textarea treats its text content as the initial value.\n    // just bind it as an attr directive for value.\n    if (el.tagName === 'TEXTAREA') {\n      var tokens = parseText(el.value);\n      if (tokens) {\n        el.setAttribute(':value', tokensToExp(tokens));\n        el.value = '';\n      }\n    }\n    var linkFn;\n    var hasAttrs = el.hasAttributes();\n    // check terminal directives (for & if)\n    if (hasAttrs) {\n      linkFn = checkTerminalDirectives(el, options);\n    }\n    // check element directives\n    if (!linkFn) {\n      linkFn = checkElementDirectives(el, options);\n    }\n    // check component\n    if (!linkFn) {\n      linkFn = checkComponent(el, options);\n    }\n    // normal directives\n    if (!linkFn && hasAttrs) {\n      linkFn = compileDirectives(el.attributes, options);\n    }\n    return linkFn;\n  }\n\n  /**\n   * Compile a textNode and return a nodeLinkFn.\n   *\n   * @param {TextNode} node\n   * @param {Object} options\n   * @return {Function|null} textNodeLinkFn\n   */\n\n  function compileTextNode(node, options) {\n    // skip marked text nodes\n    if (node._skip) {\n      return removeText;\n    }\n\n    var tokens = parseText(node.wholeText);\n    if (!tokens) {\n      return null;\n    }\n\n    // mark adjacent text nodes as skipped,\n    // because we are using node.wholeText to compile\n    // all adjacent text nodes together. This fixes\n    // issues in IE where sometimes it splits up a single\n    // text node into multiple ones.\n    var next = node.nextSibling;\n    while (next && next.nodeType === 3) {\n      next._skip = true;\n      next = next.nextSibling;\n    }\n\n    var frag = document.createDocumentFragment();\n    var el, token;\n    for (var i = 0, l = tokens.length; i < l; i++) {\n      token = tokens[i];\n      el = token.tag ? processTextToken(token, options) : document.createTextNode(token.value);\n      frag.appendChild(el);\n    }\n    return makeTextNodeLinkFn(tokens, frag, options);\n  }\n\n  /**\n   * Linker for an skipped text node.\n   *\n   * @param {Vue} vm\n   * @param {Text} node\n   */\n\n  function removeText(vm, node) {\n    remove(node);\n  }\n\n  /**\n   * Process a single text token.\n   *\n   * @param {Object} token\n   * @param {Object} options\n   * @return {Node}\n   */\n\n  function processTextToken(token, options) {\n    var el;\n    if (token.oneTime) {\n      el = document.createTextNode(token.value);\n    } else {\n      if (token.html) {\n        el = document.createComment('v-html');\n        setTokenType('html');\n      } else {\n        // IE will clean up empty textNodes during\n        // frag.cloneNode(true), so we have to give it\n        // something here...\n        el = document.createTextNode(' ');\n        setTokenType('text');\n      }\n    }\n    function setTokenType(type) {\n      if (token.descriptor) return;\n      var parsed = parseDirective(token.value);\n      token.descriptor = {\n        name: type,\n        def: publicDirectives[type],\n        expression: parsed.expression,\n        filters: parsed.filters\n      };\n    }\n    return el;\n  }\n\n  /**\n   * Build a function that processes a textNode.\n   *\n   * @param {Array<Object>} tokens\n   * @param {DocumentFragment} frag\n   */\n\n  function makeTextNodeLinkFn(tokens, frag) {\n    return function textNodeLinkFn(vm, el, host, scope) {\n      var fragClone = frag.cloneNode(true);\n      var childNodes = toArray(fragClone.childNodes);\n      var token, value, node;\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        token = tokens[i];\n        value = token.value;\n        if (token.tag) {\n          node = childNodes[i];\n          if (token.oneTime) {\n            value = (scope || vm).$eval(value);\n            if (token.html) {\n              replace(node, parseTemplate(value, true));\n            } else {\n              node.data = value;\n            }\n          } else {\n            vm._bindDir(token.descriptor, node, host, scope);\n          }\n        }\n      }\n      replace(el, fragClone);\n    };\n  }\n\n  /**\n   * Compile a node list and return a childLinkFn.\n   *\n   * @param {NodeList} nodeList\n   * @param {Object} options\n   * @return {Function|undefined}\n   */\n\n  function compileNodeList(nodeList, options) {\n    var linkFns = [];\n    var nodeLinkFn, childLinkFn, node;\n    for (var i = 0, l = nodeList.length; i < l; i++) {\n      node = nodeList[i];\n      nodeLinkFn = compileNode(node, options);\n      childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && node.tagName !== 'SCRIPT' && node.hasChildNodes() ? compileNodeList(node.childNodes, options) : null;\n      linkFns.push(nodeLinkFn, childLinkFn);\n    }\n    return linkFns.length ? makeChildLinkFn(linkFns) : null;\n  }\n\n  /**\n   * Make a child link function for a node's childNodes.\n   *\n   * @param {Array<Function>} linkFns\n   * @return {Function} childLinkFn\n   */\n\n  function makeChildLinkFn(linkFns) {\n    return function childLinkFn(vm, nodes, host, scope, frag) {\n      var node, nodeLinkFn, childrenLinkFn;\n      for (var i = 0, n = 0, l = linkFns.length; i < l; n++) {\n        node = nodes[n];\n        nodeLinkFn = linkFns[i++];\n        childrenLinkFn = linkFns[i++];\n        // cache childNodes before linking parent, fix #657\n        var childNodes = toArray(node.childNodes);\n        if (nodeLinkFn) {\n          nodeLinkFn(vm, node, host, scope, frag);\n        }\n        if (childrenLinkFn) {\n          childrenLinkFn(vm, childNodes, host, scope, frag);\n        }\n      }\n    };\n  }\n\n  /**\n   * Check for element directives (custom elements that should\n   * be resovled as terminal directives).\n   *\n   * @param {Element} el\n   * @param {Object} options\n   */\n\n  function checkElementDirectives(el, options) {\n    var tag = el.tagName.toLowerCase();\n    if (commonTagRE.test(tag)) return;\n    var def = resolveAsset(options, 'elementDirectives', tag);\n    if (def) {\n      return makeTerminalNodeLinkFn(el, tag, '', options, def);\n    }\n  }\n\n  /**\n   * Check if an element is a component. If yes, return\n   * a component link function.\n   *\n   * @param {Element} el\n   * @param {Object} options\n   * @return {Function|undefined}\n   */\n\n  function checkComponent(el, options) {\n    var component = checkComponentAttr(el, options);\n    if (component) {\n      var ref = findRef(el);\n      var descriptor = {\n        name: 'component',\n        ref: ref,\n        expression: component.id,\n        def: internalDirectives.component,\n        modifiers: {\n          literal: !component.dynamic\n        }\n      };\n      var componentLinkFn = function componentLinkFn(vm, el, host, scope, frag) {\n        if (ref) {\n          defineReactive((scope || vm).$refs, ref, null);\n        }\n        vm._bindDir(descriptor, el, host, scope, frag);\n      };\n      componentLinkFn.terminal = true;\n      return componentLinkFn;\n    }\n  }\n\n  /**\n   * Check an element for terminal directives in fixed order.\n   * If it finds one, return a terminal link function.\n   *\n   * @param {Element} el\n   * @param {Object} options\n   * @return {Function} terminalLinkFn\n   */\n\n  function checkTerminalDirectives(el, options) {\n    // skip v-pre\n    if (getAttr(el, 'v-pre') !== null) {\n      return skip;\n    }\n    // skip v-else block, but only if following v-if\n    if (el.hasAttribute('v-else')) {\n      var prev = el.previousElementSibling;\n      if (prev && prev.hasAttribute('v-if')) {\n        return skip;\n      }\n    }\n    var value, dirName;\n    for (var i = 0, l = terminalDirectives.length; i < l; i++) {\n      dirName = terminalDirectives[i];\n      /* eslint-disable no-cond-assign */\n      if (value = el.getAttribute('v-' + dirName)) {\n        return makeTerminalNodeLinkFn(el, dirName, value, options);\n      }\n      /* eslint-enable no-cond-assign */\n    }\n  }\n\n  function skip() {}\n  skip.terminal = true;\n\n  /**\n   * Build a node link function for a terminal directive.\n   * A terminal link function terminates the current\n   * compilation recursion and handles compilation of the\n   * subtree in the directive.\n   *\n   * @param {Element} el\n   * @param {String} dirName\n   * @param {String} value\n   * @param {Object} options\n   * @param {Object} [def]\n   * @return {Function} terminalLinkFn\n   */\n\n  function makeTerminalNodeLinkFn(el, dirName, value, options, def) {\n    var parsed = parseDirective(value);\n    var descriptor = {\n      name: dirName,\n      expression: parsed.expression,\n      filters: parsed.filters,\n      raw: value,\n      // either an element directive, or if/for\n      def: def || publicDirectives[dirName]\n    };\n    // check ref for v-for and router-view\n    if (dirName === 'for' || dirName === 'router-view') {\n      descriptor.ref = findRef(el);\n    }\n    var fn = function terminalNodeLinkFn(vm, el, host, scope, frag) {\n      if (descriptor.ref) {\n        defineReactive((scope || vm).$refs, descriptor.ref, null);\n      }\n      vm._bindDir(descriptor, el, host, scope, frag);\n    };\n    fn.terminal = true;\n    return fn;\n  }\n\n  /**\n   * Compile the directives on an element and return a linker.\n   *\n   * @param {Array|NamedNodeMap} attrs\n   * @param {Object} options\n   * @return {Function}\n   */\n\n  function compileDirectives(attrs, options) {\n    var i = attrs.length;\n    var dirs = [];\n    var attr, name, value, rawName, rawValue, dirName, arg, modifiers, dirDef, tokens;\n    while (i--) {\n      attr = attrs[i];\n      name = rawName = attr.name;\n      value = rawValue = attr.value;\n      tokens = parseText(value);\n      // reset arg\n      arg = null;\n      // check modifiers\n      modifiers = parseModifiers(name);\n      name = name.replace(modifierRE, '');\n\n      // attribute interpolations\n      if (tokens) {\n        value = tokensToExp(tokens);\n        arg = name;\n        pushDir('bind', publicDirectives.bind, true);\n        // warn against mixing mustaches with v-bind\n        if ('development' !== 'production') {\n          if (name === 'class' && Array.prototype.some.call(attrs, function (attr) {\n            return attr.name === ':class' || attr.name === 'v-bind:class';\n          })) {\n            warn('class=\"' + rawValue + '\": Do not mix mustache interpolation ' + 'and v-bind for \"class\" on the same element. Use one or the other.');\n          }\n        }\n      } else\n\n        // special attribute: transition\n        if (transitionRE.test(name)) {\n          modifiers.literal = !bindRE.test(name);\n          pushDir('transition', internalDirectives.transition);\n        } else\n\n          // event handlers\n          if (onRE.test(name)) {\n            arg = name.replace(onRE, '');\n            pushDir('on', publicDirectives.on);\n          } else\n\n            // attribute bindings\n            if (bindRE.test(name)) {\n              dirName = name.replace(bindRE, '');\n              if (dirName === 'style' || dirName === 'class') {\n                pushDir(dirName, internalDirectives[dirName]);\n              } else {\n                arg = dirName;\n                pushDir('bind', publicDirectives.bind);\n              }\n            } else\n\n              // normal directives\n              if (name.indexOf('v-') === 0) {\n                // check arg\n                arg = (arg = name.match(argRE)) && arg[1];\n                if (arg) {\n                  name = name.replace(argRE, '');\n                }\n                // extract directive name\n                dirName = name.slice(2);\n\n                // skip v-else (when used with v-show)\n                if (dirName === 'else') {\n                  continue;\n                }\n\n                dirDef = resolveAsset(options, 'directives', dirName);\n\n                if ('development' !== 'production') {\n                  assertAsset(dirDef, 'directive', dirName);\n                }\n\n                if (dirDef) {\n                  pushDir(dirName, dirDef);\n                }\n              }\n    }\n\n    /**\n     * Push a directive.\n     *\n     * @param {String} dirName\n     * @param {Object|Function} def\n     * @param {Boolean} [interp]\n     */\n\n    function pushDir(dirName, def, interp) {\n      var parsed = parseDirective(value);\n      dirs.push({\n        name: dirName,\n        attr: rawName,\n        raw: rawValue,\n        def: def,\n        arg: arg,\n        modifiers: modifiers,\n        expression: parsed.expression,\n        filters: parsed.filters,\n        interp: interp\n      });\n    }\n\n    if (dirs.length) {\n      return makeNodeLinkFn(dirs);\n    }\n  }\n\n  /**\n   * Parse modifiers from directive attribute name.\n   *\n   * @param {String} name\n   * @return {Object}\n   */\n\n  function parseModifiers(name) {\n    var res = Object.create(null);\n    var match = name.match(modifierRE);\n    if (match) {\n      var i = match.length;\n      while (i--) {\n        res[match[i].slice(1)] = true;\n      }\n    }\n    return res;\n  }\n\n  /**\n   * Build a link function for all directives on a single node.\n   *\n   * @param {Array} directives\n   * @return {Function} directivesLinkFn\n   */\n\n  function makeNodeLinkFn(directives) {\n    return function nodeLinkFn(vm, el, host, scope, frag) {\n      // reverse apply because it's sorted low to high\n      var i = directives.length;\n      while (i--) {\n        vm._bindDir(directives[i], el, host, scope, frag);\n      }\n    };\n  }\n\n  var specialCharRE = /[^\\w\\-:\\.]/;\n\n  /**\n   * Process an element or a DocumentFragment based on a\n   * instance option object. This allows us to transclude\n   * a template node/fragment before the instance is created,\n   * so the processed fragment can then be cloned and reused\n   * in v-for.\n   *\n   * @param {Element} el\n   * @param {Object} options\n   * @return {Element|DocumentFragment}\n   */\n\n  function transclude(el, options) {\n    // extract container attributes to pass them down\n    // to compiler, because they need to be compiled in\n    // parent scope. we are mutating the options object here\n    // assuming the same object will be used for compile\n    // right after this.\n    if (options) {\n      options._containerAttrs = extractAttrs(el);\n    }\n    // for template tags, what we want is its content as\n    // a documentFragment (for fragment instances)\n    if (isTemplate(el)) {\n      el = parseTemplate(el);\n    }\n    if (options) {\n      if (options._asComponent && !options.template) {\n        options.template = '<slot></slot>';\n      }\n      if (options.template) {\n        options._content = extractContent(el);\n        el = transcludeTemplate(el, options);\n      }\n    }\n    if (el instanceof DocumentFragment) {\n      // anchors for fragment instance\n      // passing in `persist: true` to avoid them being\n      // discarded by IE during template cloning\n      prepend(createAnchor('v-start', true), el);\n      el.appendChild(createAnchor('v-end', true));\n    }\n    return el;\n  }\n\n  /**\n   * Process the template option.\n   * If the replace option is true this will swap the $el.\n   *\n   * @param {Element} el\n   * @param {Object} options\n   * @return {Element|DocumentFragment}\n   */\n\n  function transcludeTemplate(el, options) {\n    var template = options.template;\n    var frag = parseTemplate(template, true);\n    if (frag) {\n      var replacer = frag.firstChild;\n      var tag = replacer.tagName && replacer.tagName.toLowerCase();\n      if (options.replace) {\n        /* istanbul ignore if */\n        if (el === document.body) {\n          'development' !== 'production' && warn('You are mounting an instance with a template to ' + '<body>. This will replace <body> entirely. You ' + 'should probably use `replace: false` here.');\n        }\n        // there are many cases where the instance must\n        // become a fragment instance: basically anything that\n        // can create more than 1 root nodes.\n        if (\n        // multi-children template\n        frag.childNodes.length > 1 ||\n        // non-element template\n        replacer.nodeType !== 1 ||\n        // single nested component\n        tag === 'component' || resolveAsset(options, 'components', tag) || replacer.hasAttribute('is') || replacer.hasAttribute(':is') || replacer.hasAttribute('v-bind:is') ||\n        // element directive\n        resolveAsset(options, 'elementDirectives', tag) ||\n        // for block\n        replacer.hasAttribute('v-for') ||\n        // if block\n        replacer.hasAttribute('v-if')) {\n          return frag;\n        } else {\n          options._replacerAttrs = extractAttrs(replacer);\n          mergeAttrs(el, replacer);\n          return replacer;\n        }\n      } else {\n        el.appendChild(frag);\n        return el;\n      }\n    } else {\n      'development' !== 'production' && warn('Invalid template option: ' + template);\n    }\n  }\n\n  /**\n   * Helper to extract a component container's attributes\n   * into a plain object array.\n   *\n   * @param {Element} el\n   * @return {Array}\n   */\n\n  function extractAttrs(el) {\n    if (el.nodeType === 1 && el.hasAttributes()) {\n      return toArray(el.attributes);\n    }\n  }\n\n  /**\n   * Merge the attributes of two elements, and make sure\n   * the class names are merged properly.\n   *\n   * @param {Element} from\n   * @param {Element} to\n   */\n\n  function mergeAttrs(from, to) {\n    var attrs = from.attributes;\n    var i = attrs.length;\n    var name, value;\n    while (i--) {\n      name = attrs[i].name;\n      value = attrs[i].value;\n      if (!to.hasAttribute(name) && !specialCharRE.test(name)) {\n        to.setAttribute(name, value);\n      } else if (name === 'class') {\n        value.split(/\\s+/).forEach(function (cls) {\n          addClass(to, cls);\n        });\n      }\n    }\n  }\n\n  var compiler = Object.freeze({\n  \tcompile: compile,\n  \tcompileAndLinkProps: compileAndLinkProps,\n  \tcompileRoot: compileRoot,\n  \ttransclude: transclude\n  });\n\n  function stateMixin (Vue) {\n\n    /**\n     * Accessor for `$data` property, since setting $data\n     * requires observing the new object and updating\n     * proxied properties.\n     */\n\n    Object.defineProperty(Vue.prototype, '$data', {\n      get: function get() {\n        return this._data;\n      },\n      set: function set(newData) {\n        if (newData !== this._data) {\n          this._setData(newData);\n        }\n      }\n    });\n\n    /**\n     * Setup the scope of an instance, which contains:\n     * - observed data\n     * - computed properties\n     * - user methods\n     * - meta properties\n     */\n\n    Vue.prototype._initState = function () {\n      this._initProps();\n      this._initMeta();\n      this._initMethods();\n      this._initData();\n      this._initComputed();\n    };\n\n    /**\n     * Initialize props.\n     */\n\n    Vue.prototype._initProps = function () {\n      var options = this.$options;\n      var el = options.el;\n      var props = options.props;\n      if (props && !el) {\n        'development' !== 'production' && warn('Props will not be compiled if no `el` option is ' + 'provided at instantiation.');\n      }\n      // make sure to convert string selectors into element now\n      el = options.el = query(el);\n      this._propsUnlinkFn = el && el.nodeType === 1 && props\n      // props must be linked in proper scope if inside v-for\n      ? compileAndLinkProps(this, el, props, this._scope) : null;\n    };\n\n    /**\n     * Initialize the data.\n     */\n\n    Vue.prototype._initData = function () {\n      var propsData = this._data;\n      var optionsDataFn = this.$options.data;\n      var optionsData = optionsDataFn && optionsDataFn();\n      if (optionsData) {\n        this._data = optionsData;\n        for (var prop in propsData) {\n          if ('development' !== 'production' && hasOwn(optionsData, prop)) {\n            warn('Data field \"' + prop + '\" is already defined ' + 'as a prop. Use prop default value instead.');\n          }\n          if (this._props[prop].raw !== null || !hasOwn(optionsData, prop)) {\n            set(optionsData, prop, propsData[prop]);\n          }\n        }\n      }\n      var data = this._data;\n      // proxy data on instance\n      var keys = Object.keys(data);\n      var i, key;\n      i = keys.length;\n      while (i--) {\n        key = keys[i];\n        this._proxy(key);\n      }\n      // observe data\n      observe(data, this);\n    };\n\n    /**\n     * Swap the instance's $data. Called in $data's setter.\n     *\n     * @param {Object} newData\n     */\n\n    Vue.prototype._setData = function (newData) {\n      newData = newData || {};\n      var oldData = this._data;\n      this._data = newData;\n      var keys, key, i;\n      // unproxy keys not present in new data\n      keys = Object.keys(oldData);\n      i = keys.length;\n      while (i--) {\n        key = keys[i];\n        if (!(key in newData)) {\n          this._unproxy(key);\n        }\n      }\n      // proxy keys not already proxied,\n      // and trigger change for changed values\n      keys = Object.keys(newData);\n      i = keys.length;\n      while (i--) {\n        key = keys[i];\n        if (!hasOwn(this, key)) {\n          // new property\n          this._proxy(key);\n        }\n      }\n      oldData.__ob__.removeVm(this);\n      observe(newData, this);\n      this._digest();\n    };\n\n    /**\n     * Proxy a property, so that\n     * vm.prop === vm._data.prop\n     *\n     * @param {String} key\n     */\n\n    Vue.prototype._proxy = function (key) {\n      if (!isReserved(key)) {\n        // need to store ref to self here\n        // because these getter/setters might\n        // be called by child scopes via\n        // prototype inheritance.\n        var self = this;\n        Object.defineProperty(self, key, {\n          configurable: true,\n          enumerable: true,\n          get: function proxyGetter() {\n            return self._data[key];\n          },\n          set: function proxySetter(val) {\n            self._data[key] = val;\n          }\n        });\n      }\n    };\n\n    /**\n     * Unproxy a property.\n     *\n     * @param {String} key\n     */\n\n    Vue.prototype._unproxy = function (key) {\n      if (!isReserved(key)) {\n        delete this[key];\n      }\n    };\n\n    /**\n     * Force update on every watcher in scope.\n     */\n\n    Vue.prototype._digest = function () {\n      for (var i = 0, l = this._watchers.length; i < l; i++) {\n        this._watchers[i].update(true); // shallow updates\n      }\n    };\n\n    /**\n     * Setup computed properties. They are essentially\n     * special getter/setters\n     */\n\n    function noop() {}\n    Vue.prototype._initComputed = function () {\n      var computed = this.$options.computed;\n      if (computed) {\n        for (var key in computed) {\n          var userDef = computed[key];\n          var def = {\n            enumerable: true,\n            configurable: true\n          };\n          if (typeof userDef === 'function') {\n            def.get = makeComputedGetter(userDef, this);\n            def.set = noop;\n          } else {\n            def.get = userDef.get ? userDef.cache !== false ? makeComputedGetter(userDef.get, this) : bind$1(userDef.get, this) : noop;\n            def.set = userDef.set ? bind$1(userDef.set, this) : noop;\n          }\n          Object.defineProperty(this, key, def);\n        }\n      }\n    };\n\n    function makeComputedGetter(getter, owner) {\n      var watcher = new Watcher(owner, getter, null, {\n        lazy: true\n      });\n      return function computedGetter() {\n        if (watcher.dirty) {\n          watcher.evaluate();\n        }\n        if (Dep.target) {\n          watcher.depend();\n        }\n        return watcher.value;\n      };\n    }\n\n    /**\n     * Setup instance methods. Methods must be bound to the\n     * instance since they might be passed down as a prop to\n     * child components.\n     */\n\n    Vue.prototype._initMethods = function () {\n      var methods = this.$options.methods;\n      if (methods) {\n        for (var key in methods) {\n          this[key] = bind$1(methods[key], this);\n        }\n      }\n    };\n\n    /**\n     * Initialize meta information like $index, $key & $value.\n     */\n\n    Vue.prototype._initMeta = function () {\n      var metas = this.$options._meta;\n      if (metas) {\n        for (var key in metas) {\n          defineReactive(this, key, metas[key]);\n        }\n      }\n    };\n  }\n\n  var eventRE = /^v-on:|^@/;\n\n  function eventsMixin (Vue) {\n\n    /**\n     * Setup the instance's option events & watchers.\n     * If the value is a string, we pull it from the\n     * instance's methods by name.\n     */\n\n    Vue.prototype._initEvents = function () {\n      var options = this.$options;\n      if (options._asComponent) {\n        registerComponentEvents(this, options.el);\n      }\n      registerCallbacks(this, '$on', options.events);\n      registerCallbacks(this, '$watch', options.watch);\n    };\n\n    /**\n     * Register v-on events on a child component\n     *\n     * @param {Vue} vm\n     * @param {Element} el\n     */\n\n    function registerComponentEvents(vm, el) {\n      var attrs = el.attributes;\n      var name, handler;\n      for (var i = 0, l = attrs.length; i < l; i++) {\n        name = attrs[i].name;\n        if (eventRE.test(name)) {\n          name = name.replace(eventRE, '');\n          handler = (vm._scope || vm._context).$eval(attrs[i].value, true);\n          vm.$on(name.replace(eventRE), handler);\n        }\n      }\n    }\n\n    /**\n     * Register callbacks for option events and watchers.\n     *\n     * @param {Vue} vm\n     * @param {String} action\n     * @param {Object} hash\n     */\n\n    function registerCallbacks(vm, action, hash) {\n      if (!hash) return;\n      var handlers, key, i, j;\n      for (key in hash) {\n        handlers = hash[key];\n        if (isArray(handlers)) {\n          for (i = 0, j = handlers.length; i < j; i++) {\n            register(vm, action, key, handlers[i]);\n          }\n        } else {\n          register(vm, action, key, handlers);\n        }\n      }\n    }\n\n    /**\n     * Helper to register an event/watch callback.\n     *\n     * @param {Vue} vm\n     * @param {String} action\n     * @param {String} key\n     * @param {Function|String|Object} handler\n     * @param {Object} [options]\n     */\n\n    function register(vm, action, key, handler, options) {\n      var type = typeof handler;\n      if (type === 'function') {\n        vm[action](key, handler, options);\n      } else if (type === 'string') {\n        var methods = vm.$options.methods;\n        var method = methods && methods[handler];\n        if (method) {\n          vm[action](key, method, options);\n        } else {\n          'development' !== 'production' && warn('Unknown method: \"' + handler + '\" when ' + 'registering callback for ' + action + ': \"' + key + '\".');\n        }\n      } else if (handler && type === 'object') {\n        register(vm, action, key, handler.handler, handler);\n      }\n    }\n\n    /**\n     * Setup recursive attached/detached calls\n     */\n\n    Vue.prototype._initDOMHooks = function () {\n      this.$on('hook:attached', onAttached);\n      this.$on('hook:detached', onDetached);\n    };\n\n    /**\n     * Callback to recursively call attached hook on children\n     */\n\n    function onAttached() {\n      if (!this._isAttached) {\n        this._isAttached = true;\n        this.$children.forEach(callAttach);\n      }\n    }\n\n    /**\n     * Iterator to call attached hook\n     *\n     * @param {Vue} child\n     */\n\n    function callAttach(child) {\n      if (!child._isAttached && inDoc(child.$el)) {\n        child._callHook('attached');\n      }\n    }\n\n    /**\n     * Callback to recursively call detached hook on children\n     */\n\n    function onDetached() {\n      if (this._isAttached) {\n        this._isAttached = false;\n        this.$children.forEach(callDetach);\n      }\n    }\n\n    /**\n     * Iterator to call detached hook\n     *\n     * @param {Vue} child\n     */\n\n    function callDetach(child) {\n      if (child._isAttached && !inDoc(child.$el)) {\n        child._callHook('detached');\n      }\n    }\n\n    /**\n     * Trigger all handlers for a hook\n     *\n     * @param {String} hook\n     */\n\n    Vue.prototype._callHook = function (hook) {\n      var handlers = this.$options[hook];\n      if (handlers) {\n        for (var i = 0, j = handlers.length; i < j; i++) {\n          handlers[i].call(this);\n        }\n      }\n      this.$emit('hook:' + hook);\n    };\n  }\n\n  function noop() {}\n\n  /**\n   * A directive links a DOM element with a piece of data,\n   * which is the result of evaluating an expression.\n   * It registers a watcher with the expression and calls\n   * the DOM update function when a change is triggered.\n   *\n   * @param {String} name\n   * @param {Node} el\n   * @param {Vue} vm\n   * @param {Object} descriptor\n   *                 - {String} name\n   *                 - {Object} def\n   *                 - {String} expression\n   *                 - {Array<Object>} [filters]\n   *                 - {Boolean} literal\n   *                 - {String} attr\n   *                 - {String} raw\n   * @param {Object} def - directive definition object\n   * @param {Vue} [host] - transclusion host component\n   * @param {Object} [scope] - v-for scope\n   * @param {Fragment} [frag] - owner fragment\n   * @constructor\n   */\n  function Directive(descriptor, vm, el, host, scope, frag) {\n    this.vm = vm;\n    this.el = el;\n    // copy descriptor properties\n    this.descriptor = descriptor;\n    this.name = descriptor.name;\n    this.expression = descriptor.expression;\n    this.arg = descriptor.arg;\n    this.modifiers = descriptor.modifiers;\n    this.filters = descriptor.filters;\n    this.literal = this.modifiers && this.modifiers.literal;\n    // private\n    this._locked = false;\n    this._bound = false;\n    this._listeners = null;\n    // link context\n    this._host = host;\n    this._scope = scope;\n    this._frag = frag;\n    // store directives on node in dev mode\n    if ('development' !== 'production' && this.el) {\n      this.el._vue_directives = this.el._vue_directives || [];\n      this.el._vue_directives.push(this);\n    }\n  }\n\n  /**\n   * Initialize the directive, mixin definition properties,\n   * setup the watcher, call definition bind() and update()\n   * if present.\n   *\n   * @param {Object} def\n   */\n\n  Directive.prototype._bind = function () {\n    var name = this.name;\n    var descriptor = this.descriptor;\n\n    // remove attribute\n    if ((name !== 'cloak' || this.vm._isCompiled) && this.el && this.el.removeAttribute) {\n      var attr = descriptor.attr || 'v-' + name;\n      this.el.removeAttribute(attr);\n    }\n\n    // copy def properties\n    var def = descriptor.def;\n    if (typeof def === 'function') {\n      this.update = def;\n    } else {\n      extend(this, def);\n    }\n\n    // setup directive params\n    this._setupParams();\n\n    // initial bind\n    if (this.bind) {\n      this.bind();\n    }\n\n    if (this.literal) {\n      this.update && this.update(descriptor.raw);\n    } else if ((this.expression || this.modifiers) && (this.update || this.twoWay) && !this._checkStatement()) {\n      // wrapped updater for context\n      var dir = this;\n      if (this.update) {\n        this._update = function (val, oldVal) {\n          if (!dir._locked) {\n            dir.update(val, oldVal);\n          }\n        };\n      } else {\n        this._update = noop;\n      }\n      var preProcess = this._preProcess ? bind$1(this._preProcess, this) : null;\n      var postProcess = this._postProcess ? bind$1(this._postProcess, this) : null;\n      var watcher = this._watcher = new Watcher(this.vm, this.expression, this._update, // callback\n      {\n        filters: this.filters,\n        twoWay: this.twoWay,\n        deep: this.deep,\n        preProcess: preProcess,\n        postProcess: postProcess,\n        scope: this._scope\n      });\n      // v-model with inital inline value need to sync back to\n      // model instead of update to DOM on init. They would\n      // set the afterBind hook to indicate that.\n      if (this.afterBind) {\n        this.afterBind();\n      } else if (this.update) {\n        this.update(watcher.value);\n      }\n    }\n    this._bound = true;\n  };\n\n  /**\n   * Setup all param attributes, e.g. track-by,\n   * transition-mode, etc...\n   */\n\n  Directive.prototype._setupParams = function () {\n    if (!this.params) {\n      return;\n    }\n    var params = this.params;\n    // swap the params array with a fresh object.\n    this.params = Object.create(null);\n    var i = params.length;\n    var key, val, mappedKey;\n    while (i--) {\n      key = params[i];\n      mappedKey = camelize(key);\n      val = getBindAttr(this.el, key);\n      if (val != null) {\n        // dynamic\n        this._setupParamWatcher(mappedKey, val);\n      } else {\n        // static\n        val = getAttr(this.el, key);\n        if (val != null) {\n          this.params[mappedKey] = val === '' ? true : val;\n        }\n      }\n    }\n  };\n\n  /**\n   * Setup a watcher for a dynamic param.\n   *\n   * @param {String} key\n   * @param {String} expression\n   */\n\n  Directive.prototype._setupParamWatcher = function (key, expression) {\n    var self = this;\n    var called = false;\n    var unwatch = (this._scope || this.vm).$watch(expression, function (val, oldVal) {\n      self.params[key] = val;\n      // since we are in immediate mode,\n      // only call the param change callbacks if this is not the first update.\n      if (called) {\n        var cb = self.paramWatchers && self.paramWatchers[key];\n        if (cb) {\n          cb.call(self, val, oldVal);\n        }\n      } else {\n        called = true;\n      }\n    }, {\n      immediate: true\n    });(this._paramUnwatchFns || (this._paramUnwatchFns = [])).push(unwatch);\n  };\n\n  /**\n   * Check if the directive is a function caller\n   * and if the expression is a callable one. If both true,\n   * we wrap up the expression and use it as the event\n   * handler.\n   *\n   * e.g. on-click=\"a++\"\n   *\n   * @return {Boolean}\n   */\n\n  Directive.prototype._checkStatement = function () {\n    var expression = this.expression;\n    if (expression && this.acceptStatement && !isSimplePath(expression)) {\n      var fn = parseExpression(expression).get;\n      var scope = this._scope || this.vm;\n      var handler = function handler(e) {\n        scope.$event = e;\n        fn.call(scope, scope);\n        scope.$event = null;\n      };\n      if (this.filters) {\n        handler = scope._applyFilters(handler, null, this.filters);\n      }\n      this.update(handler);\n      return true;\n    }\n  };\n\n  /**\n   * Set the corresponding value with the setter.\n   * This should only be used in two-way directives\n   * e.g. v-model.\n   *\n   * @param {*} value\n   * @public\n   */\n\n  Directive.prototype.set = function (value) {\n    /* istanbul ignore else */\n    if (this.twoWay) {\n      this._withLock(function () {\n        this._watcher.set(value);\n      });\n    } else if ('development' !== 'production') {\n      warn('Directive.set() can only be used inside twoWay' + 'directives.');\n    }\n  };\n\n  /**\n   * Execute a function while preventing that function from\n   * triggering updates on this directive instance.\n   *\n   * @param {Function} fn\n   */\n\n  Directive.prototype._withLock = function (fn) {\n    var self = this;\n    self._locked = true;\n    fn.call(self);\n    nextTick(function () {\n      self._locked = false;\n    });\n  };\n\n  /**\n   * Convenience method that attaches a DOM event listener\n   * to the directive element and autometically tears it down\n   * during unbind.\n   *\n   * @param {String} event\n   * @param {Function} handler\n   */\n\n  Directive.prototype.on = function (event, handler) {\n    on$1(this.el, event, handler);(this._listeners || (this._listeners = [])).push([event, handler]);\n  };\n\n  /**\n   * Teardown the watcher and call unbind.\n   */\n\n  Directive.prototype._teardown = function () {\n    if (this._bound) {\n      this._bound = false;\n      if (this.unbind) {\n        this.unbind();\n      }\n      if (this._watcher) {\n        this._watcher.teardown();\n      }\n      var listeners = this._listeners;\n      var i;\n      if (listeners) {\n        i = listeners.length;\n        while (i--) {\n          off(this.el, listeners[i][0], listeners[i][1]);\n        }\n      }\n      var unwatchFns = this._paramUnwatchFns;\n      if (unwatchFns) {\n        i = unwatchFns.length;\n        while (i--) {\n          unwatchFns[i]();\n        }\n      }\n      if ('development' !== 'production' && this.el) {\n        this.el._vue_directives.$remove(this);\n      }\n      this.vm = this.el = this._watcher = this._listeners = null;\n    }\n  };\n\n  function lifecycleMixin (Vue) {\n\n    /**\n     * Update v-ref for component.\n     *\n     * @param {Boolean} remove\n     */\n\n    Vue.prototype._updateRef = function (remove) {\n      var ref = this.$options._ref;\n      if (ref) {\n        var refs = (this._scope || this._context).$refs;\n        if (remove) {\n          if (refs[ref] === this) {\n            refs[ref] = null;\n          }\n        } else {\n          refs[ref] = this;\n        }\n      }\n    };\n\n    /**\n     * Transclude, compile and link element.\n     *\n     * If a pre-compiled linker is available, that means the\n     * passed in element will be pre-transcluded and compiled\n     * as well - all we need to do is to call the linker.\n     *\n     * Otherwise we need to call transclude/compile/link here.\n     *\n     * @param {Element} el\n     * @return {Element}\n     */\n\n    Vue.prototype._compile = function (el) {\n      var options = this.$options;\n\n      // transclude and init element\n      // transclude can potentially replace original\n      // so we need to keep reference; this step also injects\n      // the template and caches the original attributes\n      // on the container node and replacer node.\n      var original = el;\n      el = transclude(el, options);\n      this._initElement(el);\n\n      // root is always compiled per-instance, because\n      // container attrs and props can be different every time.\n      var contextOptions = this._context && this._context.$options;\n      var rootLinker = compileRoot(el, options, contextOptions);\n\n      // compile and link the rest\n      var contentLinkFn;\n      var ctor = this.constructor;\n      // component compilation can be cached\n      // as long as it's not using inline-template\n      if (options._linkerCachable) {\n        contentLinkFn = ctor.linker;\n        if (!contentLinkFn) {\n          contentLinkFn = ctor.linker = compile(el, options);\n        }\n      }\n\n      // link phase\n      // make sure to link root with prop scope!\n      var rootUnlinkFn = rootLinker(this, el, this._scope);\n      var contentUnlinkFn = contentLinkFn ? contentLinkFn(this, el) : compile(el, options)(this, el);\n\n      // register composite unlink function\n      // to be called during instance destruction\n      this._unlinkFn = function () {\n        rootUnlinkFn();\n        // passing destroying: true to avoid searching and\n        // splicing the directives\n        contentUnlinkFn(true);\n      };\n\n      // finally replace original\n      if (options.replace) {\n        replace(original, el);\n      }\n\n      this._isCompiled = true;\n      this._callHook('compiled');\n      return el;\n    };\n\n    /**\n     * Initialize instance element. Called in the public\n     * $mount() method.\n     *\n     * @param {Element} el\n     */\n\n    Vue.prototype._initElement = function (el) {\n      if (el instanceof DocumentFragment) {\n        this._isFragment = true;\n        this.$el = this._fragmentStart = el.firstChild;\n        this._fragmentEnd = el.lastChild;\n        // set persisted text anchors to empty\n        if (this._fragmentStart.nodeType === 3) {\n          this._fragmentStart.data = this._fragmentEnd.data = '';\n        }\n        this._fragment = el;\n      } else {\n        this.$el = el;\n      }\n      this.$el.__vue__ = this;\n      this._callHook('beforeCompile');\n    };\n\n    /**\n     * Create and bind a directive to an element.\n     *\n     * @param {String} name - directive name\n     * @param {Node} node   - target node\n     * @param {Object} desc - parsed directive descriptor\n     * @param {Object} def  - directive definition object\n     * @param {Vue} [host] - transclusion host component\n     * @param {Object} [scope] - v-for scope\n     * @param {Fragment} [frag] - owner fragment\n     */\n\n    Vue.prototype._bindDir = function (descriptor, node, host, scope, frag) {\n      this._directives.push(new Directive(descriptor, this, node, host, scope, frag));\n    };\n\n    /**\n     * Teardown an instance, unobserves the data, unbind all the\n     * directives, turn off all the event listeners, etc.\n     *\n     * @param {Boolean} remove - whether to remove the DOM node.\n     * @param {Boolean} deferCleanup - if true, defer cleanup to\n     *                                 be called later\n     */\n\n    Vue.prototype._destroy = function (remove, deferCleanup) {\n      if (this._isBeingDestroyed) {\n        if (!deferCleanup) {\n          this._cleanup();\n        }\n        return;\n      }\n      this._callHook('beforeDestroy');\n      this._isBeingDestroyed = true;\n      var i;\n      // remove self from parent. only necessary\n      // if parent is not being destroyed as well.\n      var parent = this.$parent;\n      if (parent && !parent._isBeingDestroyed) {\n        parent.$children.$remove(this);\n        // unregister ref (remove: true)\n        this._updateRef(true);\n      }\n      // destroy all children.\n      i = this.$children.length;\n      while (i--) {\n        this.$children[i].$destroy();\n      }\n      // teardown props\n      if (this._propsUnlinkFn) {\n        this._propsUnlinkFn();\n      }\n      // teardown all directives. this also tearsdown all\n      // directive-owned watchers.\n      if (this._unlinkFn) {\n        this._unlinkFn();\n      }\n      i = this._watchers.length;\n      while (i--) {\n        this._watchers[i].teardown();\n      }\n      // remove reference to self on $el\n      if (this.$el) {\n        this.$el.__vue__ = null;\n      }\n      // remove DOM element\n      var self = this;\n      if (remove && this.$el) {\n        this.$remove(function () {\n          self._cleanup();\n        });\n      } else if (!deferCleanup) {\n        this._cleanup();\n      }\n    };\n\n    /**\n     * Clean up to ensure garbage collection.\n     * This is called after the leave transition if there\n     * is any.\n     */\n\n    Vue.prototype._cleanup = function () {\n      if (this._isDestroyed) {\n        return;\n      }\n      // remove self from owner fragment\n      // do it in cleanup so that we can call $destroy with\n      // defer right when a fragment is about to be removed.\n      if (this._frag) {\n        this._frag.children.$remove(this);\n      }\n      // remove reference from data ob\n      // frozen object may not have observer.\n      if (this._data.__ob__) {\n        this._data.__ob__.removeVm(this);\n      }\n      // Clean up references to private properties and other\n      // instances. preserve reference to _data so that proxy\n      // accessors still work. The only potential side effect\n      // here is that mutating the instance after it's destroyed\n      // may affect the state of other components that are still\n      // observing the same object, but that seems to be a\n      // reasonable responsibility for the user rather than\n      // always throwing an error on them.\n      this.$el = this.$parent = this.$root = this.$children = this._watchers = this._context = this._scope = this._directives = null;\n      // call the last hook...\n      this._isDestroyed = true;\n      this._callHook('destroyed');\n      // turn off all instance listeners.\n      this.$off();\n    };\n  }\n\n  function miscMixin (Vue) {\n\n    /**\n     * Apply a list of filter (descriptors) to a value.\n     * Using plain for loops here because this will be called in\n     * the getter of any watcher with filters so it is very\n     * performance sensitive.\n     *\n     * @param {*} value\n     * @param {*} [oldValue]\n     * @param {Array} filters\n     * @param {Boolean} write\n     * @return {*}\n     */\n\n    Vue.prototype._applyFilters = function (value, oldValue, filters, write) {\n      var filter, fn, args, arg, offset, i, l, j, k;\n      for (i = 0, l = filters.length; i < l; i++) {\n        filter = filters[i];\n        fn = resolveAsset(this.$options, 'filters', filter.name);\n        if ('development' !== 'production') {\n          assertAsset(fn, 'filter', filter.name);\n        }\n        if (!fn) continue;\n        fn = write ? fn.write : fn.read || fn;\n        if (typeof fn !== 'function') continue;\n        args = write ? [value, oldValue] : [value];\n        offset = write ? 2 : 1;\n        if (filter.args) {\n          for (j = 0, k = filter.args.length; j < k; j++) {\n            arg = filter.args[j];\n            args[j + offset] = arg.dynamic ? this.$get(arg.value) : arg.value;\n          }\n        }\n        value = fn.apply(this, args);\n      }\n      return value;\n    };\n\n    /**\n     * Resolve a component, depending on whether the component\n     * is defined normally or using an async factory function.\n     * Resolves synchronously if already resolved, otherwise\n     * resolves asynchronously and caches the resolved\n     * constructor on the factory.\n     *\n     * @param {String} id\n     * @param {Function} cb\n     */\n\n    Vue.prototype._resolveComponent = function (id, cb) {\n      var factory = resolveAsset(this.$options, 'components', id);\n      if ('development' !== 'production') {\n        assertAsset(factory, 'component', id);\n      }\n      if (!factory) {\n        return;\n      }\n      // async component factory\n      if (!factory.options) {\n        if (factory.resolved) {\n          // cached\n          cb(factory.resolved);\n        } else if (factory.requested) {\n          // pool callbacks\n          factory.pendingCallbacks.push(cb);\n        } else {\n          factory.requested = true;\n          var cbs = factory.pendingCallbacks = [cb];\n          factory(function resolve(res) {\n            if (isPlainObject(res)) {\n              res = Vue.extend(res);\n            }\n            // cache resolved\n            factory.resolved = res;\n            // invoke callbacks\n            for (var i = 0, l = cbs.length; i < l; i++) {\n              cbs[i](res);\n            }\n          }, function reject(reason) {\n            'development' !== 'production' && warn('Failed to resolve async component: ' + id + '. ' + (reason ? '\\nReason: ' + reason : ''));\n          });\n        }\n      } else {\n        // normal component\n        cb(factory);\n      }\n    };\n  }\n\n  function globalAPI (Vue) {\n\n    /**\n     * Expose useful internals\n     */\n\n    Vue.util = util;\n    Vue.config = config;\n    Vue.set = set;\n    Vue['delete'] = del;\n    Vue.nextTick = nextTick;\n\n    /**\n     * The following are exposed for advanced usage / plugins\n     */\n\n    Vue.compiler = compiler;\n    Vue.FragmentFactory = FragmentFactory;\n    Vue.internalDirectives = internalDirectives;\n    Vue.parsers = {\n      path: path,\n      text: text$1,\n      template: template,\n      directive: directive,\n      expression: expression\n    };\n\n    /**\n     * Each instance constructor, including Vue, has a unique\n     * cid. This enables us to create wrapped \"child\n     * constructors\" for prototypal inheritance and cache them.\n     */\n\n    Vue.cid = 0;\n    var cid = 1;\n\n    /**\n     * Class inheritance\n     *\n     * @param {Object} extendOptions\n     */\n\n    Vue.extend = function (extendOptions) {\n      extendOptions = extendOptions || {};\n      var Super = this;\n      var isFirstExtend = Super.cid === 0;\n      if (isFirstExtend && extendOptions._Ctor) {\n        return extendOptions._Ctor;\n      }\n      var name = extendOptions.name || Super.options.name;\n      var Sub = createClass(name || 'VueComponent');\n      Sub.prototype = Object.create(Super.prototype);\n      Sub.prototype.constructor = Sub;\n      Sub.cid = cid++;\n      Sub.options = mergeOptions(Super.options, extendOptions);\n      Sub['super'] = Super;\n      // allow further extension\n      Sub.extend = Super.extend;\n      // create asset registers, so extended classes\n      // can have their private assets too.\n      config._assetTypes.forEach(function (type) {\n        Sub[type] = Super[type];\n      });\n      // enable recursive self-lookup\n      if (name) {\n        Sub.options.components[name] = Sub;\n      }\n      // cache constructor\n      if (isFirstExtend) {\n        extendOptions._Ctor = Sub;\n      }\n      return Sub;\n    };\n\n    /**\n     * A function that returns a sub-class constructor with the\n     * given name. This gives us much nicer output when\n     * logging instances in the console.\n     *\n     * @param {String} name\n     * @return {Function}\n     */\n\n    function createClass(name) {\n      return new Function('return function ' + classify(name) + ' (options) { this._init(options) }')();\n    }\n\n    /**\n     * Plugin system\n     *\n     * @param {Object} plugin\n     */\n\n    Vue.use = function (plugin) {\n      /* istanbul ignore if */\n      if (plugin.installed) {\n        return;\n      }\n      // additional parameters\n      var args = toArray(arguments, 1);\n      args.unshift(this);\n      if (typeof plugin.install === 'function') {\n        plugin.install.apply(plugin, args);\n      } else {\n        plugin.apply(null, args);\n      }\n      plugin.installed = true;\n      return this;\n    };\n\n    /**\n     * Apply a global mixin by merging it into the default\n     * options.\n     */\n\n    Vue.mixin = function (mixin) {\n      Vue.options = mergeOptions(Vue.options, mixin);\n    };\n\n    /**\n     * Create asset registration methods with the following\n     * signature:\n     *\n     * @param {String} id\n     * @param {*} definition\n     */\n\n    config._assetTypes.forEach(function (type) {\n      Vue[type] = function (id, definition) {\n        if (!definition) {\n          return this.options[type + 's'][id];\n        } else {\n          /* istanbul ignore if */\n          if ('development' !== 'production') {\n            if (type === 'component' && commonTagRE.test(id)) {\n              warn('Do not use built-in HTML elements as component ' + 'id: ' + id);\n            }\n          }\n          if (type === 'component' && isPlainObject(definition)) {\n            definition.name = id;\n            definition = Vue.extend(definition);\n          }\n          this.options[type + 's'][id] = definition;\n          return definition;\n        }\n      };\n    });\n  }\n\n  var filterRE = /[^|]\\|[^|]/;\n\n  function dataAPI (Vue) {\n\n    /**\n     * Get the value from an expression on this vm.\n     *\n     * @param {String} exp\n     * @param {Boolean} [asStatement]\n     * @return {*}\n     */\n\n    Vue.prototype.$get = function (exp, asStatement) {\n      var res = parseExpression(exp);\n      if (res) {\n        if (asStatement && !isSimplePath(exp)) {\n          var self = this;\n          return function statementHandler() {\n            res.get.call(self, self);\n          };\n        } else {\n          try {\n            return res.get.call(this, this);\n          } catch (e) {}\n        }\n      }\n    };\n\n    /**\n     * Set the value from an expression on this vm.\n     * The expression must be a valid left-hand\n     * expression in an assignment.\n     *\n     * @param {String} exp\n     * @param {*} val\n     */\n\n    Vue.prototype.$set = function (exp, val) {\n      var res = parseExpression(exp, true);\n      if (res && res.set) {\n        res.set.call(this, this, val);\n      }\n    };\n\n    /**\n     * Delete a property on the VM\n     *\n     * @param {String} key\n     */\n\n    Vue.prototype.$delete = function (key) {\n      del(this._data, key);\n    };\n\n    /**\n     * Watch an expression, trigger callback when its\n     * value changes.\n     *\n     * @param {String|Function} expOrFn\n     * @param {Function} cb\n     * @param {Object} [options]\n     *                 - {Boolean} deep\n     *                 - {Boolean} immediate\n     * @return {Function} - unwatchFn\n     */\n\n    Vue.prototype.$watch = function (expOrFn, cb, options) {\n      var vm = this;\n      var parsed;\n      if (typeof expOrFn === 'string') {\n        parsed = parseDirective(expOrFn);\n        expOrFn = parsed.expression;\n      }\n      var watcher = new Watcher(vm, expOrFn, cb, {\n        deep: options && options.deep,\n        filters: parsed && parsed.filters\n      });\n      if (options && options.immediate) {\n        cb.call(vm, watcher.value);\n      }\n      return function unwatchFn() {\n        watcher.teardown();\n      };\n    };\n\n    /**\n     * Evaluate a text directive, including filters.\n     *\n     * @param {String} text\n     * @param {Boolean} [asStatement]\n     * @return {String}\n     */\n\n    Vue.prototype.$eval = function (text, asStatement) {\n      // check for filters.\n      if (filterRE.test(text)) {\n        var dir = parseDirective(text);\n        // the filter regex check might give false positive\n        // for pipes inside strings, so it's possible that\n        // we don't get any filters here\n        var val = this.$get(dir.expression, asStatement);\n        return dir.filters ? this._applyFilters(val, null, dir.filters) : val;\n      } else {\n        // no filter\n        return this.$get(text, asStatement);\n      }\n    };\n\n    /**\n     * Interpolate a piece of template text.\n     *\n     * @param {String} text\n     * @return {String}\n     */\n\n    Vue.prototype.$interpolate = function (text) {\n      var tokens = parseText(text);\n      var vm = this;\n      if (tokens) {\n        if (tokens.length === 1) {\n          return vm.$eval(tokens[0].value) + '';\n        } else {\n          return tokens.map(function (token) {\n            return token.tag ? vm.$eval(token.value) : token.value;\n          }).join('');\n        }\n      } else {\n        return text;\n      }\n    };\n\n    /**\n     * Log instance data as a plain JS object\n     * so that it is easier to inspect in console.\n     * This method assumes console is available.\n     *\n     * @param {String} [path]\n     */\n\n    Vue.prototype.$log = function (path) {\n      var data = path ? getPath(this._data, path) : this._data;\n      if (data) {\n        data = clean(data);\n      }\n      // include computed fields\n      if (!path) {\n        for (var key in this.$options.computed) {\n          data[key] = clean(this[key]);\n        }\n      }\n      console.log(data);\n    };\n\n    /**\n     * \"clean\" a getter/setter converted object into a plain\n     * object copy.\n     *\n     * @param {Object} - obj\n     * @return {Object}\n     */\n\n    function clean(obj) {\n      return JSON.parse(JSON.stringify(obj));\n    }\n  }\n\n  function domAPI (Vue) {\n\n    /**\n     * Convenience on-instance nextTick. The callback is\n     * auto-bound to the instance, and this avoids component\n     * modules having to rely on the global Vue.\n     *\n     * @param {Function} fn\n     */\n\n    Vue.prototype.$nextTick = function (fn) {\n      nextTick(fn, this);\n    };\n\n    /**\n     * Append instance to target\n     *\n     * @param {Node} target\n     * @param {Function} [cb]\n     * @param {Boolean} [withTransition] - defaults to true\n     */\n\n    Vue.prototype.$appendTo = function (target, cb, withTransition) {\n      return insert(this, target, cb, withTransition, append, appendWithTransition);\n    };\n\n    /**\n     * Prepend instance to target\n     *\n     * @param {Node} target\n     * @param {Function} [cb]\n     * @param {Boolean} [withTransition] - defaults to true\n     */\n\n    Vue.prototype.$prependTo = function (target, cb, withTransition) {\n      target = query(target);\n      if (target.hasChildNodes()) {\n        this.$before(target.firstChild, cb, withTransition);\n      } else {\n        this.$appendTo(target, cb, withTransition);\n      }\n      return this;\n    };\n\n    /**\n     * Insert instance before target\n     *\n     * @param {Node} target\n     * @param {Function} [cb]\n     * @param {Boolean} [withTransition] - defaults to true\n     */\n\n    Vue.prototype.$before = function (target, cb, withTransition) {\n      return insert(this, target, cb, withTransition, beforeWithCb, beforeWithTransition);\n    };\n\n    /**\n     * Insert instance after target\n     *\n     * @param {Node} target\n     * @param {Function} [cb]\n     * @param {Boolean} [withTransition] - defaults to true\n     */\n\n    Vue.prototype.$after = function (target, cb, withTransition) {\n      target = query(target);\n      if (target.nextSibling) {\n        this.$before(target.nextSibling, cb, withTransition);\n      } else {\n        this.$appendTo(target.parentNode, cb, withTransition);\n      }\n      return this;\n    };\n\n    /**\n     * Remove instance from DOM\n     *\n     * @param {Function} [cb]\n     * @param {Boolean} [withTransition] - defaults to true\n     */\n\n    Vue.prototype.$remove = function (cb, withTransition) {\n      if (!this.$el.parentNode) {\n        return cb && cb();\n      }\n      var inDocument = this._isAttached && inDoc(this.$el);\n      // if we are not in document, no need to check\n      // for transitions\n      if (!inDocument) withTransition = false;\n      var self = this;\n      var realCb = function realCb() {\n        if (inDocument) self._callHook('detached');\n        if (cb) cb();\n      };\n      if (this._isFragment) {\n        removeNodeRange(this._fragmentStart, this._fragmentEnd, this, this._fragment, realCb);\n      } else {\n        var op = withTransition === false ? removeWithCb : removeWithTransition;\n        op(this.$el, this, realCb);\n      }\n      return this;\n    };\n\n    /**\n     * Shared DOM insertion function.\n     *\n     * @param {Vue} vm\n     * @param {Element} target\n     * @param {Function} [cb]\n     * @param {Boolean} [withTransition]\n     * @param {Function} op1 - op for non-transition insert\n     * @param {Function} op2 - op for transition insert\n     * @return vm\n     */\n\n    function insert(vm, target, cb, withTransition, op1, op2) {\n      target = query(target);\n      var targetIsDetached = !inDoc(target);\n      var op = withTransition === false || targetIsDetached ? op1 : op2;\n      var shouldCallHook = !targetIsDetached && !vm._isAttached && !inDoc(vm.$el);\n      if (vm._isFragment) {\n        mapNodeRange(vm._fragmentStart, vm._fragmentEnd, function (node) {\n          op(node, target, vm);\n        });\n        cb && cb();\n      } else {\n        op(vm.$el, target, vm, cb);\n      }\n      if (shouldCallHook) {\n        vm._callHook('attached');\n      }\n      return vm;\n    }\n\n    /**\n     * Check for selectors\n     *\n     * @param {String|Element} el\n     */\n\n    function query(el) {\n      return typeof el === 'string' ? document.querySelector(el) : el;\n    }\n\n    /**\n     * Append operation that takes a callback.\n     *\n     * @param {Node} el\n     * @param {Node} target\n     * @param {Vue} vm - unused\n     * @param {Function} [cb]\n     */\n\n    function append(el, target, vm, cb) {\n      target.appendChild(el);\n      if (cb) cb();\n    }\n\n    /**\n     * InsertBefore operation that takes a callback.\n     *\n     * @param {Node} el\n     * @param {Node} target\n     * @param {Vue} vm - unused\n     * @param {Function} [cb]\n     */\n\n    function beforeWithCb(el, target, vm, cb) {\n      before(el, target);\n      if (cb) cb();\n    }\n\n    /**\n     * Remove operation that takes a callback.\n     *\n     * @param {Node} el\n     * @param {Vue} vm - unused\n     * @param {Function} [cb]\n     */\n\n    function removeWithCb(el, vm, cb) {\n      remove(el);\n      if (cb) cb();\n    }\n  }\n\n  function eventsAPI (Vue) {\n\n    /**\n     * Listen on the given `event` with `fn`.\n     *\n     * @param {String} event\n     * @param {Function} fn\n     */\n\n    Vue.prototype.$on = function (event, fn) {\n      (this._events[event] || (this._events[event] = [])).push(fn);\n      modifyListenerCount(this, event, 1);\n      return this;\n    };\n\n    /**\n     * Adds an `event` listener that will be invoked a single\n     * time then automatically removed.\n     *\n     * @param {String} event\n     * @param {Function} fn\n     */\n\n    Vue.prototype.$once = function (event, fn) {\n      var self = this;\n      function on() {\n        self.$off(event, on);\n        fn.apply(this, arguments);\n      }\n      on.fn = fn;\n      this.$on(event, on);\n      return this;\n    };\n\n    /**\n     * Remove the given callback for `event` or all\n     * registered callbacks.\n     *\n     * @param {String} event\n     * @param {Function} fn\n     */\n\n    Vue.prototype.$off = function (event, fn) {\n      var cbs;\n      // all\n      if (!arguments.length) {\n        if (this.$parent) {\n          for (event in this._events) {\n            cbs = this._events[event];\n            if (cbs) {\n              modifyListenerCount(this, event, -cbs.length);\n            }\n          }\n        }\n        this._events = {};\n        return this;\n      }\n      // specific event\n      cbs = this._events[event];\n      if (!cbs) {\n        return this;\n      }\n      if (arguments.length === 1) {\n        modifyListenerCount(this, event, -cbs.length);\n        this._events[event] = null;\n        return this;\n      }\n      // specific handler\n      var cb;\n      var i = cbs.length;\n      while (i--) {\n        cb = cbs[i];\n        if (cb === fn || cb.fn === fn) {\n          modifyListenerCount(this, event, -1);\n          cbs.splice(i, 1);\n          break;\n        }\n      }\n      return this;\n    };\n\n    /**\n     * Trigger an event on self.\n     *\n     * @param {String} event\n     * @return {Boolean} shouldPropagate\n     */\n\n    Vue.prototype.$emit = function (event) {\n      var cbs = this._events[event];\n      var shouldPropagate = !cbs;\n      if (cbs) {\n        cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n        var args = toArray(arguments, 1);\n        for (var i = 0, l = cbs.length; i < l; i++) {\n          var res = cbs[i].apply(this, args);\n          if (res === true) {\n            shouldPropagate = true;\n          }\n        }\n      }\n      return shouldPropagate;\n    };\n\n    /**\n     * Recursively broadcast an event to all children instances.\n     *\n     * @param {String} event\n     * @param {...*} additional arguments\n     */\n\n    Vue.prototype.$broadcast = function (event) {\n      // if no child has registered for this event,\n      // then there's no need to broadcast.\n      if (!this._eventsCount[event]) return;\n      var children = this.$children;\n      for (var i = 0, l = children.length; i < l; i++) {\n        var child = children[i];\n        var shouldPropagate = child.$emit.apply(child, arguments);\n        if (shouldPropagate) {\n          child.$broadcast.apply(child, arguments);\n        }\n      }\n      return this;\n    };\n\n    /**\n     * Recursively propagate an event up the parent chain.\n     *\n     * @param {String} event\n     * @param {...*} additional arguments\n     */\n\n    Vue.prototype.$dispatch = function () {\n      this.$emit.apply(this, arguments);\n      var parent = this.$parent;\n      while (parent) {\n        var shouldPropagate = parent.$emit.apply(parent, arguments);\n        parent = shouldPropagate ? parent.$parent : null;\n      }\n      return this;\n    };\n\n    /**\n     * Modify the listener counts on all parents.\n     * This bookkeeping allows $broadcast to return early when\n     * no child has listened to a certain event.\n     *\n     * @param {Vue} vm\n     * @param {String} event\n     * @param {Number} count\n     */\n\n    var hookRE = /^hook:/;\n    function modifyListenerCount(vm, event, count) {\n      var parent = vm.$parent;\n      // hooks do not get broadcasted so no need\n      // to do bookkeeping for them\n      if (!parent || !count || hookRE.test(event)) return;\n      while (parent) {\n        parent._eventsCount[event] = (parent._eventsCount[event] || 0) + count;\n        parent = parent.$parent;\n      }\n    }\n  }\n\n  function lifecycleAPI (Vue) {\n\n    /**\n     * Set instance target element and kick off the compilation\n     * process. The passed in `el` can be a selector string, an\n     * existing Element, or a DocumentFragment (for block\n     * instances).\n     *\n     * @param {Element|DocumentFragment|string} el\n     * @public\n     */\n\n    Vue.prototype.$mount = function (el) {\n      if (this._isCompiled) {\n        'development' !== 'production' && warn('$mount() should be called only once.');\n        return;\n      }\n      el = query(el);\n      if (!el) {\n        el = document.createElement('div');\n      }\n      this._compile(el);\n      this._initDOMHooks();\n      if (inDoc(this.$el)) {\n        this._callHook('attached');\n        ready.call(this);\n      } else {\n        this.$once('hook:attached', ready);\n      }\n      return this;\n    };\n\n    /**\n     * Mark an instance as ready.\n     */\n\n    function ready() {\n      this._isAttached = true;\n      this._isReady = true;\n      this._callHook('ready');\n    }\n\n    /**\n     * Teardown the instance, simply delegate to the internal\n     * _destroy.\n     */\n\n    Vue.prototype.$destroy = function (remove, deferCleanup) {\n      this._destroy(remove, deferCleanup);\n    };\n\n    /**\n     * Partially compile a piece of DOM and return a\n     * decompile function.\n     *\n     * @param {Element|DocumentFragment} el\n     * @param {Vue} [host]\n     * @return {Function}\n     */\n\n    Vue.prototype.$compile = function (el, host, scope, frag) {\n      return compile(el, this.$options, true)(this, el, host, scope, frag);\n    };\n  }\n\n  /**\n   * The exposed Vue constructor.\n   *\n   * API conventions:\n   * - public API methods/properties are prefixed with `$`\n   * - internal methods/properties are prefixed with `_`\n   * - non-prefixed properties are assumed to be proxied user\n   *   data.\n   *\n   * @constructor\n   * @param {Object} [options]\n   * @public\n   */\n\n  function Vue(options) {\n    this._init(options);\n  }\n\n  // install internals\n  initMixin(Vue);\n  stateMixin(Vue);\n  eventsMixin(Vue);\n  lifecycleMixin(Vue);\n  miscMixin(Vue);\n\n  // install APIs\n  globalAPI(Vue);\n  dataAPI(Vue);\n  domAPI(Vue);\n  eventsAPI(Vue);\n  lifecycleAPI(Vue);\n\n  var convertArray = vFor._postProcess;\n\n  /**\n   * Limit filter for arrays\n   *\n   * @param {Number} n\n   * @param {Number} offset (Decimal expected)\n   */\n\n  function limitBy(arr, n, offset) {\n    offset = offset ? parseInt(offset, 10) : 0;\n    return typeof n === 'number' ? arr.slice(offset, offset + n) : arr;\n  }\n\n  /**\n   * Filter filter for arrays\n   *\n   * @param {String} search\n   * @param {String} [delimiter]\n   * @param {String} ...dataKeys\n   */\n\n  function filterBy(arr, search, delimiter) {\n    arr = convertArray(arr);\n    if (search == null) {\n      return arr;\n    }\n    if (typeof search === 'function') {\n      return arr.filter(search);\n    }\n    // cast to lowercase string\n    search = ('' + search).toLowerCase();\n    // allow optional `in` delimiter\n    // because why not\n    var n = delimiter === 'in' ? 3 : 2;\n    // extract and flatten keys\n    var keys = toArray(arguments, n).reduce(function (prev, cur) {\n      return prev.concat(cur);\n    }, []);\n    var res = [];\n    var item, key, val, j;\n    for (var i = 0, l = arr.length; i < l; i++) {\n      item = arr[i];\n      val = item && item.$value || item;\n      j = keys.length;\n      if (j) {\n        while (j--) {\n          key = keys[j];\n          if (key === '$key' && contains(item.$key, search) || contains(getPath(val, key), search)) {\n            res.push(item);\n            break;\n          }\n        }\n      } else if (contains(item, search)) {\n        res.push(item);\n      }\n    }\n    return res;\n  }\n\n  /**\n   * Filter filter for arrays\n   *\n   * @param {String} sortKey\n   * @param {String} reverse\n   */\n\n  function orderBy(arr, sortKey, reverse) {\n    arr = convertArray(arr);\n    if (!sortKey) {\n      return arr;\n    }\n    var order = reverse && reverse < 0 ? -1 : 1;\n    // sort on a copy to avoid mutating original array\n    return arr.slice().sort(function (a, b) {\n      if (sortKey !== '$key') {\n        if (isObject(a) && '$value' in a) a = a.$value;\n        if (isObject(b) && '$value' in b) b = b.$value;\n      }\n      a = isObject(a) ? getPath(a, sortKey) : a;\n      b = isObject(b) ? getPath(b, sortKey) : b;\n      return a === b ? 0 : a > b ? order : -order;\n    });\n  }\n\n  /**\n   * String contain helper\n   *\n   * @param {*} val\n   * @param {String} search\n   */\n\n  function contains(val, search) {\n    var i;\n    if (isPlainObject(val)) {\n      var keys = Object.keys(val);\n      i = keys.length;\n      while (i--) {\n        if (contains(val[keys[i]], search)) {\n          return true;\n        }\n      }\n    } else if (isArray(val)) {\n      i = val.length;\n      while (i--) {\n        if (contains(val[i], search)) {\n          return true;\n        }\n      }\n    } else if (val != null) {\n      return val.toString().toLowerCase().indexOf(search) > -1;\n    }\n  }\n\n  var digitsRE = /(\\d{3})(?=\\d)/g;\n\n  // asset collections must be a plain object.\n  var filters = {\n\n    orderBy: orderBy,\n    filterBy: filterBy,\n    limitBy: limitBy,\n\n    /**\n     * Stringify value.\n     *\n     * @param {Number} indent\n     */\n\n    json: {\n      read: function read(value, indent) {\n        return typeof value === 'string' ? value : JSON.stringify(value, null, Number(indent) || 2);\n      },\n      write: function write(value) {\n        try {\n          return JSON.parse(value);\n        } catch (e) {\n          return value;\n        }\n      }\n    },\n\n    /**\n     * 'abc' => 'Abc'\n     */\n\n    capitalize: function capitalize(value) {\n      if (!value && value !== 0) return '';\n      value = value.toString();\n      return value.charAt(0).toUpperCase() + value.slice(1);\n    },\n\n    /**\n     * 'abc' => 'ABC'\n     */\n\n    uppercase: function uppercase(value) {\n      return value || value === 0 ? value.toString().toUpperCase() : '';\n    },\n\n    /**\n     * 'AbC' => 'abc'\n     */\n\n    lowercase: function lowercase(value) {\n      return value || value === 0 ? value.toString().toLowerCase() : '';\n    },\n\n    /**\n     * 12345 => $12,345.00\n     *\n     * @param {String} sign\n     */\n\n    currency: function currency(value, _currency) {\n      value = parseFloat(value);\n      if (!isFinite(value) || !value && value !== 0) return '';\n      _currency = _currency != null ? _currency : '$';\n      var stringified = Math.abs(value).toFixed(2);\n      var _int = stringified.slice(0, -3);\n      var i = _int.length % 3;\n      var head = i > 0 ? _int.slice(0, i) + (_int.length > 3 ? ',' : '') : '';\n      var _float = stringified.slice(-3);\n      var sign = value < 0 ? '-' : '';\n      return _currency + sign + head + _int.slice(i).replace(digitsRE, '$1,') + _float;\n    },\n\n    /**\n     * 'item' => 'items'\n     *\n     * @params\n     *  an array of strings corresponding to\n     *  the single, double, triple ... forms of the word to\n     *  be pluralized. When the number to be pluralized\n     *  exceeds the length of the args, it will use the last\n     *  entry in the array.\n     *\n     *  e.g. ['single', 'double', 'triple', 'multiple']\n     */\n\n    pluralize: function pluralize(value) {\n      var args = toArray(arguments, 1);\n      return args.length > 1 ? args[value % 10 - 1] || args[args.length - 1] : args[0] + (value === 1 ? '' : 's');\n    },\n\n    /**\n     * Debounce a handler function.\n     *\n     * @param {Function} handler\n     * @param {Number} delay = 300\n     * @return {Function}\n     */\n\n    debounce: function debounce(handler, delay) {\n      if (!handler) return;\n      if (!delay) {\n        delay = 300;\n      }\n      return _debounce(handler, delay);\n    }\n  };\n\n  var partial = {\n\n    priority: 1750,\n\n    params: ['name'],\n\n    // watch changes to name for dynamic partials\n    paramWatchers: {\n      name: function name(value) {\n        vIf.remove.call(this);\n        if (value) {\n          this.insert(value);\n        }\n      }\n    },\n\n    bind: function bind() {\n      this.anchor = createAnchor('v-partial');\n      replace(this.el, this.anchor);\n      this.insert(this.params.name);\n    },\n\n    insert: function insert(id) {\n      var partial = resolveAsset(this.vm.$options, 'partials', id);\n      if ('development' !== 'production') {\n        assertAsset(partial, 'partial', id);\n      }\n      if (partial) {\n        this.factory = new FragmentFactory(this.vm, partial);\n        vIf.insert.call(this);\n      }\n    },\n\n    unbind: function unbind() {\n      if (this.frag) {\n        this.frag.destroy();\n      }\n    }\n  };\n\n  // This is the elementDirective that handles <content>\n  // transclusions. It relies on the raw content of an\n  // instance being stored as `$options._content` during\n  // the transclude phase.\n\n  var slot = {\n\n    priority: 1750,\n\n    params: ['name'],\n\n    bind: function bind() {\n      var host = this.vm;\n      var raw = host.$options._content;\n      var content;\n      if (!raw) {\n        this.fallback();\n        return;\n      }\n      var context = host._context;\n      var slotName = this.params.name;\n      if (!slotName) {\n        // Default content\n        var self = this;\n        var compileDefaultContent = function compileDefaultContent() {\n          self.compile(extractFragment(raw.childNodes, raw, true), context, host);\n        };\n        if (!host._isCompiled) {\n          // defer until the end of instance compilation,\n          // because the default outlet must wait until all\n          // other possible outlets with selectors have picked\n          // out their contents.\n          host.$once('hook:compiled', compileDefaultContent);\n        } else {\n          compileDefaultContent();\n        }\n      } else {\n        var selector = '[slot=\"' + slotName + '\"]';\n        var nodes = raw.querySelectorAll(selector);\n        if (nodes.length) {\n          content = extractFragment(nodes, raw);\n          if (content.hasChildNodes()) {\n            this.compile(content, context, host);\n          } else {\n            this.fallback();\n          }\n        } else {\n          this.fallback();\n        }\n      }\n    },\n\n    fallback: function fallback() {\n      this.compile(extractContent(this.el, true), this.vm);\n    },\n\n    compile: function compile(content, context, host) {\n      if (content && context) {\n        var scope = host ? host._scope : this._scope;\n        this.unlink = context.$compile(content, host, scope, this._frag);\n      }\n      if (content) {\n        replace(this.el, content);\n      } else {\n        remove(this.el);\n      }\n    },\n\n    unbind: function unbind() {\n      if (this.unlink) {\n        this.unlink();\n      }\n    }\n  };\n\n  /**\n   * Extract qualified content nodes from a node list.\n   *\n   * @param {NodeList} nodes\n   * @param {Element} parent\n   * @param {Boolean} main\n   * @return {DocumentFragment}\n   */\n\n  function extractFragment(nodes, parent, main) {\n    var frag = document.createDocumentFragment();\n    for (var i = 0, l = nodes.length; i < l; i++) {\n      var node = nodes[i];\n      // if this is the main outlet, we want to skip all\n      // previously selected nodes;\n      // otherwise, we want to mark the node as selected.\n      // clone the node so the original raw content remains\n      // intact. this ensures proper re-compilation in cases\n      // where the outlet is inside a conditional block\n      if (main && !node.__v_selected) {\n        append(node);\n      } else if (!main && node.parentNode === parent) {\n        node.__v_selected = true;\n        append(node);\n      }\n    }\n    return frag;\n\n    function append(node) {\n      if (isTemplate(node) && !node.hasAttribute('v-if') && !node.hasAttribute('v-for')) {\n        node = parseTemplate(node);\n      }\n      node = cloneNode(node);\n      frag.appendChild(node);\n    }\n  }\n\n  var elementDirectives = {\n    slot: slot,\n    partial: partial\n  };\n\n  Vue.version = '1.0.10';\n\n  /**\n   * Vue and every constructor that extends Vue has an\n   * associated options object, which can be accessed during\n   * compilation steps as `this.constructor.options`.\n   *\n   * These can be seen as the default options of every\n   * Vue instance.\n   */\n\n  Vue.options = {\n    directives: publicDirectives,\n    elementDirectives: elementDirectives,\n    filters: filters,\n    transitions: {},\n    components: {},\n    partials: {},\n    replace: true\n  };\n\n  // devtools global hook\n  /* istanbul ignore if */\n  if ('development' !== 'production') {\n    if (inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__) {\n      window.__VUE_DEVTOOLS_GLOBAL_HOOK__.emit('init', Vue);\n    }\n  }\n\n  return Vue;\n\n}));","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/*!\n * Vue.js v1.0.10\n * (c) 2015 Evan You\n * Released under the MIT License.\n */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  global.Vue = factory();\n}(this, function () { 'use strict';\n\n  function set(obj, key, val) {\n    if (hasOwn(obj, key)) {\n      obj[key] = val;\n      return;\n    }\n    if (obj._isVue) {\n      set(obj._data, key, val);\n      return;\n    }\n    var ob = obj.__ob__;\n    if (!ob) {\n      obj[key] = val;\n      return;\n    }\n    ob.convert(key, val);\n    ob.dep.notify();\n    if (ob.vms) {\n      var i = ob.vms.length;\n      while (i--) {\n        var vm = ob.vms[i];\n        vm._proxy(key);\n        vm._digest();\n      }\n    }\n  }\n\n  /**\n   * Delete a property and trigger change if necessary.\n   *\n   * @param {Object} obj\n   * @param {String} key\n   */\n\n  function del(obj, key) {\n    if (!hasOwn(obj, key)) {\n      return;\n    }\n    delete obj[key];\n    var ob = obj.__ob__;\n    if (!ob) {\n      return;\n    }\n    ob.dep.notify();\n    if (ob.vms) {\n      var i = ob.vms.length;\n      while (i--) {\n        var vm = ob.vms[i];\n        vm._unproxy(key);\n        vm._digest();\n      }\n    }\n  }\n\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  /**\n   * Check whether the object has the property.\n   *\n   * @param {Object} obj\n   * @param {String} key\n   * @return {Boolean}\n   */\n\n  function hasOwn(obj, key) {\n    return hasOwnProperty.call(obj, key);\n  }\n\n  /**\n   * Check if an expression is a literal value.\n   *\n   * @param {String} exp\n   * @return {Boolean}\n   */\n\n  var literalValueRE = /^\\s?(true|false|[\\d\\.]+|'[^']*'|\"[^\"]*\")\\s?$/;\n\n  function isLiteral(exp) {\n    return literalValueRE.test(exp);\n  }\n\n  /**\n   * Check if a string starts with $ or _\n   *\n   * @param {String} str\n   * @return {Boolean}\n   */\n\n  function isReserved(str) {\n    var c = (str + '').charCodeAt(0);\n    return c === 0x24 || c === 0x5F;\n  }\n\n  /**\n   * Guard text output, make sure undefined outputs\n   * empty string\n   *\n   * @param {*} value\n   * @return {String}\n   */\n\n  function _toString(value) {\n    return value == null ? '' : value.toString();\n  }\n\n  /**\n   * Check and convert possible numeric strings to numbers\n   * before setting back to data\n   *\n   * @param {*} value\n   * @return {*|Number}\n   */\n\n  function toNumber(value) {\n    if (typeof value !== 'string') {\n      return value;\n    } else {\n      var parsed = Number(value);\n      return isNaN(parsed) ? value : parsed;\n    }\n  }\n\n  /**\n   * Convert string boolean literals into real booleans.\n   *\n   * @param {*} value\n   * @return {*|Boolean}\n   */\n\n  function toBoolean(value) {\n    return value === 'true' ? true : value === 'false' ? false : value;\n  }\n\n  /**\n   * Strip quotes from a string\n   *\n   * @param {String} str\n   * @return {String | false}\n   */\n\n  function stripQuotes(str) {\n    var a = str.charCodeAt(0);\n    var b = str.charCodeAt(str.length - 1);\n    return a === b && (a === 0x22 || a === 0x27) ? str.slice(1, -1) : str;\n  }\n\n  /**\n   * Camelize a hyphen-delmited string.\n   *\n   * @param {String} str\n   * @return {String}\n   */\n\n  var camelizeRE = /-(\\w)/g;\n\n  function camelize(str) {\n    return str.replace(camelizeRE, toUpper);\n  }\n\n  function toUpper(_, c) {\n    return c ? c.toUpperCase() : '';\n  }\n\n  /**\n   * Hyphenate a camelCase string.\n   *\n   * @param {String} str\n   * @return {String}\n   */\n\n  var hyphenateRE = /([a-z\\d])([A-Z])/g;\n\n  function hyphenate(str) {\n    return str.replace(hyphenateRE, '$1-$2').toLowerCase();\n  }\n\n  /**\n   * Converts hyphen/underscore/slash delimitered names into\n   * camelized classNames.\n   *\n   * e.g. my-component => MyComponent\n   *      some_else    => SomeElse\n   *      some/comp    => SomeComp\n   *\n   * @param {String} str\n   * @return {String}\n   */\n\n  var classifyRE = /(?:^|[-_\\/])(\\w)/g;\n\n  function classify(str) {\n    return str.replace(classifyRE, toUpper);\n  }\n\n  /**\n   * Simple bind, faster than native\n   *\n   * @param {Function} fn\n   * @param {Object} ctx\n   * @return {Function}\n   */\n\n  function bind$1(fn, ctx) {\n    return function (a) {\n      var l = arguments.length;\n      return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);\n    };\n  }\n\n  /**\n   * Convert an Array-like object to a real Array.\n   *\n   * @param {Array-like} list\n   * @param {Number} [start] - start index\n   * @return {Array}\n   */\n\n  function toArray(list, start) {\n    start = start || 0;\n    var i = list.length - start;\n    var ret = new Array(i);\n    while (i--) {\n      ret[i] = list[i + start];\n    }\n    return ret;\n  }\n\n  /**\n   * Mix properties into target object.\n   *\n   * @param {Object} to\n   * @param {Object} from\n   */\n\n  function extend(to, from) {\n    var keys = Object.keys(from);\n    var i = keys.length;\n    while (i--) {\n      to[keys[i]] = from[keys[i]];\n    }\n    return to;\n  }\n\n  /**\n   * Quick object check - this is primarily used to tell\n   * Objects from primitive values when we know the value\n   * is a JSON-compliant type.\n   *\n   * @param {*} obj\n   * @return {Boolean}\n   */\n\n  function isObject(obj) {\n    return obj !== null && typeof obj === 'object';\n  }\n\n  /**\n   * Strict object type check. Only returns true\n   * for plain JavaScript objects.\n   *\n   * @param {*} obj\n   * @return {Boolean}\n   */\n\n  var toString = Object.prototype.toString;\n  var OBJECT_STRING = '[object Object]';\n\n  function isPlainObject(obj) {\n    return toString.call(obj) === OBJECT_STRING;\n  }\n\n  /**\n   * Array type check.\n   *\n   * @param {*} obj\n   * @return {Boolean}\n   */\n\n  var isArray = Array.isArray;\n\n  /**\n   * Define a non-enumerable property\n   *\n   * @param {Object} obj\n   * @param {String} key\n   * @param {*} val\n   * @param {Boolean} [enumerable]\n   */\n\n  function def(obj, key, val, enumerable) {\n    Object.defineProperty(obj, key, {\n      value: val,\n      enumerable: !!enumerable,\n      writable: true,\n      configurable: true\n    });\n  }\n\n  /**\n   * Debounce a function so it only gets called after the\n   * input stops arriving after the given wait period.\n   *\n   * @param {Function} func\n   * @param {Number} wait\n   * @return {Function} - the debounced function\n   */\n\n  function _debounce(func, wait) {\n    var timeout, args, context, timestamp, result;\n    var later = function later() {\n      var last = Date.now() - timestamp;\n      if (last < wait && last >= 0) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      }\n    };\n    return function () {\n      context = this;\n      args = arguments;\n      timestamp = Date.now();\n      if (!timeout) {\n        timeout = setTimeout(later, wait);\n      }\n      return result;\n    };\n  }\n\n  /**\n   * Manual indexOf because it's slightly faster than\n   * native.\n   *\n   * @param {Array} arr\n   * @param {*} obj\n   */\n\n  function indexOf(arr, obj) {\n    var i = arr.length;\n    while (i--) {\n      if (arr[i] === obj) return i;\n    }\n    return -1;\n  }\n\n  /**\n   * Make a cancellable version of an async callback.\n   *\n   * @param {Function} fn\n   * @return {Function}\n   */\n\n  function cancellable(fn) {\n    var cb = function cb() {\n      if (!cb.cancelled) {\n        return fn.apply(this, arguments);\n      }\n    };\n    cb.cancel = function () {\n      cb.cancelled = true;\n    };\n    return cb;\n  }\n\n  /**\n   * Check if two values are loosely equal - that is,\n   * if they are plain objects, do they have the same shape?\n   *\n   * @param {*} a\n   * @param {*} b\n   * @return {Boolean}\n   */\n\n  function looseEqual(a, b) {\n    /* eslint-disable eqeqeq */\n    return a == b || (isObject(a) && isObject(b) ? JSON.stringify(a) === JSON.stringify(b) : false);\n    /* eslint-enable eqeqeq */\n  }\n\n  var hasProto = ('__proto__' in {});\n\n  // Browser environment sniffing\n  var inBrowser = typeof window !== 'undefined' && Object.prototype.toString.call(window) !== '[object Object]';\n\n  var isIE9 = inBrowser && navigator.userAgent.toLowerCase().indexOf('msie 9.0') > 0;\n\n  var isAndroid = inBrowser && navigator.userAgent.toLowerCase().indexOf('android') > 0;\n\n  var transitionProp = undefined;\n  var transitionEndEvent = undefined;\n  var animationProp = undefined;\n  var animationEndEvent = undefined;\n\n  // Transition property/event sniffing\n  if (inBrowser && !isIE9) {\n    var isWebkitTrans = window.ontransitionend === undefined && window.onwebkittransitionend !== undefined;\n    var isWebkitAnim = window.onanimationend === undefined && window.onwebkitanimationend !== undefined;\n    transitionProp = isWebkitTrans ? 'WebkitTransition' : 'transition';\n    transitionEndEvent = isWebkitTrans ? 'webkitTransitionEnd' : 'transitionend';\n    animationProp = isWebkitAnim ? 'WebkitAnimation' : 'animation';\n    animationEndEvent = isWebkitAnim ? 'webkitAnimationEnd' : 'animationend';\n  }\n\n  /**\n   * Defer a task to execute it asynchronously. Ideally this\n   * should be executed as a microtask, so we leverage\n   * MutationObserver if it's available, and fallback to\n   * setTimeout(0).\n   *\n   * @param {Function} cb\n   * @param {Object} ctx\n   */\n\n  var nextTick = (function () {\n    var callbacks = [];\n    var pending = false;\n    var timerFunc;\n    function nextTickHandler() {\n      pending = false;\n      var copies = callbacks.slice(0);\n      callbacks = [];\n      for (var i = 0; i < copies.length; i++) {\n        copies[i]();\n      }\n    }\n    /* istanbul ignore if */\n    if (typeof MutationObserver !== 'undefined') {\n      var counter = 1;\n      var observer = new MutationObserver(nextTickHandler);\n      var textNode = document.createTextNode(counter);\n      observer.observe(textNode, {\n        characterData: true\n      });\n      timerFunc = function () {\n        counter = (counter + 1) % 2;\n        textNode.data = counter;\n      };\n    } else {\n      timerFunc = setTimeout;\n    }\n    return function (cb, ctx) {\n      var func = ctx ? function () {\n        cb.call(ctx);\n      } : cb;\n      callbacks.push(func);\n      if (pending) return;\n      pending = true;\n      timerFunc(nextTickHandler, 0);\n    };\n  })();\n\n  function Cache(limit) {\n    this.size = 0;\n    this.limit = limit;\n    this.head = this.tail = undefined;\n    this._keymap = Object.create(null);\n  }\n\n  var p = Cache.prototype;\n\n  /**\n   * Put <value> into the cache associated with <key>.\n   * Returns the entry which was removed to make room for\n   * the new entry. Otherwise undefined is returned.\n   * (i.e. if there was enough room already).\n   *\n   * @param {String} key\n   * @param {*} value\n   * @return {Entry|undefined}\n   */\n\n  p.put = function (key, value) {\n    var entry = {\n      key: key,\n      value: value\n    };\n    this._keymap[key] = entry;\n    if (this.tail) {\n      this.tail.newer = entry;\n      entry.older = this.tail;\n    } else {\n      this.head = entry;\n    }\n    this.tail = entry;\n    if (this.size === this.limit) {\n      return this.shift();\n    } else {\n      this.size++;\n    }\n  };\n\n  /**\n   * Purge the least recently used (oldest) entry from the\n   * cache. Returns the removed entry or undefined if the\n   * cache was empty.\n   */\n\n  p.shift = function () {\n    var entry = this.head;\n    if (entry) {\n      this.head = this.head.newer;\n      this.head.older = undefined;\n      entry.newer = entry.older = undefined;\n      this._keymap[entry.key] = undefined;\n    }\n    return entry;\n  };\n\n  /**\n   * Get and register recent use of <key>. Returns the value\n   * associated with <key> or undefined if not in cache.\n   *\n   * @param {String} key\n   * @param {Boolean} returnEntry\n   * @return {Entry|*}\n   */\n\n  p.get = function (key, returnEntry) {\n    var entry = this._keymap[key];\n    if (entry === undefined) return;\n    if (entry === this.tail) {\n      return returnEntry ? entry : entry.value;\n    }\n    // HEAD--------------TAIL\n    //   <.older   .newer>\n    //  <--- add direction --\n    //   A  B  C  <D>  E\n    if (entry.newer) {\n      if (entry === this.head) {\n        this.head = entry.newer;\n      }\n      entry.newer.older = entry.older; // C <-- E.\n    }\n    if (entry.older) {\n      entry.older.newer = entry.newer; // C. --> E\n    }\n    entry.newer = undefined; // D --x\n    entry.older = this.tail; // D. --> E\n    if (this.tail) {\n      this.tail.newer = entry; // E. <-- D\n    }\n    this.tail = entry;\n    return returnEntry ? entry : entry.value;\n  };\n\n  var cache$1 = new Cache(1000);\n  var filterTokenRE = /[^\\s'\"]+|'[^']*'|\"[^\"]*\"/g;\n  var reservedArgRE = /^in$|^-?\\d+/;\n\n  /**\n   * Parser state\n   */\n\n  var str;\n  var dir;\n  var c;\n  var i;\n  var l;\n  var lastFilterIndex;\n  var inSingle;\n  var inDouble;\n  var curly;\n  var square;\n  var paren;\n  /**\n   * Push a filter to the current directive object\n   */\n\n  function pushFilter() {\n    var exp = str.slice(lastFilterIndex, i).trim();\n    var filter;\n    if (exp) {\n      filter = {};\n      var tokens = exp.match(filterTokenRE);\n      filter.name = tokens[0];\n      if (tokens.length > 1) {\n        filter.args = tokens.slice(1).map(processFilterArg);\n      }\n    }\n    if (filter) {\n      (dir.filters = dir.filters || []).push(filter);\n    }\n    lastFilterIndex = i + 1;\n  }\n\n  /**\n   * Check if an argument is dynamic and strip quotes.\n   *\n   * @param {String} arg\n   * @return {Object}\n   */\n\n  function processFilterArg(arg) {\n    if (reservedArgRE.test(arg)) {\n      return {\n        value: toNumber(arg),\n        dynamic: false\n      };\n    } else {\n      var stripped = stripQuotes(arg);\n      var dynamic = stripped === arg;\n      return {\n        value: dynamic ? arg : stripped,\n        dynamic: dynamic\n      };\n    }\n  }\n\n  /**\n   * Parse a directive value and extract the expression\n   * and its filters into a descriptor.\n   *\n   * Example:\n   *\n   * \"a + 1 | uppercase\" will yield:\n   * {\n   *   expression: 'a + 1',\n   *   filters: [\n   *     { name: 'uppercase', args: null }\n   *   ]\n   * }\n   *\n   * @param {String} str\n   * @return {Object}\n   */\n\n  function parseDirective(s) {\n\n    var hit = cache$1.get(s);\n    if (hit) {\n      return hit;\n    }\n\n    // reset parser state\n    str = s;\n    inSingle = inDouble = false;\n    curly = square = paren = 0;\n    lastFilterIndex = 0;\n    dir = {};\n\n    for (i = 0, l = str.length; i < l; i++) {\n      c = str.charCodeAt(i);\n      if (inSingle) {\n        // check single quote\n        if (c === 0x27) inSingle = !inSingle;\n      } else if (inDouble) {\n        // check double quote\n        if (c === 0x22) inDouble = !inDouble;\n      } else if (c === 0x7C && // pipe\n      str.charCodeAt(i + 1) !== 0x7C && str.charCodeAt(i - 1) !== 0x7C) {\n        if (dir.expression == null) {\n          // first filter, end of expression\n          lastFilterIndex = i + 1;\n          dir.expression = str.slice(0, i).trim();\n        } else {\n          // already has filter\n          pushFilter();\n        }\n      } else {\n        switch (c) {\n          case 0x22:\n            inDouble = true;break; // \"\n          case 0x27:\n            inSingle = true;break; // '\n          case 0x28:\n            paren++;break; // (\n          case 0x29:\n            paren--;break; // )\n          case 0x5B:\n            square++;break; // [\n          case 0x5D:\n            square--;break; // ]\n          case 0x7B:\n            curly++;break; // {\n          case 0x7D:\n            curly--;break; // }\n        }\n      }\n    }\n\n    if (dir.expression == null) {\n      dir.expression = str.slice(0, i).trim();\n    } else if (lastFilterIndex !== 0) {\n      pushFilter();\n    }\n\n    cache$1.put(s, dir);\n    return dir;\n  }\n\n  var directive = Object.freeze({\n    parseDirective: parseDirective\n  });\n\n  var regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\n  var cache = undefined;\n  var tagRE = undefined;\n  var htmlRE = undefined;\n  /**\n   * Escape a string so it can be used in a RegExp\n   * constructor.\n   *\n   * @param {String} str\n   */\n\n  function escapeRegex(str) {\n    return str.replace(regexEscapeRE, '\\\\$&');\n  }\n\n  function compileRegex() {\n    var open = escapeRegex(config.delimiters[0]);\n    var close = escapeRegex(config.delimiters[1]);\n    var unsafeOpen = escapeRegex(config.unsafeDelimiters[0]);\n    var unsafeClose = escapeRegex(config.unsafeDelimiters[1]);\n    tagRE = new RegExp(unsafeOpen + '(.+?)' + unsafeClose + '|' + open + '(.+?)' + close, 'g');\n    htmlRE = new RegExp('^' + unsafeOpen + '.*' + unsafeClose + '$');\n    // reset cache\n    cache = new Cache(1000);\n  }\n\n  /**\n   * Parse a template text string into an array of tokens.\n   *\n   * @param {String} text\n   * @return {Array<Object> | null}\n   *               - {String} type\n   *               - {String} value\n   *               - {Boolean} [html]\n   *               - {Boolean} [oneTime]\n   */\n\n  function parseText(text) {\n    if (!cache) {\n      compileRegex();\n    }\n    var hit = cache.get(text);\n    if (hit) {\n      return hit;\n    }\n    text = text.replace(/\\n/g, '');\n    if (!tagRE.test(text)) {\n      return null;\n    }\n    var tokens = [];\n    var lastIndex = tagRE.lastIndex = 0;\n    var match, index, html, value, first, oneTime;\n    /* eslint-disable no-cond-assign */\n    while (match = tagRE.exec(text)) {\n      /* eslint-enable no-cond-assign */\n      index = match.index;\n      // push text token\n      if (index > lastIndex) {\n        tokens.push({\n          value: text.slice(lastIndex, index)\n        });\n      }\n      // tag token\n      html = htmlRE.test(match[0]);\n      value = html ? match[1] : match[2];\n      first = value.charCodeAt(0);\n      oneTime = first === 42; // *\n      value = oneTime ? value.slice(1) : value;\n      tokens.push({\n        tag: true,\n        value: value.trim(),\n        html: html,\n        oneTime: oneTime\n      });\n      lastIndex = index + match[0].length;\n    }\n    if (lastIndex < text.length) {\n      tokens.push({\n        value: text.slice(lastIndex)\n      });\n    }\n    cache.put(text, tokens);\n    return tokens;\n  }\n\n  /**\n   * Format a list of tokens into an expression.\n   * e.g. tokens parsed from 'a {{b}} c' can be serialized\n   * into one single expression as '\"a \" + b + \" c\"'.\n   *\n   * @param {Array} tokens\n   * @return {String}\n   */\n\n  function tokensToExp(tokens) {\n    if (tokens.length > 1) {\n      return tokens.map(function (token) {\n        return formatToken(token);\n      }).join('+');\n    } else {\n      return formatToken(tokens[0], true);\n    }\n  }\n\n  /**\n   * Format a single token.\n   *\n   * @param {Object} token\n   * @param {Boolean} single\n   * @return {String}\n   */\n\n  function formatToken(token, single) {\n    return token.tag ? inlineFilters(token.value, single) : '\"' + token.value + '\"';\n  }\n\n  /**\n   * For an attribute with multiple interpolation tags,\n   * e.g. attr=\"some-{{thing | filter}}\", in order to combine\n   * the whole thing into a single watchable expression, we\n   * have to inline those filters. This function does exactly\n   * that. This is a bit hacky but it avoids heavy changes\n   * to directive parser and watcher mechanism.\n   *\n   * @param {String} exp\n   * @param {Boolean} single\n   * @return {String}\n   */\n\n  var filterRE$1 = /[^|]\\|[^|]/;\n  function inlineFilters(exp, single) {\n    if (!filterRE$1.test(exp)) {\n      return single ? exp : '(' + exp + ')';\n    } else {\n      var dir = parseDirective(exp);\n      if (!dir.filters) {\n        return '(' + exp + ')';\n      } else {\n        return 'this._applyFilters(' + dir.expression + // value\n        ',null,' + // oldValue (null for read)\n        JSON.stringify(dir.filters) + // filter descriptors\n        ',false)'; // write?\n      }\n    }\n  }\n\n  var text$1 = Object.freeze({\n    compileRegex: compileRegex,\n    parseText: parseText,\n    tokensToExp: tokensToExp\n  });\n\n  var delimiters = ['{{', '}}'];\n  var unsafeDelimiters = ['{{{', '}}}'];\n\n  var config = Object.defineProperties({\n\n    /**\n     * Whether to print debug messages.\n     * Also enables stack trace for warnings.\n     *\n     * @type {Boolean}\n     */\n\n    debug: false,\n\n    /**\n     * Whether to suppress warnings.\n     *\n     * @type {Boolean}\n     */\n\n    silent: false,\n\n    /**\n     * Whether to use async rendering.\n     */\n\n    async: true,\n\n    /**\n     * Whether to warn against errors caught when evaluating\n     * expressions.\n     */\n\n    warnExpressionErrors: true,\n\n    /**\n     * Whether or not to handle fully object properties which\n     * are already backed by getters and seters. Depending on\n     * use case and environment, this might introduce non-neglible\n     * performance penalties.\n     */\n    convertAllProperties: false,\n\n    /**\n     * Internal flag to indicate the delimiters have been\n     * changed.\n     *\n     * @type {Boolean}\n     */\n\n    _delimitersChanged: true,\n\n    /**\n     * List of asset types that a component can own.\n     *\n     * @type {Array}\n     */\n\n    _assetTypes: ['component', 'directive', 'elementDirective', 'filter', 'transition', 'partial'],\n\n    /**\n     * prop binding modes\n     */\n\n    _propBindingModes: {\n      ONE_WAY: 0,\n      TWO_WAY: 1,\n      ONE_TIME: 2\n    },\n\n    /**\n     * Max circular updates allowed in a batcher flush cycle.\n     */\n\n    _maxUpdateCount: 100\n\n  }, {\n    delimiters: { /**\n                   * Interpolation delimiters. Changing these would trigger\n                   * the text parser to re-compile the regular expressions.\n                   *\n                   * @type {Array<String>}\n                   */\n\n      get: function get() {\n        return delimiters;\n      },\n      set: function set(val) {\n        delimiters = val;\n        compileRegex();\n      },\n      configurable: true,\n      enumerable: true\n    },\n    unsafeDelimiters: {\n      get: function get() {\n        return unsafeDelimiters;\n      },\n      set: function set(val) {\n        unsafeDelimiters = val;\n        compileRegex();\n      },\n      configurable: true,\n      enumerable: true\n    }\n  });\n\n  var warn = undefined;\n\n  if ('development' !== 'production') {\n    (function () {\n      var hasConsole = typeof console !== 'undefined';\n      warn = function (msg, e) {\n        if (hasConsole && (!config.silent || config.debug)) {\n          console.warn('[Vue warn]: ' + msg);\n          /* istanbul ignore if */\n          if (config.debug) {\n            if (e) {\n              throw e;\n            } else {\n              console.warn(new Error('Warning Stack Trace').stack);\n            }\n          }\n        }\n      };\n    })();\n  }\n\n  /**\n   * Append with transition.\n   *\n   * @param {Element} el\n   * @param {Element} target\n   * @param {Vue} vm\n   * @param {Function} [cb]\n   */\n\n  function appendWithTransition(el, target, vm, cb) {\n    applyTransition(el, 1, function () {\n      target.appendChild(el);\n    }, vm, cb);\n  }\n\n  /**\n   * InsertBefore with transition.\n   *\n   * @param {Element} el\n   * @param {Element} target\n   * @param {Vue} vm\n   * @param {Function} [cb]\n   */\n\n  function beforeWithTransition(el, target, vm, cb) {\n    applyTransition(el, 1, function () {\n      before(el, target);\n    }, vm, cb);\n  }\n\n  /**\n   * Remove with transition.\n   *\n   * @param {Element} el\n   * @param {Vue} vm\n   * @param {Function} [cb]\n   */\n\n  function removeWithTransition(el, vm, cb) {\n    applyTransition(el, -1, function () {\n      remove(el);\n    }, vm, cb);\n  }\n\n  /**\n   * Apply transitions with an operation callback.\n   *\n   * @param {Element} el\n   * @param {Number} direction\n   *                  1: enter\n   *                 -1: leave\n   * @param {Function} op - the actual DOM operation\n   * @param {Vue} vm\n   * @param {Function} [cb]\n   */\n\n  function applyTransition(el, direction, op, vm, cb) {\n    var transition = el.__v_trans;\n    if (!transition ||\n    // skip if there are no js hooks and CSS transition is\n    // not supported\n    !transition.hooks && !transitionEndEvent ||\n    // skip transitions for initial compile\n    !vm._isCompiled ||\n    // if the vm is being manipulated by a parent directive\n    // during the parent's compilation phase, skip the\n    // animation.\n    vm.$parent && !vm.$parent._isCompiled) {\n      op();\n      if (cb) cb();\n      return;\n    }\n    var action = direction > 0 ? 'enter' : 'leave';\n    transition[action](op, cb);\n  }\n\n  /**\n   * Query an element selector if it's not an element already.\n   *\n   * @param {String|Element} el\n   * @return {Element}\n   */\n\n  function query(el) {\n    if (typeof el === 'string') {\n      var selector = el;\n      el = document.querySelector(el);\n      if (!el) {\n        'development' !== 'production' && warn('Cannot find element: ' + selector);\n      }\n    }\n    return el;\n  }\n\n  /**\n   * Check if a node is in the document.\n   * Note: document.documentElement.contains should work here\n   * but always returns false for comment nodes in phantomjs,\n   * making unit tests difficult. This is fixed by doing the\n   * contains() check on the node's parentNode instead of\n   * the node itself.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  function inDoc(node) {\n    var doc = document.documentElement;\n    var parent = node && node.parentNode;\n    return doc === node || doc === parent || !!(parent && parent.nodeType === 1 && doc.contains(parent));\n  }\n\n  /**\n   * Get and remove an attribute from a node.\n   *\n   * @param {Node} node\n   * @param {String} _attr\n   */\n\n  function getAttr(node, _attr) {\n    var val = node.getAttribute(_attr);\n    if (val !== null) {\n      node.removeAttribute(_attr);\n    }\n    return val;\n  }\n\n  /**\n   * Get an attribute with colon or v-bind: prefix.\n   *\n   * @param {Node} node\n   * @param {String} name\n   * @return {String|null}\n   */\n\n  function getBindAttr(node, name) {\n    var val = getAttr(node, ':' + name);\n    if (val === null) {\n      val = getAttr(node, 'v-bind:' + name);\n    }\n    return val;\n  }\n\n  /**\n   * Insert el before target\n   *\n   * @param {Element} el\n   * @param {Element} target\n   */\n\n  function before(el, target) {\n    target.parentNode.insertBefore(el, target);\n  }\n\n  /**\n   * Insert el after target\n   *\n   * @param {Element} el\n   * @param {Element} target\n   */\n\n  function after(el, target) {\n    if (target.nextSibling) {\n      before(el, target.nextSibling);\n    } else {\n      target.parentNode.appendChild(el);\n    }\n  }\n\n  /**\n   * Remove el from DOM\n   *\n   * @param {Element} el\n   */\n\n  function remove(el) {\n    el.parentNode.removeChild(el);\n  }\n\n  /**\n   * Prepend el to target\n   *\n   * @param {Element} el\n   * @param {Element} target\n   */\n\n  function prepend(el, target) {\n    if (target.firstChild) {\n      before(el, target.firstChild);\n    } else {\n      target.appendChild(el);\n    }\n  }\n\n  /**\n   * Replace target with el\n   *\n   * @param {Element} target\n   * @param {Element} el\n   */\n\n  function replace(target, el) {\n    var parent = target.parentNode;\n    if (parent) {\n      parent.replaceChild(el, target);\n    }\n  }\n\n  /**\n   * Add event listener shorthand.\n   *\n   * @param {Element} el\n   * @param {String} event\n   * @param {Function} cb\n   */\n\n  function on$1(el, event, cb) {\n    el.addEventListener(event, cb);\n  }\n\n  /**\n   * Remove event listener shorthand.\n   *\n   * @param {Element} el\n   * @param {String} event\n   * @param {Function} cb\n   */\n\n  function off(el, event, cb) {\n    el.removeEventListener(event, cb);\n  }\n\n  /**\n   * Add class with compatibility for IE & SVG\n   *\n   * @param {Element} el\n   * @param {Strong} cls\n   */\n\n  function addClass(el, cls) {\n    if (el.classList) {\n      el.classList.add(cls);\n    } else {\n      var cur = ' ' + (el.getAttribute('class') || '') + ' ';\n      if (cur.indexOf(' ' + cls + ' ') < 0) {\n        el.setAttribute('class', (cur + cls).trim());\n      }\n    }\n  }\n\n  /**\n   * Remove class with compatibility for IE & SVG\n   *\n   * @param {Element} el\n   * @param {Strong} cls\n   */\n\n  function removeClass(el, cls) {\n    if (el.classList) {\n      el.classList.remove(cls);\n    } else {\n      var cur = ' ' + (el.getAttribute('class') || '') + ' ';\n      var tar = ' ' + cls + ' ';\n      while (cur.indexOf(tar) >= 0) {\n        cur = cur.replace(tar, ' ');\n      }\n      el.setAttribute('class', cur.trim());\n    }\n    if (!el.className) {\n      el.removeAttribute('class');\n    }\n  }\n\n  /**\n   * Extract raw content inside an element into a temporary\n   * container div\n   *\n   * @param {Element} el\n   * @param {Boolean} asFragment\n   * @return {Element}\n   */\n\n  function extractContent(el, asFragment) {\n    var child;\n    var rawContent;\n    /* istanbul ignore if */\n    if (isTemplate(el) && el.content instanceof DocumentFragment) {\n      el = el.content;\n    }\n    if (el.hasChildNodes()) {\n      trimNode(el);\n      rawContent = asFragment ? document.createDocumentFragment() : document.createElement('div');\n      /* eslint-disable no-cond-assign */\n      while (child = el.firstChild) {\n        /* eslint-enable no-cond-assign */\n        rawContent.appendChild(child);\n      }\n    }\n    return rawContent;\n  }\n\n  /**\n   * Trim possible empty head/tail textNodes inside a parent.\n   *\n   * @param {Node} node\n   */\n\n  function trimNode(node) {\n    trim(node, node.firstChild);\n    trim(node, node.lastChild);\n  }\n\n  function trim(parent, node) {\n    if (node && node.nodeType === 3 && !node.data.trim()) {\n      parent.removeChild(node);\n    }\n  }\n\n  /**\n   * Check if an element is a template tag.\n   * Note if the template appears inside an SVG its tagName\n   * will be in lowercase.\n   *\n   * @param {Element} el\n   */\n\n  function isTemplate(el) {\n    return el.tagName && el.tagName.toLowerCase() === 'template';\n  }\n\n  /**\n   * Create an \"anchor\" for performing dom insertion/removals.\n   * This is used in a number of scenarios:\n   * - fragment instance\n   * - v-html\n   * - v-if\n   * - v-for\n   * - component\n   *\n   * @param {String} content\n   * @param {Boolean} persist - IE trashes empty textNodes on\n   *                            cloneNode(true), so in certain\n   *                            cases the anchor needs to be\n   *                            non-empty to be persisted in\n   *                            templates.\n   * @return {Comment|Text}\n   */\n\n  function createAnchor(content, persist) {\n    var anchor = config.debug ? document.createComment(content) : document.createTextNode(persist ? ' ' : '');\n    anchor.__vue_anchor = true;\n    return anchor;\n  }\n\n  /**\n   * Find a component ref attribute that starts with $.\n   *\n   * @param {Element} node\n   * @return {String|undefined}\n   */\n\n  var refRE = /^v-ref:/;\n\n  function findRef(node) {\n    if (node.hasAttributes()) {\n      var attrs = node.attributes;\n      for (var i = 0, l = attrs.length; i < l; i++) {\n        var name = attrs[i].name;\n        if (refRE.test(name)) {\n          return camelize(name.replace(refRE, ''));\n        }\n      }\n    }\n  }\n\n  /**\n   * Map a function to a range of nodes .\n   *\n   * @param {Node} node\n   * @param {Node} end\n   * @param {Function} op\n   */\n\n  function mapNodeRange(node, end, op) {\n    var next;\n    while (node !== end) {\n      next = node.nextSibling;\n      op(node);\n      node = next;\n    }\n    op(end);\n  }\n\n  /**\n   * Remove a range of nodes with transition, store\n   * the nodes in a fragment with correct ordering,\n   * and call callback when done.\n   *\n   * @param {Node} start\n   * @param {Node} end\n   * @param {Vue} vm\n   * @param {DocumentFragment} frag\n   * @param {Function} cb\n   */\n\n  function removeNodeRange(start, end, vm, frag, cb) {\n    var done = false;\n    var removed = 0;\n    var nodes = [];\n    mapNodeRange(start, end, function (node) {\n      if (node === end) done = true;\n      nodes.push(node);\n      removeWithTransition(node, vm, onRemoved);\n    });\n    function onRemoved() {\n      removed++;\n      if (done && removed >= nodes.length) {\n        for (var i = 0; i < nodes.length; i++) {\n          frag.appendChild(nodes[i]);\n        }\n        cb && cb();\n      }\n    }\n  }\n\n  var commonTagRE = /^(div|p|span|img|a|b|i|br|ul|ol|li|h1|h2|h3|h4|h5|h6|code|pre|table|th|td|tr|form|label|input|select|option|nav|article|section|header|footer)$/;\n\n  /**\n   * Check if an element is a component, if yes return its\n   * component id.\n   *\n   * @param {Element} el\n   * @param {Object} options\n   * @return {Object|undefined}\n   */\n\n  function checkComponentAttr(el, options) {\n    var tag = el.tagName.toLowerCase();\n    var hasAttrs = el.hasAttributes();\n    if (!commonTagRE.test(tag) && tag !== 'component') {\n      if (resolveAsset(options, 'components', tag)) {\n        return { id: tag };\n      } else {\n        var is = hasAttrs && getIsBinding(el);\n        if (is) {\n          return is;\n        } else if ('development' !== 'production') {\n          if (tag.indexOf('-') > -1 || /HTMLUnknownElement/.test(el.toString()) &&\n          // Chrome returns unknown for several HTML5 elements.\n          // https://code.google.com/p/chromium/issues/detail?id=540526\n          !/^(data|time|rtc|rb)$/.test(tag)) {\n            warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly?');\n          }\n        }\n      }\n    } else if (hasAttrs) {\n      return getIsBinding(el);\n    }\n  }\n\n  /**\n   * Get \"is\" binding from an element.\n   *\n   * @param {Element} el\n   * @return {Object|undefined}\n   */\n\n  function getIsBinding(el) {\n    // dynamic syntax\n    var exp = getAttr(el, 'is');\n    if (exp != null) {\n      return { id: exp };\n    } else {\n      exp = getBindAttr(el, 'is');\n      if (exp != null) {\n        return { id: exp, dynamic: true };\n      }\n    }\n  }\n\n  /**\n   * Set a prop's initial value on a vm and its data object.\n   *\n   * @param {Vue} vm\n   * @param {Object} prop\n   * @param {*} value\n   */\n\n  function initProp(vm, prop, value) {\n    var key = prop.path;\n    vm[key] = vm._data[key] = assertProp(prop, value) ? value : undefined;\n  }\n\n  /**\n   * Assert whether a prop is valid.\n   *\n   * @param {Object} prop\n   * @param {*} value\n   */\n\n  function assertProp(prop, value) {\n    // if a prop is not provided and is not required,\n    // skip the check.\n    if (prop.raw === null && !prop.required) {\n      return true;\n    }\n    var options = prop.options;\n    var type = options.type;\n    var valid = true;\n    var expectedType;\n    if (type) {\n      if (type === String) {\n        expectedType = 'string';\n        valid = typeof value === expectedType;\n      } else if (type === Number) {\n        expectedType = 'number';\n        valid = typeof value === 'number';\n      } else if (type === Boolean) {\n        expectedType = 'boolean';\n        valid = typeof value === 'boolean';\n      } else if (type === Function) {\n        expectedType = 'function';\n        valid = typeof value === 'function';\n      } else if (type === Object) {\n        expectedType = 'object';\n        valid = isPlainObject(value);\n      } else if (type === Array) {\n        expectedType = 'array';\n        valid = isArray(value);\n      } else {\n        valid = value instanceof type;\n      }\n    }\n    if (!valid) {\n      'development' !== 'production' && warn('Invalid prop: type check failed for ' + prop.path + '=\"' + prop.raw + '\".' + ' Expected ' + formatType(expectedType) + ', got ' + formatValue(value) + '.');\n      return false;\n    }\n    var validator = options.validator;\n    if (validator) {\n      if (!validator.call(null, value)) {\n        'development' !== 'production' && warn('Invalid prop: custom validator check failed for ' + prop.path + '=\"' + prop.raw + '\"');\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function formatType(val) {\n    return val ? val.charAt(0).toUpperCase() + val.slice(1) : 'custom type';\n  }\n\n  function formatValue(val) {\n    return Object.prototype.toString.call(val).slice(8, -1);\n  }\n\n  /**\n   * Option overwriting strategies are functions that handle\n   * how to merge a parent option value and a child option\n   * value into the final value.\n   *\n   * All strategy functions follow the same signature:\n   *\n   * @param {*} parentVal\n   * @param {*} childVal\n   * @param {Vue} [vm]\n   */\n\n  var strats = config.optionMergeStrategies = Object.create(null);\n\n  /**\n   * Helper that recursively merges two data objects together.\n   */\n\n  function mergeData(to, from) {\n    var key, toVal, fromVal;\n    for (key in from) {\n      toVal = to[key];\n      fromVal = from[key];\n      if (!hasOwn(to, key)) {\n        set(to, key, fromVal);\n      } else if (isObject(toVal) && isObject(fromVal)) {\n        mergeData(toVal, fromVal);\n      }\n    }\n    return to;\n  }\n\n  /**\n   * Data\n   */\n\n  strats.data = function (parentVal, childVal, vm) {\n    if (!vm) {\n      // in a Vue.extend merge, both should be functions\n      if (!childVal) {\n        return parentVal;\n      }\n      if (typeof childVal !== 'function') {\n        'development' !== 'production' && warn('The \"data\" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.');\n        return parentVal;\n      }\n      if (!parentVal) {\n        return childVal;\n      }\n      // when parentVal & childVal are both present,\n      // we need to return a function that returns the\n      // merged result of both functions... no need to\n      // check if parentVal is a function here because\n      // it has to be a function to pass previous merges.\n      return function mergedDataFn() {\n        return mergeData(childVal.call(this), parentVal.call(this));\n      };\n    } else if (parentVal || childVal) {\n      return function mergedInstanceDataFn() {\n        // instance merge\n        var instanceData = typeof childVal === 'function' ? childVal.call(vm) : childVal;\n        var defaultData = typeof parentVal === 'function' ? parentVal.call(vm) : undefined;\n        if (instanceData) {\n          return mergeData(instanceData, defaultData);\n        } else {\n          return defaultData;\n        }\n      };\n    }\n  };\n\n  /**\n   * El\n   */\n\n  strats.el = function (parentVal, childVal, vm) {\n    if (!vm && childVal && typeof childVal !== 'function') {\n      'development' !== 'production' && warn('The \"el\" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.');\n      return;\n    }\n    var ret = childVal || parentVal;\n    // invoke the element factory if this is instance merge\n    return vm && typeof ret === 'function' ? ret.call(vm) : ret;\n  };\n\n  /**\n   * Hooks and param attributes are merged as arrays.\n   */\n\n  strats.init = strats.created = strats.ready = strats.attached = strats.detached = strats.beforeCompile = strats.compiled = strats.beforeDestroy = strats.destroyed = function (parentVal, childVal) {\n    return childVal ? parentVal ? parentVal.concat(childVal) : isArray(childVal) ? childVal : [childVal] : parentVal;\n  };\n\n  /**\n   * 0.11 deprecation warning\n   */\n\n  strats.paramAttributes = function () {\n    /* istanbul ignore next */\n    'development' !== 'production' && warn('\"paramAttributes\" option has been deprecated in 0.12. ' + 'Use \"props\" instead.');\n  };\n\n  /**\n   * Assets\n   *\n   * When a vm is present (instance creation), we need to do\n   * a three-way merge between constructor options, instance\n   * options and parent options.\n   */\n\n  function mergeAssets(parentVal, childVal) {\n    var res = Object.create(parentVal);\n    return childVal ? extend(res, guardArrayAssets(childVal)) : res;\n  }\n\n  config._assetTypes.forEach(function (type) {\n    strats[type + 's'] = mergeAssets;\n  });\n\n  /**\n   * Events & Watchers.\n   *\n   * Events & watchers hashes should not overwrite one\n   * another, so we merge them as arrays.\n   */\n\n  strats.watch = strats.events = function (parentVal, childVal) {\n    if (!childVal) return parentVal;\n    if (!parentVal) return childVal;\n    var ret = {};\n    extend(ret, parentVal);\n    for (var key in childVal) {\n      var parent = ret[key];\n      var child = childVal[key];\n      if (parent && !isArray(parent)) {\n        parent = [parent];\n      }\n      ret[key] = parent ? parent.concat(child) : [child];\n    }\n    return ret;\n  };\n\n  /**\n   * Other object hashes.\n   */\n\n  strats.props = strats.methods = strats.computed = function (parentVal, childVal) {\n    if (!childVal) return parentVal;\n    if (!parentVal) return childVal;\n    var ret = Object.create(null);\n    extend(ret, parentVal);\n    extend(ret, childVal);\n    return ret;\n  };\n\n  /**\n   * Default strategy.\n   */\n\n  var defaultStrat = function defaultStrat(parentVal, childVal) {\n    return childVal === undefined ? parentVal : childVal;\n  };\n\n  /**\n   * Make sure component options get converted to actual\n   * constructors.\n   *\n   * @param {Object} options\n   */\n\n  function guardComponents(options) {\n    if (options.components) {\n      var components = options.components = guardArrayAssets(options.components);\n      var def;\n      var ids = Object.keys(components);\n      for (var i = 0, l = ids.length; i < l; i++) {\n        var key = ids[i];\n        if (commonTagRE.test(key)) {\n          'development' !== 'production' && warn('Do not use built-in HTML elements as component ' + 'id: ' + key);\n          continue;\n        }\n        def = components[key];\n        if (isPlainObject(def)) {\n          components[key] = Vue.extend(def);\n        }\n      }\n    }\n  }\n\n  /**\n   * Ensure all props option syntax are normalized into the\n   * Object-based format.\n   *\n   * @param {Object} options\n   */\n\n  function guardProps(options) {\n    var props = options.props;\n    var i, val;\n    if (isArray(props)) {\n      options.props = {};\n      i = props.length;\n      while (i--) {\n        val = props[i];\n        if (typeof val === 'string') {\n          options.props[val] = null;\n        } else if (val.name) {\n          options.props[val.name] = val;\n        }\n      }\n    } else if (isPlainObject(props)) {\n      var keys = Object.keys(props);\n      i = keys.length;\n      while (i--) {\n        val = props[keys[i]];\n        if (typeof val === 'function') {\n          props[keys[i]] = { type: val };\n        }\n      }\n    }\n  }\n\n  /**\n   * Guard an Array-format assets option and converted it\n   * into the key-value Object format.\n   *\n   * @param {Object|Array} assets\n   * @return {Object}\n   */\n\n  function guardArrayAssets(assets) {\n    if (isArray(assets)) {\n      var res = {};\n      var i = assets.length;\n      var asset;\n      while (i--) {\n        asset = assets[i];\n        var id = typeof asset === 'function' ? asset.options && asset.options.name || asset.id : asset.name || asset.id;\n        if (!id) {\n          'development' !== 'production' && warn('Array-syntax assets must provide a \"name\" or \"id\" field.');\n        } else {\n          res[id] = asset;\n        }\n      }\n      return res;\n    }\n    return assets;\n  }\n\n  /**\n   * Merge two option objects into a new one.\n   * Core utility used in both instantiation and inheritance.\n   *\n   * @param {Object} parent\n   * @param {Object} child\n   * @param {Vue} [vm] - if vm is present, indicates this is\n   *                     an instantiation merge.\n   */\n\n  function mergeOptions(parent, child, vm) {\n    guardComponents(child);\n    guardProps(child);\n    var options = {};\n    var key;\n    if (child.mixins) {\n      for (var i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm);\n      }\n    }\n    for (key in parent) {\n      mergeField(key);\n    }\n    for (key in child) {\n      if (!hasOwn(parent, key)) {\n        mergeField(key);\n      }\n    }\n    function mergeField(key) {\n      var strat = strats[key] || defaultStrat;\n      options[key] = strat(parent[key], child[key], vm, key);\n    }\n    return options;\n  }\n\n  /**\n   * Resolve an asset.\n   * This function is used because child instances need access\n   * to assets defined in its ancestor chain.\n   *\n   * @param {Object} options\n   * @param {String} type\n   * @param {String} id\n   * @return {Object|Function}\n   */\n\n  function resolveAsset(options, type, id) {\n    var assets = options[type];\n    var camelizedId;\n    return assets[id] ||\n    // camelCase ID\n    assets[camelizedId = camelize(id)] ||\n    // Pascal Case ID\n    assets[camelizedId.charAt(0).toUpperCase() + camelizedId.slice(1)];\n  }\n\n  /**\n   * Assert asset exists\n   */\n\n  function assertAsset(val, type, id) {\n    if (!val) {\n      'development' !== 'production' && warn('Failed to resolve ' + type + ': ' + id);\n    }\n  }\n\n  var arrayProto = Array.prototype;\n  var arrayMethods = Object.create(arrayProto)\n\n  /**\n   * Intercept mutating methods and emit events\n   */\n\n  ;['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(function (method) {\n    // cache original method\n    var original = arrayProto[method];\n    def(arrayMethods, method, function mutator() {\n      // avoid leaking arguments:\n      // http://jsperf.com/closure-with-arguments\n      var i = arguments.length;\n      var args = new Array(i);\n      while (i--) {\n        args[i] = arguments[i];\n      }\n      var result = original.apply(this, args);\n      var ob = this.__ob__;\n      var inserted;\n      switch (method) {\n        case 'push':\n          inserted = args;\n          break;\n        case 'unshift':\n          inserted = args;\n          break;\n        case 'splice':\n          inserted = args.slice(2);\n          break;\n      }\n      if (inserted) ob.observeArray(inserted);\n      // notify change\n      ob.dep.notify();\n      return result;\n    });\n  });\n\n  /**\n   * Swap the element at the given index with a new value\n   * and emits corresponding event.\n   *\n   * @param {Number} index\n   * @param {*} val\n   * @return {*} - replaced element\n   */\n\n  def(arrayProto, '$set', function $set(index, val) {\n    if (index >= this.length) {\n      this.length = index + 1;\n    }\n    return this.splice(index, 1, val)[0];\n  });\n\n  /**\n   * Convenience method to remove the element at given index.\n   *\n   * @param {Number} index\n   * @param {*} val\n   */\n\n  def(arrayProto, '$remove', function $remove(item) {\n    /* istanbul ignore if */\n    if (!this.length) return;\n    var index = indexOf(this, item);\n    if (index > -1) {\n      return this.splice(index, 1);\n    }\n  });\n\n  var uid$3 = 0;\n\n  /**\n   * A dep is an observable that can have multiple\n   * directives subscribing to it.\n   *\n   * @constructor\n   */\n  function Dep() {\n    this.id = uid$3++;\n    this.subs = [];\n  }\n\n  // the current target watcher being evaluated.\n  // this is globally unique because there could be only one\n  // watcher being evaluated at any time.\n  Dep.target = null;\n\n  /**\n   * Add a directive subscriber.\n   *\n   * @param {Directive} sub\n   */\n\n  Dep.prototype.addSub = function (sub) {\n    this.subs.push(sub);\n  };\n\n  /**\n   * Remove a directive subscriber.\n   *\n   * @param {Directive} sub\n   */\n\n  Dep.prototype.removeSub = function (sub) {\n    this.subs.$remove(sub);\n  };\n\n  /**\n   * Add self as a dependency to the target watcher.\n   */\n\n  Dep.prototype.depend = function () {\n    Dep.target.addDep(this);\n  };\n\n  /**\n   * Notify all subscribers of a new value.\n   */\n\n  Dep.prototype.notify = function () {\n    // stablize the subscriber list first\n    var subs = toArray(this.subs);\n    for (var i = 0, l = subs.length; i < l; i++) {\n      subs[i].update();\n    }\n  };\n\n  var arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n  /**\n   * Observer class that are attached to each observed\n   * object. Once attached, the observer converts target\n   * object's property keys into getter/setters that\n   * collect dependencies and dispatches updates.\n   *\n   * @param {Array|Object} value\n   * @constructor\n   */\n\n  function Observer(value) {\n    this.value = value;\n    this.dep = new Dep();\n    def(value, '__ob__', this);\n    if (isArray(value)) {\n      var augment = hasProto ? protoAugment : copyAugment;\n      augment(value, arrayMethods, arrayKeys);\n      this.observeArray(value);\n    } else {\n      this.walk(value);\n    }\n  }\n\n  // Instance methods\n\n  /**\n   * Walk through each property and convert them into\n   * getter/setters. This method should only be called when\n   * value type is Object.\n   *\n   * @param {Object} obj\n   */\n\n  Observer.prototype.walk = function (obj) {\n    var keys = Object.keys(obj);\n    var i = keys.length;\n    while (i--) {\n      this.convert(keys[i], obj[keys[i]]);\n    }\n  };\n\n  /**\n   * Observe a list of Array items.\n   *\n   * @param {Array} items\n   */\n\n  Observer.prototype.observeArray = function (items) {\n    var i = items.length;\n    while (i--) {\n      observe(items[i]);\n    }\n  };\n\n  /**\n   * Convert a property into getter/setter so we can emit\n   * the events when the property is accessed/changed.\n   *\n   * @param {String} key\n   * @param {*} val\n   */\n\n  Observer.prototype.convert = function (key, val) {\n    defineReactive(this.value, key, val);\n  };\n\n  /**\n   * Add an owner vm, so that when $set/$delete mutations\n   * happen we can notify owner vms to proxy the keys and\n   * digest the watchers. This is only called when the object\n   * is observed as an instance's root $data.\n   *\n   * @param {Vue} vm\n   */\n\n  Observer.prototype.addVm = function (vm) {\n    (this.vms || (this.vms = [])).push(vm);\n  };\n\n  /**\n   * Remove an owner vm. This is called when the object is\n   * swapped out as an instance's $data object.\n   *\n   * @param {Vue} vm\n   */\n\n  Observer.prototype.removeVm = function (vm) {\n    this.vms.$remove(vm);\n  };\n\n  // helpers\n\n  /**\n   * Augment an target Object or Array by intercepting\n   * the prototype chain using __proto__\n   *\n   * @param {Object|Array} target\n   * @param {Object} proto\n   */\n\n  function protoAugment(target, src) {\n    target.__proto__ = src;\n  }\n\n  /**\n   * Augment an target Object or Array by defining\n   * hidden properties.\n   *\n   * @param {Object|Array} target\n   * @param {Object} proto\n   */\n\n  function copyAugment(target, src, keys) {\n    var i = keys.length;\n    var key;\n    while (i--) {\n      key = keys[i];\n      def(target, key, src[key]);\n    }\n  }\n\n  /**\n   * Attempt to create an observer instance for a value,\n   * returns the new observer if successfully observed,\n   * or the existing observer if the value already has one.\n   *\n   * @param {*} value\n   * @param {Vue} [vm]\n   * @return {Observer|undefined}\n   * @static\n   */\n\n  function observe(value, vm) {\n    if (!value || typeof value !== 'object') {\n      return;\n    }\n    var ob;\n    if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n      ob = value.__ob__;\n    } else if ((isArray(value) || isPlainObject(value)) && !Object.isFrozen(value) && !value._isVue) {\n      ob = new Observer(value);\n    }\n    if (ob && vm) {\n      ob.addVm(vm);\n    }\n    return ob;\n  }\n\n  /**\n   * Define a reactive property on an Object.\n   *\n   * @param {Object} obj\n   * @param {String} key\n   * @param {*} val\n   */\n\n  function defineReactive(obj, key, val) {\n    var dep = new Dep();\n\n    // cater for pre-defined getter/setters\n    var getter, setter;\n    if (config.convertAllProperties) {\n      var property = Object.getOwnPropertyDescriptor(obj, key);\n      if (property && property.configurable === false) {\n        return;\n      }\n      getter = property && property.get;\n      setter = property && property.set;\n    }\n\n    var childOb = observe(val);\n    Object.defineProperty(obj, key, {\n      enumerable: true,\n      configurable: true,\n      get: function reactiveGetter() {\n        var value = getter ? getter.call(obj) : val;\n        if (Dep.target) {\n          dep.depend();\n          if (childOb) {\n            childOb.dep.depend();\n          }\n          if (isArray(value)) {\n            for (var e, i = 0, l = value.length; i < l; i++) {\n              e = value[i];\n              e && e.__ob__ && e.__ob__.dep.depend();\n            }\n          }\n        }\n        return value;\n      },\n      set: function reactiveSetter(newVal) {\n        var value = getter ? getter.call(obj) : val;\n        if (newVal === value) {\n          return;\n        }\n        if (setter) {\n          setter.call(obj, newVal);\n        } else {\n          val = newVal;\n        }\n        childOb = observe(newVal);\n        dep.notify();\n      }\n    });\n  }\n\n  var util = Object.freeze({\n  \tdefineReactive: defineReactive,\n  \tset: set,\n  \tdel: del,\n  \thasOwn: hasOwn,\n  \tisLiteral: isLiteral,\n  \tisReserved: isReserved,\n  \t_toString: _toString,\n  \ttoNumber: toNumber,\n  \ttoBoolean: toBoolean,\n  \tstripQuotes: stripQuotes,\n  \tcamelize: camelize,\n  \thyphenate: hyphenate,\n  \tclassify: classify,\n  \tbind: bind$1,\n  \ttoArray: toArray,\n  \textend: extend,\n  \tisObject: isObject,\n  \tisPlainObject: isPlainObject,\n  \tdef: def,\n  \tdebounce: _debounce,\n  \tindexOf: indexOf,\n  \tcancellable: cancellable,\n  \tlooseEqual: looseEqual,\n  \tisArray: isArray,\n  \thasProto: hasProto,\n  \tinBrowser: inBrowser,\n  \tisIE9: isIE9,\n  \tisAndroid: isAndroid,\n  \tget transitionProp () { return transitionProp; },\n  \tget transitionEndEvent () { return transitionEndEvent; },\n  \tget animationProp () { return animationProp; },\n  \tget animationEndEvent () { return animationEndEvent; },\n  \tnextTick: nextTick,\n  \tquery: query,\n  \tinDoc: inDoc,\n  \tgetAttr: getAttr,\n  \tgetBindAttr: getBindAttr,\n  \tbefore: before,\n  \tafter: after,\n  \tremove: remove,\n  \tprepend: prepend,\n  \treplace: replace,\n  \ton: on$1,\n  \toff: off,\n  \taddClass: addClass,\n  \tremoveClass: removeClass,\n  \textractContent: extractContent,\n  \ttrimNode: trimNode,\n  \tisTemplate: isTemplate,\n  \tcreateAnchor: createAnchor,\n  \tfindRef: findRef,\n  \tmapNodeRange: mapNodeRange,\n  \tremoveNodeRange: removeNodeRange,\n  \tmergeOptions: mergeOptions,\n  \tresolveAsset: resolveAsset,\n  \tassertAsset: assertAsset,\n  \tcheckComponentAttr: checkComponentAttr,\n  \tinitProp: initProp,\n  \tassertProp: assertProp,\n  \tcommonTagRE: commonTagRE,\n  \tget warn () { return warn; }\n  });\n\n  var uid = 0;\n\n  function initMixin (Vue) {\n\n    /**\n     * The main init sequence. This is called for every\n     * instance, including ones that are created from extended\n     * constructors.\n     *\n     * @param {Object} options - this options object should be\n     *                           the result of merging class\n     *                           options and the options passed\n     *                           in to the constructor.\n     */\n\n    Vue.prototype._init = function (options) {\n\n      options = options || {};\n\n      this.$el = null;\n      this.$parent = options.parent;\n      this.$root = this.$parent ? this.$parent.$root : this;\n      this.$children = [];\n      this.$refs = {}; // child vm references\n      this.$els = {}; // element references\n      this._watchers = []; // all watchers as an array\n      this._directives = []; // all directives\n\n      // a uid\n      this._uid = uid++;\n\n      // a flag to avoid this being observed\n      this._isVue = true;\n\n      // events bookkeeping\n      this._events = {}; // registered callbacks\n      this._eventsCount = {}; // for $broadcast optimization\n\n      // fragment instance properties\n      this._isFragment = false;\n      this._fragment = // @type {DocumentFragment}\n      this._fragmentStart = // @type {Text|Comment}\n      this._fragmentEnd = null; // @type {Text|Comment}\n\n      // lifecycle state\n      this._isCompiled = this._isDestroyed = this._isReady = this._isAttached = this._isBeingDestroyed = false;\n      this._unlinkFn = null;\n\n      // context:\n      // if this is a transcluded component, context\n      // will be the common parent vm of this instance\n      // and its host.\n      this._context = options._context || this.$parent;\n\n      // scope:\n      // if this is inside an inline v-for, the scope\n      // will be the intermediate scope created for this\n      // repeat fragment. this is used for linking props\n      // and container directives.\n      this._scope = options._scope;\n\n      // fragment:\n      // if this instance is compiled inside a Fragment, it\n      // needs to reigster itself as a child of that fragment\n      // for attach/detach to work properly.\n      this._frag = options._frag;\n      if (this._frag) {\n        this._frag.children.push(this);\n      }\n\n      // push self into parent / transclusion host\n      if (this.$parent) {\n        this.$parent.$children.push(this);\n      }\n\n      // merge options.\n      options = this.$options = mergeOptions(this.constructor.options, options, this);\n\n      // set ref\n      this._updateRef();\n\n      // initialize data as empty object.\n      // it will be filled up in _initScope().\n      this._data = {};\n\n      // call init hook\n      this._callHook('init');\n\n      // initialize data observation and scope inheritance.\n      this._initState();\n\n      // setup event system and option events.\n      this._initEvents();\n\n      // call created hook\n      this._callHook('created');\n\n      // if `el` option is passed, start compilation.\n      if (options.el) {\n        this.$mount(options.el);\n      }\n    };\n  }\n\n  var pathCache = new Cache(1000);\n\n  // actions\n  var APPEND = 0;\n  var PUSH = 1;\n  var INC_SUB_PATH_DEPTH = 2;\n  var PUSH_SUB_PATH = 3;\n\n  // states\n  var BEFORE_PATH = 0;\n  var IN_PATH = 1;\n  var BEFORE_IDENT = 2;\n  var IN_IDENT = 3;\n  var IN_SUB_PATH = 4;\n  var IN_SINGLE_QUOTE = 5;\n  var IN_DOUBLE_QUOTE = 6;\n  var AFTER_PATH = 7;\n  var ERROR = 8;\n\n  var pathStateMachine = [];\n\n  pathStateMachine[BEFORE_PATH] = {\n    'ws': [BEFORE_PATH],\n    'ident': [IN_IDENT, APPEND],\n    '[': [IN_SUB_PATH],\n    'eof': [AFTER_PATH]\n  };\n\n  pathStateMachine[IN_PATH] = {\n    'ws': [IN_PATH],\n    '.': [BEFORE_IDENT],\n    '[': [IN_SUB_PATH],\n    'eof': [AFTER_PATH]\n  };\n\n  pathStateMachine[BEFORE_IDENT] = {\n    'ws': [BEFORE_IDENT],\n    'ident': [IN_IDENT, APPEND]\n  };\n\n  pathStateMachine[IN_IDENT] = {\n    'ident': [IN_IDENT, APPEND],\n    '0': [IN_IDENT, APPEND],\n    'number': [IN_IDENT, APPEND],\n    'ws': [IN_PATH, PUSH],\n    '.': [BEFORE_IDENT, PUSH],\n    '[': [IN_SUB_PATH, PUSH],\n    'eof': [AFTER_PATH, PUSH]\n  };\n\n  pathStateMachine[IN_SUB_PATH] = {\n    \"'\": [IN_SINGLE_QUOTE, APPEND],\n    '\"': [IN_DOUBLE_QUOTE, APPEND],\n    '[': [IN_SUB_PATH, INC_SUB_PATH_DEPTH],\n    ']': [IN_PATH, PUSH_SUB_PATH],\n    'eof': ERROR,\n    'else': [IN_SUB_PATH, APPEND]\n  };\n\n  pathStateMachine[IN_SINGLE_QUOTE] = {\n    \"'\": [IN_SUB_PATH, APPEND],\n    'eof': ERROR,\n    'else': [IN_SINGLE_QUOTE, APPEND]\n  };\n\n  pathStateMachine[IN_DOUBLE_QUOTE] = {\n    '\"': [IN_SUB_PATH, APPEND],\n    'eof': ERROR,\n    'else': [IN_DOUBLE_QUOTE, APPEND]\n  };\n\n  /**\n   * Determine the type of a character in a keypath.\n   *\n   * @param {Char} ch\n   * @return {String} type\n   */\n\n  function getPathCharType(ch) {\n    if (ch === undefined) {\n      return 'eof';\n    }\n\n    var code = ch.charCodeAt(0);\n\n    switch (code) {\n      case 0x5B: // [\n      case 0x5D: // ]\n      case 0x2E: // .\n      case 0x22: // \"\n      case 0x27: // '\n      case 0x30:\n        // 0\n        return ch;\n\n      case 0x5F: // _\n      case 0x24:\n        // $\n        return 'ident';\n\n      case 0x20: // Space\n      case 0x09: // Tab\n      case 0x0A: // Newline\n      case 0x0D: // Return\n      case 0xA0: // No-break space\n      case 0xFEFF: // Byte Order Mark\n      case 0x2028: // Line Separator\n      case 0x2029:\n        // Paragraph Separator\n        return 'ws';\n    }\n\n    // a-z, A-Z\n    if (code >= 0x61 && code <= 0x7A || code >= 0x41 && code <= 0x5A) {\n      return 'ident';\n    }\n\n    // 1-9\n    if (code >= 0x31 && code <= 0x39) {\n      return 'number';\n    }\n\n    return 'else';\n  }\n\n  /**\n   * Format a subPath, return its plain form if it is\n   * a literal string or number. Otherwise prepend the\n   * dynamic indicator (*).\n   *\n   * @param {String} path\n   * @return {String}\n   */\n\n  function formatSubPath(path) {\n    var trimmed = path.trim();\n    // invalid leading 0\n    if (path.charAt(0) === '0' && isNaN(path)) {\n      return false;\n    }\n    return isLiteral(trimmed) ? stripQuotes(trimmed) : '*' + trimmed;\n  }\n\n  /**\n   * Parse a string path into an array of segments\n   *\n   * @param {String} path\n   * @return {Array|undefined}\n   */\n\n  function parse(path) {\n    var keys = [];\n    var index = -1;\n    var mode = BEFORE_PATH;\n    var subPathDepth = 0;\n    var c, newChar, key, type, transition, action, typeMap;\n\n    var actions = [];\n\n    actions[PUSH] = function () {\n      if (key !== undefined) {\n        keys.push(key);\n        key = undefined;\n      }\n    };\n\n    actions[APPEND] = function () {\n      if (key === undefined) {\n        key = newChar;\n      } else {\n        key += newChar;\n      }\n    };\n\n    actions[INC_SUB_PATH_DEPTH] = function () {\n      actions[APPEND]();\n      subPathDepth++;\n    };\n\n    actions[PUSH_SUB_PATH] = function () {\n      if (subPathDepth > 0) {\n        subPathDepth--;\n        mode = IN_SUB_PATH;\n        actions[APPEND]();\n      } else {\n        subPathDepth = 0;\n        key = formatSubPath(key);\n        if (key === false) {\n          return false;\n        } else {\n          actions[PUSH]();\n        }\n      }\n    };\n\n    function maybeUnescapeQuote() {\n      var nextChar = path[index + 1];\n      if (mode === IN_SINGLE_QUOTE && nextChar === \"'\" || mode === IN_DOUBLE_QUOTE && nextChar === '\"') {\n        index++;\n        newChar = '\\\\' + nextChar;\n        actions[APPEND]();\n        return true;\n      }\n    }\n\n    while (mode != null) {\n      index++;\n      c = path[index];\n\n      if (c === '\\\\' && maybeUnescapeQuote()) {\n        continue;\n      }\n\n      type = getPathCharType(c);\n      typeMap = pathStateMachine[mode];\n      transition = typeMap[type] || typeMap['else'] || ERROR;\n\n      if (transition === ERROR) {\n        return; // parse error\n      }\n\n      mode = transition[0];\n      action = actions[transition[1]];\n      if (action) {\n        newChar = transition[2];\n        newChar = newChar === undefined ? c : newChar;\n        if (action() === false) {\n          return;\n        }\n      }\n\n      if (mode === AFTER_PATH) {\n        keys.raw = path;\n        return keys;\n      }\n    }\n  }\n\n  /**\n   * External parse that check for a cache hit first\n   *\n   * @param {String} path\n   * @return {Array|undefined}\n   */\n\n  function parsePath(path) {\n    var hit = pathCache.get(path);\n    if (!hit) {\n      hit = parse(path);\n      if (hit) {\n        pathCache.put(path, hit);\n      }\n    }\n    return hit;\n  }\n\n  /**\n   * Get from an object from a path string\n   *\n   * @param {Object} obj\n   * @param {String} path\n   */\n\n  function getPath(obj, path) {\n    return parseExpression(path).get(obj);\n  }\n\n  /**\n   * Warn against setting non-existent root path on a vm.\n   */\n\n  var warnNonExistent;\n  if ('development' !== 'production') {\n    warnNonExistent = function (path) {\n      warn('You are setting a non-existent path \"' + path.raw + '\" ' + 'on a vm instance. Consider pre-initializing the property ' + 'with the \"data\" option for more reliable reactivity ' + 'and better performance.');\n    };\n  }\n\n  /**\n   * Set on an object from a path\n   *\n   * @param {Object} obj\n   * @param {String | Array} path\n   * @param {*} val\n   */\n\n  function setPath(obj, path, val) {\n    var original = obj;\n    if (typeof path === 'string') {\n      path = parse(path);\n    }\n    if (!path || !isObject(obj)) {\n      return false;\n    }\n    var last, key;\n    for (var i = 0, l = path.length; i < l; i++) {\n      last = obj;\n      key = path[i];\n      if (key.charAt(0) === '*') {\n        key = parseExpression(key.slice(1)).get.call(original, original);\n      }\n      if (i < l - 1) {\n        obj = obj[key];\n        if (!isObject(obj)) {\n          obj = {};\n          if ('development' !== 'production' && last._isVue) {\n            warnNonExistent(path);\n          }\n          set(last, key, obj);\n        }\n      } else {\n        if (isArray(obj)) {\n          obj.$set(key, val);\n        } else if (key in obj) {\n          obj[key] = val;\n        } else {\n          if ('development' !== 'production' && obj._isVue) {\n            warnNonExistent(path);\n          }\n          set(obj, key, val);\n        }\n      }\n    }\n    return true;\n  }\n\n  var path = Object.freeze({\n    parsePath: parsePath,\n    getPath: getPath,\n    setPath: setPath\n  });\n\n  var expressionCache = new Cache(1000);\n\n  var allowedKeywords = 'Math,Date,this,true,false,null,undefined,Infinity,NaN,' + 'isNaN,isFinite,decodeURI,decodeURIComponent,encodeURI,' + 'encodeURIComponent,parseInt,parseFloat';\n  var allowedKeywordsRE = new RegExp('^(' + allowedKeywords.replace(/,/g, '\\\\b|') + '\\\\b)');\n\n  // keywords that don't make sense inside expressions\n  var improperKeywords = 'break,case,class,catch,const,continue,debugger,default,' + 'delete,do,else,export,extends,finally,for,function,if,' + 'import,in,instanceof,let,return,super,switch,throw,try,' + 'var,while,with,yield,enum,await,implements,package,' + 'proctected,static,interface,private,public';\n  var improperKeywordsRE = new RegExp('^(' + improperKeywords.replace(/,/g, '\\\\b|') + '\\\\b)');\n\n  var wsRE = /\\s/g;\n  var newlineRE = /\\n/g;\n  var saveRE = /[\\{,]\\s*[\\w\\$_]+\\s*:|('[^']*'|\"[^\"]*\")|new |typeof |void /g;\n  var restoreRE = /\"(\\d+)\"/g;\n  var pathTestRE = /^[A-Za-z_$][\\w$]*(\\.[A-Za-z_$][\\w$]*|\\['.*?'\\]|\\[\".*?\"\\]|\\[\\d+\\]|\\[[A-Za-z_$][\\w$]*\\])*$/;\n  var pathReplaceRE = /[^\\w$\\.]([A-Za-z_$][\\w$]*(\\.[A-Za-z_$][\\w$]*|\\['.*?'\\]|\\[\".*?\"\\])*)/g;\n  var booleanLiteralRE = /^(true|false)$/;\n\n  /**\n   * Save / Rewrite / Restore\n   *\n   * When rewriting paths found in an expression, it is\n   * possible for the same letter sequences to be found in\n   * strings and Object literal property keys. Therefore we\n   * remove and store these parts in a temporary array, and\n   * restore them after the path rewrite.\n   */\n\n  var saved = [];\n\n  /**\n   * Save replacer\n   *\n   * The save regex can match two possible cases:\n   * 1. An opening object literal\n   * 2. A string\n   * If matched as a plain string, we need to escape its\n   * newlines, since the string needs to be preserved when\n   * generating the function body.\n   *\n   * @param {String} str\n   * @param {String} isString - str if matched as a string\n   * @return {String} - placeholder with index\n   */\n\n  function save(str, isString) {\n    var i = saved.length;\n    saved[i] = isString ? str.replace(newlineRE, '\\\\n') : str;\n    return '\"' + i + '\"';\n  }\n\n  /**\n   * Path rewrite replacer\n   *\n   * @param {String} raw\n   * @return {String}\n   */\n\n  function rewrite(raw) {\n    var c = raw.charAt(0);\n    var path = raw.slice(1);\n    if (allowedKeywordsRE.test(path)) {\n      return raw;\n    } else {\n      path = path.indexOf('\"') > -1 ? path.replace(restoreRE, restore) : path;\n      return c + 'scope.' + path;\n    }\n  }\n\n  /**\n   * Restore replacer\n   *\n   * @param {String} str\n   * @param {String} i - matched save index\n   * @return {String}\n   */\n\n  function restore(str, i) {\n    return saved[i];\n  }\n\n  /**\n   * Rewrite an expression, prefixing all path accessors with\n   * `scope.` and generate getter/setter functions.\n   *\n   * @param {String} exp\n   * @return {Function}\n   */\n\n  function compileGetter(exp) {\n    if (improperKeywordsRE.test(exp)) {\n      'development' !== 'production' && warn('Avoid using reserved keywords in expression: ' + exp);\n    }\n    // reset state\n    saved.length = 0;\n    // save strings and object literal keys\n    var body = exp.replace(saveRE, save).replace(wsRE, '');\n    // rewrite all paths\n    // pad 1 space here becaue the regex matches 1 extra char\n    body = (' ' + body).replace(pathReplaceRE, rewrite).replace(restoreRE, restore);\n    return makeGetterFn(body);\n  }\n\n  /**\n   * Build a getter function. Requires eval.\n   *\n   * We isolate the try/catch so it doesn't affect the\n   * optimization of the parse function when it is not called.\n   *\n   * @param {String} body\n   * @return {Function|undefined}\n   */\n\n  function makeGetterFn(body) {\n    try {\n      return new Function('scope', 'return ' + body + ';');\n    } catch (e) {\n      'development' !== 'production' && warn('Invalid expression. ' + 'Generated function body: ' + body);\n    }\n  }\n\n  /**\n   * Compile a setter function for the expression.\n   *\n   * @param {String} exp\n   * @return {Function|undefined}\n   */\n\n  function compileSetter(exp) {\n    var path = parsePath(exp);\n    if (path) {\n      return function (scope, val) {\n        setPath(scope, path, val);\n      };\n    } else {\n      'development' !== 'production' && warn('Invalid setter expression: ' + exp);\n    }\n  }\n\n  /**\n   * Parse an expression into re-written getter/setters.\n   *\n   * @param {String} exp\n   * @param {Boolean} needSet\n   * @return {Function}\n   */\n\n  function parseExpression(exp, needSet) {\n    exp = exp.trim();\n    // try cache\n    var hit = expressionCache.get(exp);\n    if (hit) {\n      if (needSet && !hit.set) {\n        hit.set = compileSetter(hit.exp);\n      }\n      return hit;\n    }\n    var res = { exp: exp };\n    res.get = isSimplePath(exp) && exp.indexOf('[') < 0\n    // optimized super simple getter\n    ? makeGetterFn('scope.' + exp)\n    // dynamic getter\n    : compileGetter(exp);\n    if (needSet) {\n      res.set = compileSetter(exp);\n    }\n    expressionCache.put(exp, res);\n    return res;\n  }\n\n  /**\n   * Check if an expression is a simple path.\n   *\n   * @param {String} exp\n   * @return {Boolean}\n   */\n\n  function isSimplePath(exp) {\n    return pathTestRE.test(exp) &&\n    // don't treat true/false as paths\n    !booleanLiteralRE.test(exp) &&\n    // Math constants e.g. Math.PI, Math.E etc.\n    exp.slice(0, 5) !== 'Math.';\n  }\n\n  var expression = Object.freeze({\n    parseExpression: parseExpression,\n    isSimplePath: isSimplePath\n  });\n\n  // we have two separate queues: one for directive updates\n  // and one for user watcher registered via $watch().\n  // we want to guarantee directive updates to be called\n  // before user watchers so that when user watchers are\n  // triggered, the DOM would have already been in updated\n  // state.\n  var queue = [];\n  var userQueue = [];\n  var has = {};\n  var circular = {};\n  var waiting = false;\n  var internalQueueDepleted = false;\n\n  /**\n   * Reset the batcher's state.\n   */\n\n  function resetBatcherState() {\n    queue = [];\n    userQueue = [];\n    has = {};\n    circular = {};\n    waiting = internalQueueDepleted = false;\n  }\n\n  /**\n   * Flush both queues and run the watchers.\n   */\n\n  function flushBatcherQueue() {\n    runBatcherQueue(queue);\n    internalQueueDepleted = true;\n    runBatcherQueue(userQueue);\n    // dev tool hook\n    /* istanbul ignore if */\n    if ('development' !== 'production') {\n      if (inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__) {\n        window.__VUE_DEVTOOLS_GLOBAL_HOOK__.emit('flush');\n      }\n    }\n    resetBatcherState();\n  }\n\n  /**\n   * Run the watchers in a single queue.\n   *\n   * @param {Array} queue\n   */\n\n  function runBatcherQueue(queue) {\n    // do not cache length because more watchers might be pushed\n    // as we run existing watchers\n    for (var i = 0; i < queue.length; i++) {\n      var watcher = queue[i];\n      var id = watcher.id;\n      has[id] = null;\n      watcher.run();\n      // in dev build, check and stop circular updates.\n      if ('development' !== 'production' && has[id] != null) {\n        circular[id] = (circular[id] || 0) + 1;\n        if (circular[id] > config._maxUpdateCount) {\n          queue.splice(has[id], 1);\n          warn('You may have an infinite update loop for watcher ' + 'with expression: ' + watcher.expression);\n        }\n      }\n    }\n  }\n\n  /**\n   * Push a watcher into the watcher queue.\n   * Jobs with duplicate IDs will be skipped unless it's\n   * pushed when the queue is being flushed.\n   *\n   * @param {Watcher} watcher\n   *   properties:\n   *   - {Number} id\n   *   - {Function} run\n   */\n\n  function pushWatcher(watcher) {\n    var id = watcher.id;\n    if (has[id] == null) {\n      // if an internal watcher is pushed, but the internal\n      // queue is already depleted, we run it immediately.\n      if (internalQueueDepleted && !watcher.user) {\n        watcher.run();\n        return;\n      }\n      // push watcher into appropriate queue\n      var q = watcher.user ? userQueue : queue;\n      has[id] = q.length;\n      q.push(watcher);\n      // queue the flush\n      if (!waiting) {\n        waiting = true;\n        nextTick(flushBatcherQueue);\n      }\n    }\n  }\n\n  var uid$2 = 0;\n\n  /**\n   * A watcher parses an expression, collects dependencies,\n   * and fires callback when the expression value changes.\n   * This is used for both the $watch() api and directives.\n   *\n   * @param {Vue} vm\n   * @param {String} expression\n   * @param {Function} cb\n   * @param {Object} options\n   *                 - {Array} filters\n   *                 - {Boolean} twoWay\n   *                 - {Boolean} deep\n   *                 - {Boolean} user\n   *                 - {Boolean} sync\n   *                 - {Boolean} lazy\n   *                 - {Function} [preProcess]\n   *                 - {Function} [postProcess]\n   * @constructor\n   */\n  function Watcher(vm, expOrFn, cb, options) {\n    // mix in options\n    if (options) {\n      extend(this, options);\n    }\n    var isFn = typeof expOrFn === 'function';\n    this.vm = vm;\n    vm._watchers.push(this);\n    this.expression = isFn ? expOrFn.toString() : expOrFn;\n    this.cb = cb;\n    this.id = ++uid$2; // uid for batching\n    this.active = true;\n    this.dirty = this.lazy; // for lazy watchers\n    this.deps = Object.create(null);\n    this.newDeps = null;\n    this.prevError = null; // for async error stacks\n    // parse expression for getter/setter\n    if (isFn) {\n      this.getter = expOrFn;\n      this.setter = undefined;\n    } else {\n      var res = parseExpression(expOrFn, this.twoWay);\n      this.getter = res.get;\n      this.setter = res.set;\n    }\n    this.value = this.lazy ? undefined : this.get();\n    // state for avoiding false triggers for deep and Array\n    // watchers during vm._digest()\n    this.queued = this.shallow = false;\n  }\n\n  /**\n   * Add a dependency to this directive.\n   *\n   * @param {Dep} dep\n   */\n\n  Watcher.prototype.addDep = function (dep) {\n    var id = dep.id;\n    if (!this.newDeps[id]) {\n      this.newDeps[id] = dep;\n      if (!this.deps[id]) {\n        this.deps[id] = dep;\n        dep.addSub(this);\n      }\n    }\n  };\n\n  /**\n   * Evaluate the getter, and re-collect dependencies.\n   */\n\n  Watcher.prototype.get = function () {\n    this.beforeGet();\n    var scope = this.scope || this.vm;\n    var value;\n    try {\n      value = this.getter.call(scope, scope);\n    } catch (e) {\n      if ('development' !== 'production' && config.warnExpressionErrors) {\n        warn('Error when evaluating expression \"' + this.expression + '\". ' + (config.debug ? '' : 'Turn on debug mode to see stack trace.'), e);\n      }\n    }\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    if (this.preProcess) {\n      value = this.preProcess(value);\n    }\n    if (this.filters) {\n      value = scope._applyFilters(value, null, this.filters, false);\n    }\n    if (this.postProcess) {\n      value = this.postProcess(value);\n    }\n    this.afterGet();\n    return value;\n  };\n\n  /**\n   * Set the corresponding value with the setter.\n   *\n   * @param {*} value\n   */\n\n  Watcher.prototype.set = function (value) {\n    var scope = this.scope || this.vm;\n    if (this.filters) {\n      value = scope._applyFilters(value, this.value, this.filters, true);\n    }\n    try {\n      this.setter.call(scope, scope, value);\n    } catch (e) {\n      if ('development' !== 'production' && config.warnExpressionErrors) {\n        warn('Error when evaluating setter \"' + this.expression + '\"', e);\n      }\n    }\n    // two-way sync for v-for alias\n    var forContext = scope.$forContext;\n    if (forContext && forContext.alias === this.expression) {\n      if (forContext.filters) {\n        'development' !== 'production' && warn('It seems you are using two-way binding on ' + 'a v-for alias (' + this.expression + '), and the ' + 'v-for has filters. This will not work properly. ' + 'Either remove the filters or use an array of ' + 'objects and bind to object properties instead.');\n        return;\n      }\n      forContext._withLock(function () {\n        if (scope.$key) {\n          // original is an object\n          forContext.rawValue[scope.$key] = value;\n        } else {\n          forContext.rawValue.$set(scope.$index, value);\n        }\n      });\n    }\n  };\n\n  /**\n   * Prepare for dependency collection.\n   */\n\n  Watcher.prototype.beforeGet = function () {\n    Dep.target = this;\n    this.newDeps = Object.create(null);\n  };\n\n  /**\n   * Clean up for dependency collection.\n   */\n\n  Watcher.prototype.afterGet = function () {\n    Dep.target = null;\n    var ids = Object.keys(this.deps);\n    var i = ids.length;\n    while (i--) {\n      var id = ids[i];\n      if (!this.newDeps[id]) {\n        this.deps[id].removeSub(this);\n      }\n    }\n    this.deps = this.newDeps;\n  };\n\n  /**\n   * Subscriber interface.\n   * Will be called when a dependency changes.\n   *\n   * @param {Boolean} shallow\n   */\n\n  Watcher.prototype.update = function (shallow) {\n    if (this.lazy) {\n      this.dirty = true;\n    } else if (this.sync || !config.async) {\n      this.run();\n    } else {\n      // if queued, only overwrite shallow with non-shallow,\n      // but not the other way around.\n      this.shallow = this.queued ? shallow ? this.shallow : false : !!shallow;\n      this.queued = true;\n      // record before-push error stack in debug mode\n      /* istanbul ignore if */\n      if ('development' !== 'production' && config.debug) {\n        this.prevError = new Error('[vue] async stack trace');\n      }\n      pushWatcher(this);\n    }\n  };\n\n  /**\n   * Batcher job interface.\n   * Will be called by the batcher.\n   */\n\n  Watcher.prototype.run = function () {\n    if (this.active) {\n      var value = this.get();\n      if (value !== this.value ||\n      // Deep watchers and Array watchers should fire even\n      // when the value is the same, because the value may\n      // have mutated; but only do so if this is a\n      // non-shallow update (caused by a vm digest).\n      (isArray(value) || this.deep) && !this.shallow) {\n        // set new value\n        var oldValue = this.value;\n        this.value = value;\n        // in debug + async mode, when a watcher callbacks\n        // throws, we also throw the saved before-push error\n        // so the full cross-tick stack trace is available.\n        var prevError = this.prevError;\n        /* istanbul ignore if */\n        if ('development' !== 'production' && config.debug && prevError) {\n          this.prevError = null;\n          try {\n            this.cb.call(this.vm, value, oldValue);\n          } catch (e) {\n            nextTick(function () {\n              throw prevError;\n            }, 0);\n            throw e;\n          }\n        } else {\n          this.cb.call(this.vm, value, oldValue);\n        }\n      }\n      this.queued = this.shallow = false;\n    }\n  };\n\n  /**\n   * Evaluate the value of the watcher.\n   * This only gets called for lazy watchers.\n   */\n\n  Watcher.prototype.evaluate = function () {\n    // avoid overwriting another watcher that is being\n    // collected.\n    var current = Dep.target;\n    this.value = this.get();\n    this.dirty = false;\n    Dep.target = current;\n  };\n\n  /**\n   * Depend on all deps collected by this watcher.\n   */\n\n  Watcher.prototype.depend = function () {\n    var depIds = Object.keys(this.deps);\n    var i = depIds.length;\n    while (i--) {\n      this.deps[depIds[i]].depend();\n    }\n  };\n\n  /**\n   * Remove self from all dependencies' subcriber list.\n   */\n\n  Watcher.prototype.teardown = function () {\n    if (this.active) {\n      // remove self from vm's watcher list\n      // we can skip this if the vm if being destroyed\n      // which can improve teardown performance.\n      if (!this.vm._isBeingDestroyed) {\n        this.vm._watchers.$remove(this);\n      }\n      var depIds = Object.keys(this.deps);\n      var i = depIds.length;\n      while (i--) {\n        this.deps[depIds[i]].removeSub(this);\n      }\n      this.active = false;\n      this.vm = this.cb = this.value = null;\n    }\n  };\n\n  /**\n   * Recrusively traverse an object to evoke all converted\n   * getters, so that every nested property inside the object\n   * is collected as a \"deep\" dependency.\n   *\n   * @param {*} val\n   */\n\n  function traverse(val) {\n    var i, keys;\n    if (isArray(val)) {\n      i = val.length;\n      while (i--) traverse(val[i]);\n    } else if (isObject(val)) {\n      keys = Object.keys(val);\n      i = keys.length;\n      while (i--) traverse(val[keys[i]]);\n    }\n  }\n\n  var cloak = {\n    bind: function bind() {\n      var el = this.el;\n      this.vm.$once('hook:compiled', function () {\n        el.removeAttribute('v-cloak');\n      });\n    }\n  };\n\n  var ref = {\n    bind: function bind() {\n      'development' !== 'production' && warn('v-ref:' + this.arg + ' must be used on a child ' + 'component. Found on <' + this.el.tagName.toLowerCase() + '>.');\n    }\n  };\n\n  var el = {\n\n    priority: 1500,\n\n    bind: function bind() {\n      /* istanbul ignore if */\n      if (!this.arg) {\n        return;\n      }\n      var id = this.id = camelize(this.arg);\n      var refs = (this._scope || this.vm).$els;\n      if (hasOwn(refs, id)) {\n        refs[id] = this.el;\n      } else {\n        defineReactive(refs, id, this.el);\n      }\n    },\n\n    unbind: function unbind() {\n      var refs = (this._scope || this.vm).$els;\n      if (refs[this.id] === this.el) {\n        refs[this.id] = null;\n      }\n    }\n  };\n\n  var prefixes = ['-webkit-', '-moz-', '-ms-'];\n  var camelPrefixes = ['Webkit', 'Moz', 'ms'];\n  var importantRE = /!important;?$/;\n  var propCache = Object.create(null);\n\n  var testEl = null;\n\n  var style = {\n\n    deep: true,\n\n    update: function update(value) {\n      if (typeof value === 'string') {\n        this.el.style.cssText = value;\n      } else if (isArray(value)) {\n        this.handleObject(value.reduce(extend, {}));\n      } else {\n        this.handleObject(value || {});\n      }\n    },\n\n    handleObject: function handleObject(value) {\n      // cache object styles so that only changed props\n      // are actually updated.\n      var cache = this.cache || (this.cache = {});\n      var name, val;\n      for (name in cache) {\n        if (!(name in value)) {\n          this.handleSingle(name, null);\n          delete cache[name];\n        }\n      }\n      for (name in value) {\n        val = value[name];\n        if (val !== cache[name]) {\n          cache[name] = val;\n          this.handleSingle(name, val);\n        }\n      }\n    },\n\n    handleSingle: function handleSingle(prop, value) {\n      prop = normalize(prop);\n      if (!prop) return; // unsupported prop\n      // cast possible numbers/booleans into strings\n      if (value != null) value += '';\n      if (value) {\n        var isImportant = importantRE.test(value) ? 'important' : '';\n        if (isImportant) {\n          value = value.replace(importantRE, '').trim();\n        }\n        this.el.style.setProperty(prop, value, isImportant);\n      } else {\n        this.el.style.removeProperty(prop);\n      }\n    }\n\n  };\n\n  /**\n   * Normalize a CSS property name.\n   * - cache result\n   * - auto prefix\n   * - camelCase -> dash-case\n   *\n   * @param {String} prop\n   * @return {String}\n   */\n\n  function normalize(prop) {\n    if (propCache[prop]) {\n      return propCache[prop];\n    }\n    var res = prefix(prop);\n    propCache[prop] = propCache[res] = res;\n    return res;\n  }\n\n  /**\n   * Auto detect the appropriate prefix for a CSS property.\n   * https://gist.github.com/paulirish/523692\n   *\n   * @param {String} prop\n   * @return {String}\n   */\n\n  function prefix(prop) {\n    prop = hyphenate(prop);\n    var camel = camelize(prop);\n    var upper = camel.charAt(0).toUpperCase() + camel.slice(1);\n    if (!testEl) {\n      testEl = document.createElement('div');\n    }\n    if (camel in testEl.style) {\n      return prop;\n    }\n    var i = prefixes.length;\n    var prefixed;\n    while (i--) {\n      prefixed = camelPrefixes[i] + upper;\n      if (prefixed in testEl.style) {\n        return prefixes[i] + prop;\n      }\n    }\n  }\n\n  // xlink\n  var xlinkNS = 'http://www.w3.org/1999/xlink';\n  var xlinkRE = /^xlink:/;\n\n  // these input element attributes should also set their\n  // corresponding properties\n  var inputProps = {\n    value: 1,\n    checked: 1,\n    selected: 1\n  };\n\n  // these attributes should set a hidden property for\n  // binding v-model to object values\n  var modelProps = {\n    value: '_value',\n    'true-value': '_trueValue',\n    'false-value': '_falseValue'\n  };\n\n  // check for attributes that prohibit interpolations\n  var disallowedInterpAttrRE = /^v-|^:|^@|^(is|transition|transition-mode|debounce|track-by|stagger|enter-stagger|leave-stagger)$/;\n\n  var bind = {\n\n    priority: 850,\n\n    bind: function bind() {\n      var attr = this.arg;\n      var tag = this.el.tagName;\n      // should be deep watch on object mode\n      if (!attr) {\n        this.deep = true;\n      }\n      // handle interpolation bindings\n      if (this.descriptor.interp) {\n        // only allow binding on native attributes\n        if (disallowedInterpAttrRE.test(attr) || attr === 'name' && (tag === 'PARTIAL' || tag === 'SLOT')) {\n          'development' !== 'production' && warn(attr + '=\"' + this.descriptor.raw + '\": ' + 'attribute interpolation is not allowed in Vue.js ' + 'directives and special attributes.');\n          this.el.removeAttribute(attr);\n          this.invalid = true;\n        }\n\n        /* istanbul ignore if */\n        if ('development' !== 'production') {\n          var raw = attr + '=\"' + this.descriptor.raw + '\": ';\n          // warn src\n          if (attr === 'src') {\n            warn(raw + 'interpolation in \"src\" attribute will cause ' + 'a 404 request. Use v-bind:src instead.');\n          }\n\n          // warn style\n          if (attr === 'style') {\n            warn(raw + 'interpolation in \"style\" attribute will cause ' + 'the attribute to be discarded in Internet Explorer. ' + 'Use v-bind:style instead.');\n          }\n        }\n      }\n    },\n\n    update: function update(value) {\n      if (this.invalid) {\n        return;\n      }\n      var attr = this.arg;\n      if (this.arg) {\n        this.handleSingle(attr, value);\n      } else {\n        this.handleObject(value || {});\n      }\n    },\n\n    // share object handler with v-bind:class\n    handleObject: style.handleObject,\n\n    handleSingle: function handleSingle(attr, value) {\n      if (inputProps[attr] && attr in this.el) {\n        this.el[attr] = attr === 'value' ? value || '' : // IE9 will set input.value to \"null\" for null...\n        value;\n      }\n      // set model props\n      var modelProp = modelProps[attr];\n      if (modelProp) {\n        this.el[modelProp] = value;\n        // update v-model if present\n        var model = this.el.__v_model;\n        if (model) {\n          model.listener();\n        }\n      }\n      // do not set value attribute for textarea\n      if (attr === 'value' && this.el.tagName === 'TEXTAREA') {\n        this.el.removeAttribute(attr);\n        return;\n      }\n      // update attribute\n      if (value != null && value !== false) {\n        if (xlinkRE.test(attr)) {\n          this.el.setAttributeNS(xlinkNS, attr, value);\n        } else {\n          this.el.setAttribute(attr, value);\n        }\n      } else {\n        this.el.removeAttribute(attr);\n      }\n    }\n  };\n\n  // keyCode aliases\n  var keyCodes = {\n    esc: 27,\n    tab: 9,\n    enter: 13,\n    space: 32,\n    'delete': 46,\n    up: 38,\n    left: 37,\n    right: 39,\n    down: 40\n  };\n\n  function keyFilter(handler, keys) {\n    var codes = keys.map(function (key) {\n      var charCode = key.charCodeAt(0);\n      if (charCode > 47 && charCode < 58) {\n        return parseInt(key, 10);\n      }\n      if (key.length === 1) {\n        charCode = key.toUpperCase().charCodeAt(0);\n        if (charCode > 64 && charCode < 91) {\n          return charCode;\n        }\n      }\n      return keyCodes[key];\n    });\n    return function keyHandler(e) {\n      if (codes.indexOf(e.keyCode) > -1) {\n        return handler.call(this, e);\n      }\n    };\n  }\n\n  function stopFilter(handler) {\n    return function stopHandler(e) {\n      e.stopPropagation();\n      return handler.call(this, e);\n    };\n  }\n\n  function preventFilter(handler) {\n    return function preventHandler(e) {\n      e.preventDefault();\n      return handler.call(this, e);\n    };\n  }\n\n  var on = {\n\n    acceptStatement: true,\n    priority: 700,\n\n    bind: function bind() {\n      // deal with iframes\n      if (this.el.tagName === 'IFRAME' && this.arg !== 'load') {\n        var self = this;\n        this.iframeBind = function () {\n          on$1(self.el.contentWindow, self.arg, self.handler);\n        };\n        this.on('load', this.iframeBind);\n      }\n    },\n\n    update: function update(handler) {\n      // stub a noop for v-on with no value,\n      // e.g. @mousedown.prevent\n      if (!this.descriptor.raw) {\n        handler = function () {};\n      }\n\n      if (typeof handler !== 'function') {\n        'development' !== 'production' && warn('v-on:' + this.arg + '=\"' + this.expression + '\" expects a function value, ' + 'got ' + handler);\n        return;\n      }\n\n      // apply modifiers\n      if (this.modifiers.stop) {\n        handler = stopFilter(handler);\n      }\n      if (this.modifiers.prevent) {\n        handler = preventFilter(handler);\n      }\n      // key filter\n      var keys = Object.keys(this.modifiers).filter(function (key) {\n        return key !== 'stop' && key !== 'prevent';\n      });\n      if (keys.length) {\n        handler = keyFilter(handler, keys);\n      }\n\n      this.reset();\n      this.handler = handler;\n\n      if (this.iframeBind) {\n        this.iframeBind();\n      } else {\n        on$1(this.el, this.arg, this.handler);\n      }\n    },\n\n    reset: function reset() {\n      var el = this.iframeBind ? this.el.contentWindow : this.el;\n      if (this.handler) {\n        off(el, this.arg, this.handler);\n      }\n    },\n\n    unbind: function unbind() {\n      this.reset();\n    }\n  };\n\n  var checkbox = {\n\n    bind: function bind() {\n      var self = this;\n      var el = this.el;\n\n      this.getValue = function () {\n        return el.hasOwnProperty('_value') ? el._value : self.params.number ? toNumber(el.value) : el.value;\n      };\n\n      function getBooleanValue() {\n        var val = el.checked;\n        if (val && el.hasOwnProperty('_trueValue')) {\n          return el._trueValue;\n        }\n        if (!val && el.hasOwnProperty('_falseValue')) {\n          return el._falseValue;\n        }\n        return val;\n      }\n\n      this.listener = function () {\n        var model = self._watcher.value;\n        if (isArray(model)) {\n          var val = self.getValue();\n          if (el.checked) {\n            if (indexOf(model, val) < 0) {\n              model.push(val);\n            }\n          } else {\n            model.$remove(val);\n          }\n        } else {\n          self.set(getBooleanValue());\n        }\n      };\n\n      this.on('change', this.listener);\n      if (el.checked) {\n        this.afterBind = this.listener;\n      }\n    },\n\n    update: function update(value) {\n      var el = this.el;\n      if (isArray(value)) {\n        el.checked = indexOf(value, this.getValue()) > -1;\n      } else {\n        if (el.hasOwnProperty('_trueValue')) {\n          el.checked = looseEqual(value, el._trueValue);\n        } else {\n          el.checked = !!value;\n        }\n      }\n    }\n  };\n\n  var select = {\n\n    bind: function bind() {\n      var self = this;\n      var el = this.el;\n\n      // method to force update DOM using latest value.\n      this.forceUpdate = function () {\n        if (self._watcher) {\n          self.update(self._watcher.get());\n        }\n      };\n\n      // check if this is a multiple select\n      var multiple = this.multiple = el.hasAttribute('multiple');\n\n      // attach listener\n      this.listener = function () {\n        var value = getValue(el, multiple);\n        value = self.params.number ? isArray(value) ? value.map(toNumber) : toNumber(value) : value;\n        self.set(value);\n      };\n      this.on('change', this.listener);\n\n      // if has initial value, set afterBind\n      var initValue = getValue(el, multiple, true);\n      if (multiple && initValue.length || !multiple && initValue !== null) {\n        this.afterBind = this.listener;\n      }\n\n      // All major browsers except Firefox resets\n      // selectedIndex with value -1 to 0 when the element\n      // is appended to a new parent, therefore we have to\n      // force a DOM update whenever that happens...\n      this.vm.$on('hook:attached', this.forceUpdate);\n    },\n\n    update: function update(value) {\n      var el = this.el;\n      el.selectedIndex = -1;\n      var multi = this.multiple && isArray(value);\n      var options = el.options;\n      var i = options.length;\n      var op, val;\n      while (i--) {\n        op = options[i];\n        val = op.hasOwnProperty('_value') ? op._value : op.value;\n        /* eslint-disable eqeqeq */\n        op.selected = multi ? indexOf$1(value, val) > -1 : looseEqual(value, val);\n        /* eslint-enable eqeqeq */\n      }\n    },\n\n    unbind: function unbind() {\n      /* istanbul ignore next */\n      this.vm.$off('hook:attached', this.forceUpdate);\n    }\n  };\n\n  /**\n   * Get select value\n   *\n   * @param {SelectElement} el\n   * @param {Boolean} multi\n   * @param {Boolean} init\n   * @return {Array|*}\n   */\n\n  function getValue(el, multi, init) {\n    var res = multi ? [] : null;\n    var op, val, selected;\n    for (var i = 0, l = el.options.length; i < l; i++) {\n      op = el.options[i];\n      selected = init ? op.hasAttribute('selected') : op.selected;\n      if (selected) {\n        val = op.hasOwnProperty('_value') ? op._value : op.value;\n        if (multi) {\n          res.push(val);\n        } else {\n          return val;\n        }\n      }\n    }\n    return res;\n  }\n\n  /**\n   * Native Array.indexOf uses strict equal, but in this\n   * case we need to match string/numbers with custom equal.\n   *\n   * @param {Array} arr\n   * @param {*} val\n   */\n\n  function indexOf$1(arr, val) {\n    var i = arr.length;\n    while (i--) {\n      if (looseEqual(arr[i], val)) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  var radio = {\n\n    bind: function bind() {\n      var self = this;\n      var el = this.el;\n\n      this.getValue = function () {\n        // value overwrite via v-bind:value\n        if (el.hasOwnProperty('_value')) {\n          return el._value;\n        }\n        var val = el.value;\n        if (self.params.number) {\n          val = toNumber(val);\n        }\n        return val;\n      };\n\n      this.listener = function () {\n        self.set(self.getValue());\n      };\n      this.on('change', this.listener);\n\n      if (el.checked) {\n        this.afterBind = this.listener;\n      }\n    },\n\n    update: function update(value) {\n      this.el.checked = looseEqual(value, this.getValue());\n    }\n  };\n\n  var text$2 = {\n\n    bind: function bind() {\n      var self = this;\n      var el = this.el;\n      var isRange = el.type === 'range';\n      var lazy = this.params.lazy;\n      var number = this.params.number;\n      var debounce = this.params.debounce;\n\n      // handle composition events.\n      //   http://blog.evanyou.me/2014/01/03/composition-event/\n      // skip this for Android because it handles composition\n      // events quite differently. Android doesn't trigger\n      // composition events for language input methods e.g.\n      // Chinese, but instead triggers them for spelling\n      // suggestions... (see Discussion/#162)\n      var composing = false;\n      if (!isAndroid && !isRange) {\n        this.on('compositionstart', function () {\n          composing = true;\n        });\n        this.on('compositionend', function () {\n          composing = false;\n          // in IE11 the \"compositionend\" event fires AFTER\n          // the \"input\" event, so the input handler is blocked\n          // at the end... have to call it here.\n          //\n          // #1327: in lazy mode this is unecessary.\n          if (!lazy) {\n            self.listener();\n          }\n        });\n      }\n\n      // prevent messing with the input when user is typing,\n      // and force update on blur.\n      this.focused = false;\n      if (!isRange) {\n        this.on('focus', function () {\n          self.focused = true;\n        });\n        this.on('blur', function () {\n          self.focused = false;\n          self.listener();\n        });\n      }\n\n      // Now attach the main listener\n      this.listener = function () {\n        if (composing) return;\n        var val = number || isRange ? toNumber(el.value) : el.value;\n        self.set(val);\n        // force update on next tick to avoid lock & same value\n        // also only update when user is not typing\n        nextTick(function () {\n          if (self._bound && !self.focused) {\n            self.update(self._watcher.value);\n          }\n        });\n      };\n\n      // apply debounce\n      if (debounce) {\n        this.listener = _debounce(this.listener, debounce);\n      }\n\n      // Support jQuery events, since jQuery.trigger() doesn't\n      // trigger native events in some cases and some plugins\n      // rely on $.trigger()\n      //\n      // We want to make sure if a listener is attached using\n      // jQuery, it is also removed with jQuery, that's why\n      // we do the check for each directive instance and\n      // store that check result on itself. This also allows\n      // easier test coverage control by unsetting the global\n      // jQuery variable in tests.\n      this.hasjQuery = typeof jQuery === 'function';\n      if (this.hasjQuery) {\n        jQuery(el).on('change', this.listener);\n        if (!lazy) {\n          jQuery(el).on('input', this.listener);\n        }\n      } else {\n        this.on('change', this.listener);\n        if (!lazy) {\n          this.on('input', this.listener);\n        }\n      }\n\n      // IE9 doesn't fire input event on backspace/del/cut\n      if (!lazy && isIE9) {\n        this.on('cut', function () {\n          nextTick(self.listener);\n        });\n        this.on('keyup', function (e) {\n          if (e.keyCode === 46 || e.keyCode === 8) {\n            self.listener();\n          }\n        });\n      }\n\n      // set initial value if present\n      if (el.hasAttribute('value') || el.tagName === 'TEXTAREA' && el.value.trim()) {\n        this.afterBind = this.listener;\n      }\n    },\n\n    update: function update(value) {\n      this.el.value = _toString(value);\n    },\n\n    unbind: function unbind() {\n      var el = this.el;\n      if (this.hasjQuery) {\n        jQuery(el).off('change', this.listener);\n        jQuery(el).off('input', this.listener);\n      }\n    }\n  };\n\n  var handlers = {\n    text: text$2,\n    radio: radio,\n    select: select,\n    checkbox: checkbox\n  };\n\n  var model = {\n\n    priority: 800,\n    twoWay: true,\n    handlers: handlers,\n    params: ['lazy', 'number', 'debounce'],\n\n    /**\n     * Possible elements:\n     *   <select>\n     *   <textarea>\n     *   <input type=\"*\">\n     *     - text\n     *     - checkbox\n     *     - radio\n     *     - number\n     */\n\n    bind: function bind() {\n      // friendly warning...\n      this.checkFilters();\n      if (this.hasRead && !this.hasWrite) {\n        'development' !== 'production' && warn('It seems you are using a read-only filter with ' + 'v-model. You might want to use a two-way filter ' + 'to ensure correct behavior.');\n      }\n      var el = this.el;\n      var tag = el.tagName;\n      var handler;\n      if (tag === 'INPUT') {\n        handler = handlers[el.type] || handlers.text;\n      } else if (tag === 'SELECT') {\n        handler = handlers.select;\n      } else if (tag === 'TEXTAREA') {\n        handler = handlers.text;\n      } else {\n        'development' !== 'production' && warn('v-model does not support element type: ' + tag);\n        return;\n      }\n      el.__v_model = this;\n      handler.bind.call(this);\n      this.update = handler.update;\n      this._unbind = handler.unbind;\n    },\n\n    /**\n     * Check read/write filter stats.\n     */\n\n    checkFilters: function checkFilters() {\n      var filters = this.filters;\n      if (!filters) return;\n      var i = filters.length;\n      while (i--) {\n        var filter = resolveAsset(this.vm.$options, 'filters', filters[i].name);\n        if (typeof filter === 'function' || filter.read) {\n          this.hasRead = true;\n        }\n        if (filter.write) {\n          this.hasWrite = true;\n        }\n      }\n    },\n\n    unbind: function unbind() {\n      this.el.__v_model = null;\n      this._unbind && this._unbind();\n    }\n  };\n\n  var show = {\n\n    bind: function bind() {\n      // check else block\n      var next = this.el.nextElementSibling;\n      if (next && getAttr(next, 'v-else') !== null) {\n        this.elseEl = next;\n      }\n    },\n\n    update: function update(value) {\n      this.apply(this.el, value);\n      if (this.elseEl) {\n        this.apply(this.elseEl, !value);\n      }\n    },\n\n    apply: function apply(el, value) {\n      applyTransition(el, value ? 1 : -1, function () {\n        el.style.display = value ? '' : 'none';\n      }, this.vm);\n    }\n  };\n\n  var templateCache = new Cache(1000);\n  var idSelectorCache = new Cache(1000);\n\n  var map = {\n    efault: [0, '', ''],\n    legend: [1, '<fieldset>', '</fieldset>'],\n    tr: [2, '<table><tbody>', '</tbody></table>'],\n    col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>']\n  };\n\n  map.td = map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];\n\n  map.option = map.optgroup = [1, '<select multiple=\"multiple\">', '</select>'];\n\n  map.thead = map.tbody = map.colgroup = map.caption = map.tfoot = [1, '<table>', '</table>'];\n\n  map.g = map.defs = map.symbol = map.use = map.image = map.text = map.circle = map.ellipse = map.line = map.path = map.polygon = map.polyline = map.rect = [1, '<svg ' + 'xmlns=\"http://www.w3.org/2000/svg\" ' + 'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ' + 'xmlns:ev=\"http://www.w3.org/2001/xml-events\"' + 'version=\"1.1\">', '</svg>'];\n\n  /**\n   * Check if a node is a supported template node with a\n   * DocumentFragment content.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  function isRealTemplate(node) {\n    return isTemplate(node) && node.content instanceof DocumentFragment;\n  }\n\n  var tagRE$1 = /<([\\w:]+)/;\n  var entityRE = /&\\w+;|&#\\d+;|&#x[\\dA-F]+;/;\n\n  /**\n   * Convert a string template to a DocumentFragment.\n   * Determines correct wrapping by tag types. Wrapping\n   * strategy found in jQuery & component/domify.\n   *\n   * @param {String} templateString\n   * @param {Boolean} raw\n   * @return {DocumentFragment}\n   */\n\n  function stringToFragment(templateString, raw) {\n    // try a cache hit first\n    var hit = templateCache.get(templateString);\n    if (hit) {\n      return hit;\n    }\n\n    var frag = document.createDocumentFragment();\n    var tagMatch = templateString.match(tagRE$1);\n    var entityMatch = entityRE.test(templateString);\n\n    if (!tagMatch && !entityMatch) {\n      // text only, return a single text node.\n      frag.appendChild(document.createTextNode(templateString));\n    } else {\n\n      var tag = tagMatch && tagMatch[1];\n      var wrap = map[tag] || map.efault;\n      var depth = wrap[0];\n      var prefix = wrap[1];\n      var suffix = wrap[2];\n      var node = document.createElement('div');\n\n      if (!raw) {\n        templateString = templateString.trim();\n      }\n      node.innerHTML = prefix + templateString + suffix;\n      while (depth--) {\n        node = node.lastChild;\n      }\n\n      var child;\n      /* eslint-disable no-cond-assign */\n      while (child = node.firstChild) {\n        /* eslint-enable no-cond-assign */\n        frag.appendChild(child);\n      }\n    }\n\n    templateCache.put(templateString, frag);\n    return frag;\n  }\n\n  /**\n   * Convert a template node to a DocumentFragment.\n   *\n   * @param {Node} node\n   * @return {DocumentFragment}\n   */\n\n  function nodeToFragment(node) {\n    // if its a template tag and the browser supports it,\n    // its content is already a document fragment.\n    if (isRealTemplate(node)) {\n      trimNode(node.content);\n      return node.content;\n    }\n    // script template\n    if (node.tagName === 'SCRIPT') {\n      return stringToFragment(node.textContent);\n    }\n    // normal node, clone it to avoid mutating the original\n    var clonedNode = cloneNode(node);\n    var frag = document.createDocumentFragment();\n    var child;\n    /* eslint-disable no-cond-assign */\n    while (child = clonedNode.firstChild) {\n      /* eslint-enable no-cond-assign */\n      frag.appendChild(child);\n    }\n    trimNode(frag);\n    return frag;\n  }\n\n  // Test for the presence of the Safari template cloning bug\n  // https://bugs.webkit.org/showug.cgi?id=137755\n  var hasBrokenTemplate = (function () {\n    /* istanbul ignore else */\n    if (inBrowser) {\n      var a = document.createElement('div');\n      a.innerHTML = '<template>1</template>';\n      return !a.cloneNode(true).firstChild.innerHTML;\n    } else {\n      return false;\n    }\n  })();\n\n  // Test for IE10/11 textarea placeholder clone bug\n  var hasTextareaCloneBug = (function () {\n    /* istanbul ignore else */\n    if (inBrowser) {\n      var t = document.createElement('textarea');\n      t.placeholder = 't';\n      return t.cloneNode(true).value === 't';\n    } else {\n      return false;\n    }\n  })();\n\n  /**\n   * 1. Deal with Safari cloning nested <template> bug by\n   *    manually cloning all template instances.\n   * 2. Deal with IE10/11 textarea placeholder bug by setting\n   *    the correct value after cloning.\n   *\n   * @param {Element|DocumentFragment} node\n   * @return {Element|DocumentFragment}\n   */\n\n  function cloneNode(node) {\n    if (!node.querySelectorAll) {\n      return node.cloneNode();\n    }\n    var res = node.cloneNode(true);\n    var i, original, cloned;\n    /* istanbul ignore if */\n    if (hasBrokenTemplate) {\n      var tempClone = res;\n      if (isRealTemplate(node)) {\n        node = node.content;\n        tempClone = res.content;\n      }\n      original = node.querySelectorAll('template');\n      if (original.length) {\n        cloned = tempClone.querySelectorAll('template');\n        i = cloned.length;\n        while (i--) {\n          cloned[i].parentNode.replaceChild(cloneNode(original[i]), cloned[i]);\n        }\n      }\n    }\n    /* istanbul ignore if */\n    if (hasTextareaCloneBug) {\n      if (node.tagName === 'TEXTAREA') {\n        res.value = node.value;\n      } else {\n        original = node.querySelectorAll('textarea');\n        if (original.length) {\n          cloned = res.querySelectorAll('textarea');\n          i = cloned.length;\n          while (i--) {\n            cloned[i].value = original[i].value;\n          }\n        }\n      }\n    }\n    return res;\n  }\n\n  /**\n   * Process the template option and normalizes it into a\n   * a DocumentFragment that can be used as a partial or a\n   * instance template.\n   *\n   * @param {*} template\n   *        Possible values include:\n   *        - DocumentFragment object\n   *        - Node object of type Template\n   *        - id selector: '#some-template-id'\n   *        - template string: '<div><span>{{msg}}</span></div>'\n   * @param {Boolean} shouldClone\n   * @param {Boolean} raw\n   *        inline HTML interpolation. Do not check for id\n   *        selector and keep whitespace in the string.\n   * @return {DocumentFragment|undefined}\n   */\n\n  function parseTemplate(template, shouldClone, raw) {\n    var node, frag;\n\n    // if the template is already a document fragment,\n    // do nothing\n    if (template instanceof DocumentFragment) {\n      trimNode(template);\n      return shouldClone ? cloneNode(template) : template;\n    }\n\n    if (typeof template === 'string') {\n      // id selector\n      if (!raw && template.charAt(0) === '#') {\n        // id selector can be cached too\n        frag = idSelectorCache.get(template);\n        if (!frag) {\n          node = document.getElementById(template.slice(1));\n          if (node) {\n            frag = nodeToFragment(node);\n            // save selector to cache\n            idSelectorCache.put(template, frag);\n          }\n        }\n      } else {\n        // normal string template\n        frag = stringToFragment(template, raw);\n      }\n    } else if (template.nodeType) {\n      // a direct node\n      frag = nodeToFragment(template);\n    }\n\n    return frag && shouldClone ? cloneNode(frag) : frag;\n  }\n\n  var template = Object.freeze({\n    cloneNode: cloneNode,\n    parseTemplate: parseTemplate\n  });\n\n  /**\n   * Abstraction for a partially-compiled fragment.\n   * Can optionally compile content with a child scope.\n   *\n   * @param {Function} linker\n   * @param {Vue} vm\n   * @param {DocumentFragment} frag\n   * @param {Vue} [host]\n   * @param {Object} [scope]\n   */\n  function Fragment(linker, vm, frag, host, scope, parentFrag) {\n    this.children = [];\n    this.childFrags = [];\n    this.vm = vm;\n    this.scope = scope;\n    this.inserted = false;\n    this.parentFrag = parentFrag;\n    if (parentFrag) {\n      parentFrag.childFrags.push(this);\n    }\n    this.unlink = linker(vm, frag, host, scope, this);\n    var single = this.single = frag.childNodes.length === 1 &&\n    // do not go single mode if the only node is an anchor\n    !frag.childNodes[0].__vue_anchor;\n    if (single) {\n      this.node = frag.childNodes[0];\n      this.before = singleBefore;\n      this.remove = singleRemove;\n    } else {\n      this.node = createAnchor('fragment-start');\n      this.end = createAnchor('fragment-end');\n      this.frag = frag;\n      prepend(this.node, frag);\n      frag.appendChild(this.end);\n      this.before = multiBefore;\n      this.remove = multiRemove;\n    }\n    this.node.__vfrag__ = this;\n  }\n\n  /**\n   * Call attach/detach for all components contained within\n   * this fragment. Also do so recursively for all child\n   * fragments.\n   *\n   * @param {Function} hook\n   */\n\n  Fragment.prototype.callHook = function (hook) {\n    var i, l;\n    for (i = 0, l = this.children.length; i < l; i++) {\n      hook(this.children[i]);\n    }\n    for (i = 0, l = this.childFrags.length; i < l; i++) {\n      this.childFrags[i].callHook(hook);\n    }\n  };\n\n  /**\n   * Destroy the fragment.\n   */\n\n  Fragment.prototype.destroy = function () {\n    if (this.parentFrag) {\n      this.parentFrag.childFrags.$remove(this);\n    }\n    this.unlink();\n  };\n\n  /**\n   * Insert fragment before target, single node version\n   *\n   * @param {Node} target\n   * @param {Boolean} withTransition\n   */\n\n  function singleBefore(target, withTransition) {\n    this.inserted = true;\n    var method = withTransition !== false ? beforeWithTransition : before;\n    method(this.node, target, this.vm);\n    if (inDoc(this.node)) {\n      this.callHook(attach);\n    }\n  }\n\n  /**\n   * Remove fragment, single node version\n   */\n\n  function singleRemove() {\n    this.inserted = false;\n    var shouldCallRemove = inDoc(this.node);\n    var self = this;\n    self.callHook(destroyChild);\n    removeWithTransition(this.node, this.vm, function () {\n      if (shouldCallRemove) {\n        self.callHook(detach);\n      }\n      self.destroy();\n    });\n  }\n\n  /**\n   * Insert fragment before target, multi-nodes version\n   *\n   * @param {Node} target\n   * @param {Boolean} withTransition\n   */\n\n  function multiBefore(target, withTransition) {\n    this.inserted = true;\n    var vm = this.vm;\n    var method = withTransition !== false ? beforeWithTransition : before;\n    mapNodeRange(this.node, this.end, function (node) {\n      method(node, target, vm);\n    });\n    if (inDoc(this.node)) {\n      this.callHook(attach);\n    }\n  }\n\n  /**\n   * Remove fragment, multi-nodes version\n   */\n\n  function multiRemove() {\n    this.inserted = false;\n    var self = this;\n    var shouldCallRemove = inDoc(this.node);\n    self.callHook(destroyChild);\n    removeNodeRange(this.node, this.end, this.vm, this.frag, function () {\n      if (shouldCallRemove) {\n        self.callHook(detach);\n      }\n      self.destroy();\n    });\n  }\n\n  /**\n   * Call attach hook for a Vue instance.\n   *\n   * @param {Vue} child\n   */\n\n  function attach(child) {\n    if (!child._isAttached) {\n      child._callHook('attached');\n    }\n  }\n\n  /**\n   * Call destroy for all contained instances,\n   * with remove:false and defer:true.\n   * Defer is necessary because we need to\n   * keep the children to call detach hooks\n   * on them.\n   *\n   * @param {Vue} child\n   */\n\n  function destroyChild(child) {\n    child.$destroy(false, true);\n  }\n\n  /**\n   * Call detach hook for a Vue instance.\n   *\n   * @param {Vue} child\n   */\n\n  function detach(child) {\n    if (child._isAttached) {\n      child._callHook('detached');\n    }\n  }\n\n  var linkerCache = new Cache(5000);\n\n  /**\n   * A factory that can be used to create instances of a\n   * fragment. Caches the compiled linker if possible.\n   *\n   * @param {Vue} vm\n   * @param {Element|String} el\n   */\n  function FragmentFactory(vm, el) {\n    this.vm = vm;\n    var template;\n    var isString = typeof el === 'string';\n    if (isString || isTemplate(el)) {\n      template = parseTemplate(el, true);\n    } else {\n      template = document.createDocumentFragment();\n      template.appendChild(el);\n    }\n    this.template = template;\n    // linker can be cached, but only for components\n    var linker;\n    var cid = vm.constructor.cid;\n    if (cid > 0) {\n      var cacheId = cid + (isString ? el : el.outerHTML);\n      linker = linkerCache.get(cacheId);\n      if (!linker) {\n        linker = compile(template, vm.$options, true);\n        linkerCache.put(cacheId, linker);\n      }\n    } else {\n      linker = compile(template, vm.$options, true);\n    }\n    this.linker = linker;\n  }\n\n  /**\n   * Create a fragment instance with given host and scope.\n   *\n   * @param {Vue} host\n   * @param {Object} scope\n   * @param {Fragment} parentFrag\n   */\n\n  FragmentFactory.prototype.create = function (host, scope, parentFrag) {\n    var frag = cloneNode(this.template);\n    return new Fragment(this.linker, this.vm, frag, host, scope, parentFrag);\n  };\n\n  var vIf = {\n\n    priority: 2000,\n\n    bind: function bind() {\n      var el = this.el;\n      if (!el.__vue__) {\n        // check else block\n        var next = el.nextElementSibling;\n        if (next && getAttr(next, 'v-else') !== null) {\n          remove(next);\n          this.elseFactory = new FragmentFactory(this.vm, next);\n        }\n        // check main block\n        this.anchor = createAnchor('v-if');\n        replace(el, this.anchor);\n        this.factory = new FragmentFactory(this.vm, el);\n      } else {\n        'development' !== 'production' && warn('v-if=\"' + this.expression + '\" cannot be ' + 'used on an instance root element.');\n        this.invalid = true;\n      }\n    },\n\n    update: function update(value) {\n      if (this.invalid) return;\n      if (value) {\n        if (!this.frag) {\n          this.insert();\n        }\n      } else {\n        this.remove();\n      }\n    },\n\n    insert: function insert() {\n      if (this.elseFrag) {\n        this.elseFrag.remove();\n        this.elseFrag = null;\n      }\n      this.frag = this.factory.create(this._host, this._scope, this._frag);\n      this.frag.before(this.anchor);\n    },\n\n    remove: function remove() {\n      if (this.frag) {\n        this.frag.remove();\n        this.frag = null;\n      }\n      if (this.elseFactory && !this.elseFrag) {\n        this.elseFrag = this.elseFactory.create(this._host, this._scope, this._frag);\n        this.elseFrag.before(this.anchor);\n      }\n    },\n\n    unbind: function unbind() {\n      if (this.frag) {\n        this.frag.destroy();\n      }\n    }\n  };\n\n  var uid$1 = 0;\n\n  var vFor = {\n\n    priority: 2000,\n\n    params: ['track-by', 'stagger', 'enter-stagger', 'leave-stagger'],\n\n    bind: function bind() {\n      // support \"item in items\" syntax\n      var inMatch = this.expression.match(/(.*) in (.*)/);\n      if (inMatch) {\n        var itMatch = inMatch[1].match(/\\((.*),(.*)\\)/);\n        if (itMatch) {\n          this.iterator = itMatch[1].trim();\n          this.alias = itMatch[2].trim();\n        } else {\n          this.alias = inMatch[1].trim();\n        }\n        this.expression = inMatch[2];\n      }\n\n      if (!this.alias) {\n        'development' !== 'production' && warn('Alias is required in v-for.');\n        return;\n      }\n\n      // uid as a cache identifier\n      this.id = '__v-for__' + ++uid$1;\n\n      // check if this is an option list,\n      // so that we know if we need to update the <select>'s\n      // v-model when the option list has changed.\n      // because v-model has a lower priority than v-for,\n      // the v-model is not bound here yet, so we have to\n      // retrive it in the actual updateModel() function.\n      var tag = this.el.tagName;\n      this.isOption = (tag === 'OPTION' || tag === 'OPTGROUP') && this.el.parentNode.tagName === 'SELECT';\n\n      // setup anchor nodes\n      this.start = createAnchor('v-for-start');\n      this.end = createAnchor('v-for-end');\n      replace(this.el, this.end);\n      before(this.start, this.end);\n\n      // cache\n      this.cache = Object.create(null);\n\n      // fragment factory\n      this.factory = new FragmentFactory(this.vm, this.el);\n    },\n\n    update: function update(data) {\n      this.diff(data);\n      this.updateRef();\n      this.updateModel();\n    },\n\n    /**\n     * Diff, based on new data and old data, determine the\n     * minimum amount of DOM manipulations needed to make the\n     * DOM reflect the new data Array.\n     *\n     * The algorithm diffs the new data Array by storing a\n     * hidden reference to an owner vm instance on previously\n     * seen data. This allows us to achieve O(n) which is\n     * better than a levenshtein distance based algorithm,\n     * which is O(m * n).\n     *\n     * @param {Array} data\n     */\n\n    diff: function diff(data) {\n      // check if the Array was converted from an Object\n      var item = data[0];\n      var convertedFromObject = this.fromObject = isObject(item) && hasOwn(item, '$key') && hasOwn(item, '$value');\n\n      var trackByKey = this.params.trackBy;\n      var oldFrags = this.frags;\n      var frags = this.frags = new Array(data.length);\n      var alias = this.alias;\n      var iterator = this.iterator;\n      var start = this.start;\n      var end = this.end;\n      var inDocument = inDoc(start);\n      var init = !oldFrags;\n      var i, l, frag, key, value, primitive;\n\n      // First pass, go through the new Array and fill up\n      // the new frags array. If a piece of data has a cached\n      // instance for it, we reuse it. Otherwise build a new\n      // instance.\n      for (i = 0, l = data.length; i < l; i++) {\n        item = data[i];\n        key = convertedFromObject ? item.$key : null;\n        value = convertedFromObject ? item.$value : item;\n        primitive = !isObject(value);\n        frag = !init && this.getCachedFrag(value, i, key);\n        if (frag) {\n          // reusable fragment\n          frag.reused = true;\n          // update $index\n          frag.scope.$index = i;\n          // update $key\n          if (key) {\n            frag.scope.$key = key;\n          }\n          // update iterator\n          if (iterator) {\n            frag.scope[iterator] = key !== null ? key : i;\n          }\n          // update data for track-by, object repeat &\n          // primitive values.\n          if (trackByKey || convertedFromObject || primitive) {\n            frag.scope[alias] = value;\n          }\n        } else {\n          // new isntance\n          frag = this.create(value, alias, i, key);\n          frag.fresh = !init;\n        }\n        frags[i] = frag;\n        if (init) {\n          frag.before(end);\n        }\n      }\n\n      // we're done for the initial render.\n      if (init) {\n        return;\n      }\n\n      // Second pass, go through the old fragments and\n      // destroy those who are not reused (and remove them\n      // from cache)\n      var removalIndex = 0;\n      var totalRemoved = oldFrags.length - frags.length;\n      for (i = 0, l = oldFrags.length; i < l; i++) {\n        frag = oldFrags[i];\n        if (!frag.reused) {\n          this.deleteCachedFrag(frag);\n          this.remove(frag, removalIndex++, totalRemoved, inDocument);\n        }\n      }\n\n      // Final pass, move/insert new fragments into the\n      // right place.\n      var targetPrev, prevEl, currentPrev;\n      var insertionIndex = 0;\n      for (i = 0, l = frags.length; i < l; i++) {\n        frag = frags[i];\n        // this is the frag that we should be after\n        targetPrev = frags[i - 1];\n        prevEl = targetPrev ? targetPrev.staggerCb ? targetPrev.staggerAnchor : targetPrev.end || targetPrev.node : start;\n        if (frag.reused && !frag.staggerCb) {\n          currentPrev = findPrevFrag(frag, start, this.id);\n          if (currentPrev !== targetPrev && (!currentPrev ||\n          // optimization for moving a single item.\n          // thanks to suggestions by @livoras in #1807\n          findPrevFrag(currentPrev, start, this.id) !== targetPrev)) {\n            this.move(frag, prevEl);\n          }\n        } else {\n          // new instance, or still in stagger.\n          // insert with updated stagger index.\n          this.insert(frag, insertionIndex++, prevEl, inDocument);\n        }\n        frag.reused = frag.fresh = false;\n      }\n    },\n\n    /**\n     * Create a new fragment instance.\n     *\n     * @param {*} value\n     * @param {String} alias\n     * @param {Number} index\n     * @param {String} [key]\n     * @return {Fragment}\n     */\n\n    create: function create(value, alias, index, key) {\n      var host = this._host;\n      // create iteration scope\n      var parentScope = this._scope || this.vm;\n      var scope = Object.create(parentScope);\n      // ref holder for the scope\n      scope.$refs = Object.create(parentScope.$refs);\n      scope.$els = Object.create(parentScope.$els);\n      // make sure point $parent to parent scope\n      scope.$parent = parentScope;\n      // for two-way binding on alias\n      scope.$forContext = this;\n      // define scope properties\n      defineReactive(scope, alias, value);\n      defineReactive(scope, '$index', index);\n      if (key) {\n        defineReactive(scope, '$key', key);\n      } else if (scope.$key) {\n        // avoid accidental fallback\n        def(scope, '$key', null);\n      }\n      if (this.iterator) {\n        defineReactive(scope, this.iterator, key !== null ? key : index);\n      }\n      var frag = this.factory.create(host, scope, this._frag);\n      frag.forId = this.id;\n      this.cacheFrag(value, frag, index, key);\n      return frag;\n    },\n\n    /**\n     * Update the v-ref on owner vm.\n     */\n\n    updateRef: function updateRef() {\n      var ref = this.descriptor.ref;\n      if (!ref) return;\n      var hash = (this._scope || this.vm).$refs;\n      var refs;\n      if (!this.fromObject) {\n        refs = this.frags.map(findVmFromFrag);\n      } else {\n        refs = {};\n        this.frags.forEach(function (frag) {\n          refs[frag.scope.$key] = findVmFromFrag(frag);\n        });\n      }\n      hash[ref] = refs;\n    },\n\n    /**\n     * For option lists, update the containing v-model on\n     * parent <select>.\n     */\n\n    updateModel: function updateModel() {\n      if (this.isOption) {\n        var parent = this.start.parentNode;\n        var model = parent && parent.__v_model;\n        if (model) {\n          model.forceUpdate();\n        }\n      }\n    },\n\n    /**\n     * Insert a fragment. Handles staggering.\n     *\n     * @param {Fragment} frag\n     * @param {Number} index\n     * @param {Node} prevEl\n     * @param {Boolean} inDocument\n     */\n\n    insert: function insert(frag, index, prevEl, inDocument) {\n      if (frag.staggerCb) {\n        frag.staggerCb.cancel();\n        frag.staggerCb = null;\n      }\n      var staggerAmount = this.getStagger(frag, index, null, 'enter');\n      if (inDocument && staggerAmount) {\n        // create an anchor and insert it synchronously,\n        // so that we can resolve the correct order without\n        // worrying about some elements not inserted yet\n        var anchor = frag.staggerAnchor;\n        if (!anchor) {\n          anchor = frag.staggerAnchor = createAnchor('stagger-anchor');\n          anchor.__vfrag__ = frag;\n        }\n        after(anchor, prevEl);\n        var op = frag.staggerCb = cancellable(function () {\n          frag.staggerCb = null;\n          frag.before(anchor);\n          remove(anchor);\n        });\n        setTimeout(op, staggerAmount);\n      } else {\n        frag.before(prevEl.nextSibling);\n      }\n    },\n\n    /**\n     * Remove a fragment. Handles staggering.\n     *\n     * @param {Fragment} frag\n     * @param {Number} index\n     * @param {Number} total\n     * @param {Boolean} inDocument\n     */\n\n    remove: function remove(frag, index, total, inDocument) {\n      if (frag.staggerCb) {\n        frag.staggerCb.cancel();\n        frag.staggerCb = null;\n        // it's not possible for the same frag to be removed\n        // twice, so if we have a pending stagger callback,\n        // it means this frag is queued for enter but removed\n        // before its transition started. Since it is already\n        // destroyed, we can just leave it in detached state.\n        return;\n      }\n      var staggerAmount = this.getStagger(frag, index, total, 'leave');\n      if (inDocument && staggerAmount) {\n        var op = frag.staggerCb = cancellable(function () {\n          frag.staggerCb = null;\n          frag.remove();\n        });\n        setTimeout(op, staggerAmount);\n      } else {\n        frag.remove();\n      }\n    },\n\n    /**\n     * Move a fragment to a new position.\n     * Force no transition.\n     *\n     * @param {Fragment} frag\n     * @param {Node} prevEl\n     */\n\n    move: function move(frag, prevEl) {\n      frag.before(prevEl.nextSibling, false);\n    },\n\n    /**\n     * Cache a fragment using track-by or the object key.\n     *\n     * @param {*} value\n     * @param {Fragment} frag\n     * @param {Number} index\n     * @param {String} [key]\n     */\n\n    cacheFrag: function cacheFrag(value, frag, index, key) {\n      var trackByKey = this.params.trackBy;\n      var cache = this.cache;\n      var primitive = !isObject(value);\n      var id;\n      if (key || trackByKey || primitive) {\n        id = trackByKey ? trackByKey === '$index' ? index : value[trackByKey] : key || value;\n        if (!cache[id]) {\n          cache[id] = frag;\n        } else if (trackByKey !== '$index') {\n          'development' !== 'production' && this.warnDuplicate(value);\n        }\n      } else {\n        id = this.id;\n        if (hasOwn(value, id)) {\n          if (value[id] === null) {\n            value[id] = frag;\n          } else {\n            'development' !== 'production' && this.warnDuplicate(value);\n          }\n        } else {\n          def(value, id, frag);\n        }\n      }\n      frag.raw = value;\n    },\n\n    /**\n     * Get a cached fragment from the value/index/key\n     *\n     * @param {*} value\n     * @param {Number} index\n     * @param {String} key\n     * @return {Fragment}\n     */\n\n    getCachedFrag: function getCachedFrag(value, index, key) {\n      var trackByKey = this.params.trackBy;\n      var primitive = !isObject(value);\n      var frag;\n      if (key || trackByKey || primitive) {\n        var id = trackByKey ? trackByKey === '$index' ? index : value[trackByKey] : key || value;\n        frag = this.cache[id];\n      } else {\n        frag = value[this.id];\n      }\n      if (frag && (frag.reused || frag.fresh)) {\n        'development' !== 'production' && this.warnDuplicate(value);\n      }\n      return frag;\n    },\n\n    /**\n     * Delete a fragment from cache.\n     *\n     * @param {Fragment} frag\n     */\n\n    deleteCachedFrag: function deleteCachedFrag(frag) {\n      var value = frag.raw;\n      var trackByKey = this.params.trackBy;\n      var scope = frag.scope;\n      var index = scope.$index;\n      // fix #948: avoid accidentally fall through to\n      // a parent repeater which happens to have $key.\n      var key = hasOwn(scope, '$key') && scope.$key;\n      var primitive = !isObject(value);\n      if (trackByKey || key || primitive) {\n        var id = trackByKey ? trackByKey === '$index' ? index : value[trackByKey] : key || value;\n        this.cache[id] = null;\n      } else {\n        value[this.id] = null;\n        frag.raw = null;\n      }\n    },\n\n    /**\n     * Get the stagger amount for an insertion/removal.\n     *\n     * @param {Fragment} frag\n     * @param {Number} index\n     * @param {Number} total\n     * @param {String} type\n     */\n\n    getStagger: function getStagger(frag, index, total, type) {\n      type = type + 'Stagger';\n      var trans = frag.node.__v_trans;\n      var hooks = trans && trans.hooks;\n      var hook = hooks && (hooks[type] || hooks.stagger);\n      return hook ? hook.call(frag, index, total) : index * parseInt(this.params[type] || this.params.stagger, 10);\n    },\n\n    /**\n     * Pre-process the value before piping it through the\n     * filters. This is passed to and called by the watcher.\n     */\n\n    _preProcess: function _preProcess(value) {\n      // regardless of type, store the un-filtered raw value.\n      this.rawValue = value;\n      return value;\n    },\n\n    /**\n     * Post-process the value after it has been piped through\n     * the filters. This is passed to and called by the watcher.\n     *\n     * It is necessary for this to be called during the\n     * wathcer's dependency collection phase because we want\n     * the v-for to update when the source Object is mutated.\n     */\n\n    _postProcess: function _postProcess(value) {\n      if (isArray(value)) {\n        return value;\n      } else if (isPlainObject(value)) {\n        // convert plain object to array.\n        var keys = Object.keys(value);\n        var i = keys.length;\n        var res = new Array(i);\n        var key;\n        while (i--) {\n          key = keys[i];\n          res[i] = {\n            $key: key,\n            $value: value[key]\n          };\n        }\n        return res;\n      } else {\n        if (typeof value === 'number') {\n          value = range(value);\n        }\n        return value || [];\n      }\n    },\n\n    unbind: function unbind() {\n      if (this.descriptor.ref) {\n        (this._scope || this.vm).$refs[this.descriptor.ref] = null;\n      }\n      if (this.frags) {\n        var i = this.frags.length;\n        var frag;\n        while (i--) {\n          frag = this.frags[i];\n          this.deleteCachedFrag(frag);\n          frag.destroy();\n        }\n      }\n    }\n  };\n\n  /**\n   * Helper to find the previous element that is a fragment\n   * anchor. This is necessary because a destroyed frag's\n   * element could still be lingering in the DOM before its\n   * leaving transition finishes, but its inserted flag\n   * should have been set to false so we can skip them.\n   *\n   * If this is a block repeat, we want to make sure we only\n   * return frag that is bound to this v-for. (see #929)\n   *\n   * @param {Fragment} frag\n   * @param {Comment|Text} anchor\n   * @param {String} id\n   * @return {Fragment}\n   */\n\n  function findPrevFrag(frag, anchor, id) {\n    var el = frag.node.previousSibling;\n    /* istanbul ignore if */\n    if (!el) return;\n    frag = el.__vfrag__;\n    while ((!frag || frag.forId !== id || !frag.inserted) && el !== anchor) {\n      el = el.previousSibling;\n      /* istanbul ignore if */\n      if (!el) return;\n      frag = el.__vfrag__;\n    }\n    return frag;\n  }\n\n  /**\n   * Find a vm from a fragment.\n   *\n   * @param {Fragment} frag\n   * @return {Vue|undefined}\n   */\n\n  function findVmFromFrag(frag) {\n    var node = frag.node;\n    // handle multi-node frag\n    if (frag.end) {\n      while (!node.__vue__ && node !== frag.end && node.nextSibling) {\n        node = node.nextSibling;\n      }\n    }\n    return node.__vue__;\n  }\n\n  /**\n   * Create a range array from given number.\n   *\n   * @param {Number} n\n   * @return {Array}\n   */\n\n  function range(n) {\n    var i = -1;\n    var ret = new Array(n);\n    while (++i < n) {\n      ret[i] = i;\n    }\n    return ret;\n  }\n\n  if ('development' !== 'production') {\n    vFor.warnDuplicate = function (value) {\n      warn('Duplicate value found in v-for=\"' + this.descriptor.raw + '\": ' + JSON.stringify(value) + '. Use track-by=\"$index\" if ' + 'you are expecting duplicate values.');\n    };\n  }\n\n  var html = {\n\n    bind: function bind() {\n      // a comment node means this is a binding for\n      // {{{ inline unescaped html }}}\n      if (this.el.nodeType === 8) {\n        // hold nodes\n        this.nodes = [];\n        // replace the placeholder with proper anchor\n        this.anchor = createAnchor('v-html');\n        replace(this.el, this.anchor);\n      }\n    },\n\n    update: function update(value) {\n      value = _toString(value);\n      if (this.nodes) {\n        this.swap(value);\n      } else {\n        this.el.innerHTML = value;\n      }\n    },\n\n    swap: function swap(value) {\n      // remove old nodes\n      var i = this.nodes.length;\n      while (i--) {\n        remove(this.nodes[i]);\n      }\n      // convert new value to a fragment\n      // do not attempt to retrieve from id selector\n      var frag = parseTemplate(value, true, true);\n      // save a reference to these nodes so we can remove later\n      this.nodes = toArray(frag.childNodes);\n      before(frag, this.anchor);\n    }\n  };\n\n  var text = {\n\n    bind: function bind() {\n      this.attr = this.el.nodeType === 3 ? 'data' : 'textContent';\n    },\n\n    update: function update(value) {\n      this.el[this.attr] = _toString(value);\n    }\n  };\n\n  // must export plain object\n  var publicDirectives = {\n    text: text,\n    html: html,\n    'for': vFor,\n    'if': vIf,\n    show: show,\n    model: model,\n    on: on,\n    bind: bind,\n    el: el,\n    ref: ref,\n    cloak: cloak\n  };\n\n  var queue$1 = [];\n  var queued = false;\n\n  /**\n   * Push a job into the queue.\n   *\n   * @param {Function} job\n   */\n\n  function pushJob(job) {\n    queue$1.push(job);\n    if (!queued) {\n      queued = true;\n      nextTick(flush);\n    }\n  }\n\n  /**\n   * Flush the queue, and do one forced reflow before\n   * triggering transitions.\n   */\n\n  function flush() {\n    // Force layout\n    var f = document.documentElement.offsetHeight;\n    for (var i = 0; i < queue$1.length; i++) {\n      queue$1[i]();\n    }\n    queue$1 = [];\n    queued = false;\n    // dummy return, so js linters don't complain about\n    // unused variable f\n    return f;\n  }\n\n  var TYPE_TRANSITION = 1;\n  var TYPE_ANIMATION = 2;\n  var transDurationProp = transitionProp + 'Duration';\n  var animDurationProp = animationProp + 'Duration';\n\n  /**\n   * A Transition object that encapsulates the state and logic\n   * of the transition.\n   *\n   * @param {Element} el\n   * @param {String} id\n   * @param {Object} hooks\n   * @param {Vue} vm\n   */\n  function Transition(el, id, hooks, vm) {\n    this.id = id;\n    this.el = el;\n    this.enterClass = id + '-enter';\n    this.leaveClass = id + '-leave';\n    this.hooks = hooks;\n    this.vm = vm;\n    // async state\n    this.pendingCssEvent = this.pendingCssCb = this.cancel = this.pendingJsCb = this.op = this.cb = null;\n    this.justEntered = false;\n    this.entered = this.left = false;\n    this.typeCache = {};\n    // bind\n    var self = this;['enterNextTick', 'enterDone', 'leaveNextTick', 'leaveDone'].forEach(function (m) {\n      self[m] = bind$1(self[m], self);\n    });\n  }\n\n  var p$1 = Transition.prototype;\n\n  /**\n   * Start an entering transition.\n   *\n   * 1. enter transition triggered\n   * 2. call beforeEnter hook\n   * 3. add enter class\n   * 4. insert/show element\n   * 5. call enter hook (with possible explicit js callback)\n   * 6. reflow\n   * 7. based on transition type:\n   *    - transition:\n   *        remove class now, wait for transitionend,\n   *        then done if there's no explicit js callback.\n   *    - animation:\n   *        wait for animationend, remove class,\n   *        then done if there's no explicit js callback.\n   *    - no css transition:\n   *        done now if there's no explicit js callback.\n   * 8. wait for either done or js callback, then call\n   *    afterEnter hook.\n   *\n   * @param {Function} op - insert/show the element\n   * @param {Function} [cb]\n   */\n\n  p$1.enter = function (op, cb) {\n    this.cancelPending();\n    this.callHook('beforeEnter');\n    this.cb = cb;\n    addClass(this.el, this.enterClass);\n    op();\n    this.entered = false;\n    this.callHookWithCb('enter');\n    if (this.entered) {\n      return; // user called done synchronously.\n    }\n    this.cancel = this.hooks && this.hooks.enterCancelled;\n    pushJob(this.enterNextTick);\n  };\n\n  /**\n   * The \"nextTick\" phase of an entering transition, which is\n   * to be pushed into a queue and executed after a reflow so\n   * that removing the class can trigger a CSS transition.\n   */\n\n  p$1.enterNextTick = function () {\n\n    // Important hack:\n    // in Chrome, if a just-entered element is applied the\n    // leave class while its interpolated property still has\n    // a very small value (within one frame), Chrome will\n    // skip the leave transition entirely and not firing the\n    // transtionend event. Therefore we need to protected\n    // against such cases using a one-frame timeout.\n    this.justEntered = true;\n    var self = this;\n    setTimeout(function () {\n      self.justEntered = false;\n    }, 17);\n\n    var enterDone = this.enterDone;\n    var type = this.getCssTransitionType(this.enterClass);\n    if (!this.pendingJsCb) {\n      if (type === TYPE_TRANSITION) {\n        // trigger transition by removing enter class now\n        removeClass(this.el, this.enterClass);\n        this.setupCssCb(transitionEndEvent, enterDone);\n      } else if (type === TYPE_ANIMATION) {\n        this.setupCssCb(animationEndEvent, enterDone);\n      } else {\n        enterDone();\n      }\n    } else if (type === TYPE_TRANSITION) {\n      removeClass(this.el, this.enterClass);\n    }\n  };\n\n  /**\n   * The \"cleanup\" phase of an entering transition.\n   */\n\n  p$1.enterDone = function () {\n    this.entered = true;\n    this.cancel = this.pendingJsCb = null;\n    removeClass(this.el, this.enterClass);\n    this.callHook('afterEnter');\n    if (this.cb) this.cb();\n  };\n\n  /**\n   * Start a leaving transition.\n   *\n   * 1. leave transition triggered.\n   * 2. call beforeLeave hook\n   * 3. add leave class (trigger css transition)\n   * 4. call leave hook (with possible explicit js callback)\n   * 5. reflow if no explicit js callback is provided\n   * 6. based on transition type:\n   *    - transition or animation:\n   *        wait for end event, remove class, then done if\n   *        there's no explicit js callback.\n   *    - no css transition:\n   *        done if there's no explicit js callback.\n   * 7. wait for either done or js callback, then call\n   *    afterLeave hook.\n   *\n   * @param {Function} op - remove/hide the element\n   * @param {Function} [cb]\n   */\n\n  p$1.leave = function (op, cb) {\n    this.cancelPending();\n    this.callHook('beforeLeave');\n    this.op = op;\n    this.cb = cb;\n    addClass(this.el, this.leaveClass);\n    this.left = false;\n    this.callHookWithCb('leave');\n    if (this.left) {\n      return; // user called done synchronously.\n    }\n    this.cancel = this.hooks && this.hooks.leaveCancelled;\n    // only need to handle leaveDone if\n    // 1. the transition is already done (synchronously called\n    //    by the user, which causes this.op set to null)\n    // 2. there's no explicit js callback\n    if (this.op && !this.pendingJsCb) {\n      // if a CSS transition leaves immediately after enter,\n      // the transitionend event never fires. therefore we\n      // detect such cases and end the leave immediately.\n      if (this.justEntered) {\n        this.leaveDone();\n      } else {\n        pushJob(this.leaveNextTick);\n      }\n    }\n  };\n\n  /**\n   * The \"nextTick\" phase of a leaving transition.\n   */\n\n  p$1.leaveNextTick = function () {\n    var type = this.getCssTransitionType(this.leaveClass);\n    if (type) {\n      var event = type === TYPE_TRANSITION ? transitionEndEvent : animationEndEvent;\n      this.setupCssCb(event, this.leaveDone);\n    } else {\n      this.leaveDone();\n    }\n  };\n\n  /**\n   * The \"cleanup\" phase of a leaving transition.\n   */\n\n  p$1.leaveDone = function () {\n    this.left = true;\n    this.cancel = this.pendingJsCb = null;\n    this.op();\n    removeClass(this.el, this.leaveClass);\n    this.callHook('afterLeave');\n    if (this.cb) this.cb();\n    this.op = null;\n  };\n\n  /**\n   * Cancel any pending callbacks from a previously running\n   * but not finished transition.\n   */\n\n  p$1.cancelPending = function () {\n    this.op = this.cb = null;\n    var hasPending = false;\n    if (this.pendingCssCb) {\n      hasPending = true;\n      off(this.el, this.pendingCssEvent, this.pendingCssCb);\n      this.pendingCssEvent = this.pendingCssCb = null;\n    }\n    if (this.pendingJsCb) {\n      hasPending = true;\n      this.pendingJsCb.cancel();\n      this.pendingJsCb = null;\n    }\n    if (hasPending) {\n      removeClass(this.el, this.enterClass);\n      removeClass(this.el, this.leaveClass);\n    }\n    if (this.cancel) {\n      this.cancel.call(this.vm, this.el);\n      this.cancel = null;\n    }\n  };\n\n  /**\n   * Call a user-provided synchronous hook function.\n   *\n   * @param {String} type\n   */\n\n  p$1.callHook = function (type) {\n    if (this.hooks && this.hooks[type]) {\n      this.hooks[type].call(this.vm, this.el);\n    }\n  };\n\n  /**\n   * Call a user-provided, potentially-async hook function.\n   * We check for the length of arguments to see if the hook\n   * expects a `done` callback. If true, the transition's end\n   * will be determined by when the user calls that callback;\n   * otherwise, the end is determined by the CSS transition or\n   * animation.\n   *\n   * @param {String} type\n   */\n\n  p$1.callHookWithCb = function (type) {\n    var hook = this.hooks && this.hooks[type];\n    if (hook) {\n      if (hook.length > 1) {\n        this.pendingJsCb = cancellable(this[type + 'Done']);\n      }\n      hook.call(this.vm, this.el, this.pendingJsCb);\n    }\n  };\n\n  /**\n   * Get an element's transition type based on the\n   * calculated styles.\n   *\n   * @param {String} className\n   * @return {Number}\n   */\n\n  p$1.getCssTransitionType = function (className) {\n    /* istanbul ignore if */\n    if (!transitionEndEvent ||\n    // skip CSS transitions if page is not visible -\n    // this solves the issue of transitionend events not\n    // firing until the page is visible again.\n    // pageVisibility API is supported in IE10+, same as\n    // CSS transitions.\n    document.hidden ||\n    // explicit js-only transition\n    this.hooks && this.hooks.css === false ||\n    // element is hidden\n    isHidden(this.el)) {\n      return;\n    }\n    var type = this.typeCache[className];\n    if (type) return type;\n    var inlineStyles = this.el.style;\n    var computedStyles = window.getComputedStyle(this.el);\n    var transDuration = inlineStyles[transDurationProp] || computedStyles[transDurationProp];\n    if (transDuration && transDuration !== '0s') {\n      type = TYPE_TRANSITION;\n    } else {\n      var animDuration = inlineStyles[animDurationProp] || computedStyles[animDurationProp];\n      if (animDuration && animDuration !== '0s') {\n        type = TYPE_ANIMATION;\n      }\n    }\n    if (type) {\n      this.typeCache[className] = type;\n    }\n    return type;\n  };\n\n  /**\n   * Setup a CSS transitionend/animationend callback.\n   *\n   * @param {String} event\n   * @param {Function} cb\n   */\n\n  p$1.setupCssCb = function (event, cb) {\n    this.pendingCssEvent = event;\n    var self = this;\n    var el = this.el;\n    var onEnd = this.pendingCssCb = function (e) {\n      if (e.target === el) {\n        off(el, event, onEnd);\n        self.pendingCssEvent = self.pendingCssCb = null;\n        if (!self.pendingJsCb && cb) {\n          cb();\n        }\n      }\n    };\n    on$1(el, event, onEnd);\n  };\n\n  /**\n   * Check if an element is hidden - in that case we can just\n   * skip the transition alltogether.\n   *\n   * @param {Element} el\n   * @return {Boolean}\n   */\n\n  function isHidden(el) {\n    return !(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n  }\n\n  var transition = {\n\n    priority: 1100,\n\n    update: function update(id, oldId) {\n      var el = this.el;\n      // resolve on owner vm\n      var hooks = resolveAsset(this.vm.$options, 'transitions', id);\n      id = id || 'v';\n      // apply on closest vm\n      el.__v_trans = new Transition(el, id, hooks, this.el.__vue__ || this.vm);\n      if (oldId) {\n        removeClass(el, oldId + '-transition');\n      }\n      addClass(el, id + '-transition');\n    }\n  };\n\n  var bindingModes = config._propBindingModes;\n\n  var propDef = {\n\n    bind: function bind() {\n\n      var child = this.vm;\n      var parent = child._context;\n      // passed in from compiler directly\n      var prop = this.descriptor.prop;\n      var childKey = prop.path;\n      var parentKey = prop.parentPath;\n      var twoWay = prop.mode === bindingModes.TWO_WAY;\n\n      var parentWatcher = this.parentWatcher = new Watcher(parent, parentKey, function (val) {\n        if (assertProp(prop, val)) {\n          child[childKey] = val;\n        }\n      }, {\n        twoWay: twoWay,\n        filters: prop.filters,\n        // important: props need to be observed on the\n        // v-for scope if present\n        scope: this._scope\n      });\n\n      // set the child initial value.\n      initProp(child, prop, parentWatcher.value);\n\n      // setup two-way binding\n      if (twoWay) {\n        // important: defer the child watcher creation until\n        // the created hook (after data observation)\n        var self = this;\n        child.$once('hook:created', function () {\n          self.childWatcher = new Watcher(child, childKey, function (val) {\n            parentWatcher.set(val);\n          }, {\n            // ensure sync upward before parent sync down.\n            // this is necessary in cases e.g. the child\n            // mutates a prop array, then replaces it. (#1683)\n            sync: true\n          });\n        });\n      }\n    },\n\n    unbind: function unbind() {\n      this.parentWatcher.teardown();\n      if (this.childWatcher) {\n        this.childWatcher.teardown();\n      }\n    }\n  };\n\n  var component = {\n\n    priority: 1500,\n\n    params: ['keep-alive', 'transition-mode', 'inline-template'],\n\n    /**\n     * Setup. Two possible usages:\n     *\n     * - static:\n     *   <comp> or <div v-component=\"comp\">\n     *\n     * - dynamic:\n     *   <component :is=\"view\">\n     */\n\n    bind: function bind() {\n      if (!this.el.__vue__) {\n        // keep-alive cache\n        this.keepAlive = this.params.keepAlive;\n        if (this.keepAlive) {\n          this.cache = {};\n        }\n        // check inline-template\n        if (this.params.inlineTemplate) {\n          // extract inline template as a DocumentFragment\n          this.inlineTemplate = extractContent(this.el, true);\n        }\n        // component resolution related state\n        this.pendingComponentCb = this.Component = null;\n        // transition related state\n        this.pendingRemovals = 0;\n        this.pendingRemovalCb = null;\n        // create a ref anchor\n        this.anchor = createAnchor('v-component');\n        replace(this.el, this.anchor);\n        // remove is attribute.\n        // this is removed during compilation, but because compilation is\n        // cached, when the component is used elsewhere this attribute\n        // will remain at link time.\n        this.el.removeAttribute('is');\n        // remove ref, same as above\n        if (this.descriptor.ref) {\n          this.el.removeAttribute('v-ref:' + hyphenate(this.descriptor.ref));\n        }\n        // if static, build right now.\n        if (this.literal) {\n          this.setComponent(this.expression);\n        }\n      } else {\n        'development' !== 'production' && warn('cannot mount component \"' + this.expression + '\" ' + 'on already mounted element: ' + this.el);\n      }\n    },\n\n    /**\n     * Public update, called by the watcher in the dynamic\n     * literal scenario, e.g. <component :is=\"view\">\n     */\n\n    update: function update(value) {\n      if (!this.literal) {\n        this.setComponent(value);\n      }\n    },\n\n    /**\n     * Switch dynamic components. May resolve the component\n     * asynchronously, and perform transition based on\n     * specified transition mode. Accepts a few additional\n     * arguments specifically for vue-router.\n     *\n     * The callback is called when the full transition is\n     * finished.\n     *\n     * @param {String} value\n     * @param {Function} [cb]\n     */\n\n    setComponent: function setComponent(value, cb) {\n      this.invalidatePending();\n      if (!value) {\n        // just remove current\n        this.unbuild(true);\n        this.remove(this.childVM, cb);\n        this.childVM = null;\n      } else {\n        var self = this;\n        this.resolveComponent(value, function () {\n          self.mountComponent(cb);\n        });\n      }\n    },\n\n    /**\n     * Resolve the component constructor to use when creating\n     * the child vm.\n     */\n\n    resolveComponent: function resolveComponent(id, cb) {\n      var self = this;\n      this.pendingComponentCb = cancellable(function (Component) {\n        self.ComponentName = Component.options.name || id;\n        self.Component = Component;\n        cb();\n      });\n      this.vm._resolveComponent(id, this.pendingComponentCb);\n    },\n\n    /**\n     * Create a new instance using the current constructor and\n     * replace the existing instance. This method doesn't care\n     * whether the new component and the old one are actually\n     * the same.\n     *\n     * @param {Function} [cb]\n     */\n\n    mountComponent: function mountComponent(cb) {\n      // actual mount\n      this.unbuild(true);\n      var self = this;\n      var activateHook = this.Component.options.activate;\n      var cached = this.getCached();\n      var newComponent = this.build();\n      if (activateHook && !cached) {\n        this.waitingFor = newComponent;\n        activateHook.call(newComponent, function () {\n          self.waitingFor = null;\n          self.transition(newComponent, cb);\n        });\n      } else {\n        // update ref for kept-alive component\n        if (cached) {\n          newComponent._updateRef();\n        }\n        this.transition(newComponent, cb);\n      }\n    },\n\n    /**\n     * When the component changes or unbinds before an async\n     * constructor is resolved, we need to invalidate its\n     * pending callback.\n     */\n\n    invalidatePending: function invalidatePending() {\n      if (this.pendingComponentCb) {\n        this.pendingComponentCb.cancel();\n        this.pendingComponentCb = null;\n      }\n    },\n\n    /**\n     * Instantiate/insert a new child vm.\n     * If keep alive and has cached instance, insert that\n     * instance; otherwise build a new one and cache it.\n     *\n     * @param {Object} [extraOptions]\n     * @return {Vue} - the created instance\n     */\n\n    build: function build(extraOptions) {\n      var cached = this.getCached();\n      if (cached) {\n        return cached;\n      }\n      if (this.Component) {\n        // default options\n        var options = {\n          name: this.ComponentName,\n          el: cloneNode(this.el),\n          template: this.inlineTemplate,\n          // make sure to add the child with correct parent\n          // if this is a transcluded component, its parent\n          // should be the transclusion host.\n          parent: this._host || this.vm,\n          // if no inline-template, then the compiled\n          // linker can be cached for better performance.\n          _linkerCachable: !this.inlineTemplate,\n          _ref: this.descriptor.ref,\n          _asComponent: true,\n          _isRouterView: this._isRouterView,\n          // if this is a transcluded component, context\n          // will be the common parent vm of this instance\n          // and its host.\n          _context: this.vm,\n          // if this is inside an inline v-for, the scope\n          // will be the intermediate scope created for this\n          // repeat fragment. this is used for linking props\n          // and container directives.\n          _scope: this._scope,\n          // pass in the owner fragment of this component.\n          // this is necessary so that the fragment can keep\n          // track of its contained components in order to\n          // call attach/detach hooks for them.\n          _frag: this._frag\n        };\n        // extra options\n        // in 1.0.0 this is used by vue-router only\n        /* istanbul ignore if */\n        if (extraOptions) {\n          extend(options, extraOptions);\n        }\n        var child = new this.Component(options);\n        if (this.keepAlive) {\n          this.cache[this.Component.cid] = child;\n        }\n        /* istanbul ignore if */\n        if ('development' !== 'production' && this.el.hasAttribute('transition') && child._isFragment) {\n          warn('Transitions will not work on a fragment instance. ' + 'Template: ' + child.$options.template);\n        }\n        return child;\n      }\n    },\n\n    /**\n     * Try to get a cached instance of the current component.\n     *\n     * @return {Vue|undefined}\n     */\n\n    getCached: function getCached() {\n      return this.keepAlive && this.cache[this.Component.cid];\n    },\n\n    /**\n     * Teardown the current child, but defers cleanup so\n     * that we can separate the destroy and removal steps.\n     *\n     * @param {Boolean} defer\n     */\n\n    unbuild: function unbuild(defer) {\n      if (this.waitingFor) {\n        this.waitingFor.$destroy();\n        this.waitingFor = null;\n      }\n      var child = this.childVM;\n      if (!child || this.keepAlive) {\n        if (child) {\n          // remove ref\n          child._updateRef(true);\n        }\n        return;\n      }\n      // the sole purpose of `deferCleanup` is so that we can\n      // \"deactivate\" the vm right now and perform DOM removal\n      // later.\n      child.$destroy(false, defer);\n    },\n\n    /**\n     * Remove current destroyed child and manually do\n     * the cleanup after removal.\n     *\n     * @param {Function} cb\n     */\n\n    remove: function remove(child, cb) {\n      var keepAlive = this.keepAlive;\n      if (child) {\n        // we may have a component switch when a previous\n        // component is still being transitioned out.\n        // we want to trigger only one lastest insertion cb\n        // when the existing transition finishes. (#1119)\n        this.pendingRemovals++;\n        this.pendingRemovalCb = cb;\n        var self = this;\n        child.$remove(function () {\n          self.pendingRemovals--;\n          if (!keepAlive) child._cleanup();\n          if (!self.pendingRemovals && self.pendingRemovalCb) {\n            self.pendingRemovalCb();\n            self.pendingRemovalCb = null;\n          }\n        });\n      } else if (cb) {\n        cb();\n      }\n    },\n\n    /**\n     * Actually swap the components, depending on the\n     * transition mode. Defaults to simultaneous.\n     *\n     * @param {Vue} target\n     * @param {Function} [cb]\n     */\n\n    transition: function transition(target, cb) {\n      var self = this;\n      var current = this.childVM;\n      // for devtool inspection\n      if ('development' !== 'production') {\n        if (current) current._inactive = true;\n        target._inactive = false;\n      }\n      this.childVM = target;\n      switch (self.params.transitionMode) {\n        case 'in-out':\n          target.$before(self.anchor, function () {\n            self.remove(current, cb);\n          });\n          break;\n        case 'out-in':\n          self.remove(current, function () {\n            target.$before(self.anchor, cb);\n          });\n          break;\n        default:\n          self.remove(current);\n          target.$before(self.anchor, cb);\n      }\n    },\n\n    /**\n     * Unbind.\n     */\n\n    unbind: function unbind() {\n      this.invalidatePending();\n      // Do not defer cleanup when unbinding\n      this.unbuild();\n      // destroy all keep-alive cached instances\n      if (this.cache) {\n        for (var key in this.cache) {\n          this.cache[key].$destroy();\n        }\n        this.cache = null;\n      }\n    }\n  };\n\n  var vClass = {\n\n    deep: true,\n\n    update: function update(value) {\n      if (value && typeof value === 'string') {\n        this.handleObject(stringToObject(value));\n      } else if (isPlainObject(value)) {\n        this.handleObject(value);\n      } else if (isArray(value)) {\n        this.handleArray(value);\n      } else {\n        this.cleanup();\n      }\n    },\n\n    handleObject: function handleObject(value) {\n      this.cleanup(value);\n      var keys = this.prevKeys = Object.keys(value);\n      for (var i = 0, l = keys.length; i < l; i++) {\n        var key = keys[i];\n        if (value[key]) {\n          addClass(this.el, key);\n        } else {\n          removeClass(this.el, key);\n        }\n      }\n    },\n\n    handleArray: function handleArray(value) {\n      this.cleanup(value);\n      for (var i = 0, l = value.length; i < l; i++) {\n        if (value[i]) {\n          addClass(this.el, value[i]);\n        }\n      }\n      this.prevKeys = value.slice();\n    },\n\n    cleanup: function cleanup(value) {\n      if (this.prevKeys) {\n        var i = this.prevKeys.length;\n        while (i--) {\n          var key = this.prevKeys[i];\n          if (key && (!value || !contains$1(value, key))) {\n            removeClass(this.el, key);\n          }\n        }\n      }\n    }\n  };\n\n  function stringToObject(value) {\n    var res = {};\n    var keys = value.trim().split(/\\s+/);\n    var i = keys.length;\n    while (i--) {\n      res[keys[i]] = true;\n    }\n    return res;\n  }\n\n  function contains$1(value, key) {\n    return isArray(value) ? value.indexOf(key) > -1 : hasOwn(value, key);\n  }\n\n  var internalDirectives = {\n    style: style,\n    'class': vClass,\n    component: component,\n    prop: propDef,\n    transition: transition\n  };\n\n  var propBindingModes = config._propBindingModes;\n  var empty = {};\n\n  // regexes\n  var identRE = /^[$_a-zA-Z]+[\\w$]*$/;\n  var settablePathRE = /^[A-Za-z_$][\\w$]*(\\.[A-Za-z_$][\\w$]*|\\[[^\\[\\]]+\\])*$/;\n\n  /**\n   * Compile props on a root element and return\n   * a props link function.\n   *\n   * @param {Element|DocumentFragment} el\n   * @param {Array} propOptions\n   * @return {Function} propsLinkFn\n   */\n\n  function compileProps(el, propOptions) {\n    var props = [];\n    var names = Object.keys(propOptions);\n    var i = names.length;\n    var options, name, attr, value, path, parsed, prop;\n    while (i--) {\n      name = names[i];\n      options = propOptions[name] || empty;\n\n      if ('development' !== 'production' && name === '$data') {\n        warn('Do not use $data as prop.');\n        continue;\n      }\n\n      // props could contain dashes, which will be\n      // interpreted as minus calculations by the parser\n      // so we need to camelize the path here\n      path = camelize(name);\n      if (!identRE.test(path)) {\n        'development' !== 'production' && warn('Invalid prop key: \"' + name + '\". Prop keys ' + 'must be valid identifiers.');\n        continue;\n      }\n\n      prop = {\n        name: name,\n        path: path,\n        options: options,\n        mode: propBindingModes.ONE_WAY,\n        raw: null\n      };\n\n      attr = hyphenate(name);\n      // first check dynamic version\n      if ((value = getBindAttr(el, attr)) === null) {\n        if ((value = getBindAttr(el, attr + '.sync')) !== null) {\n          prop.mode = propBindingModes.TWO_WAY;\n        } else if ((value = getBindAttr(el, attr + '.once')) !== null) {\n          prop.mode = propBindingModes.ONE_TIME;\n        }\n      }\n      if (value !== null) {\n        // has dynamic binding!\n        prop.raw = value;\n        parsed = parseDirective(value);\n        value = parsed.expression;\n        prop.filters = parsed.filters;\n        // check binding type\n        if (isLiteral(value)) {\n          // for expressions containing literal numbers and\n          // booleans, there's no need to setup a prop binding,\n          // so we can optimize them as a one-time set.\n          prop.optimizedLiteral = true;\n        } else {\n          prop.dynamic = true;\n          // check non-settable path for two-way bindings\n          if ('development' !== 'production' && prop.mode === propBindingModes.TWO_WAY && !settablePathRE.test(value)) {\n            prop.mode = propBindingModes.ONE_WAY;\n            warn('Cannot bind two-way prop with non-settable ' + 'parent path: ' + value);\n          }\n        }\n        prop.parentPath = value;\n\n        // warn required two-way\n        if ('development' !== 'production' && options.twoWay && prop.mode !== propBindingModes.TWO_WAY) {\n          warn('Prop \"' + name + '\" expects a two-way binding type.');\n        }\n      } else if ((value = getAttr(el, attr)) !== null) {\n        // has literal binding!\n        prop.raw = value;\n      } else if (options.required) {\n        // warn missing required\n        'development' !== 'production' && warn('Missing required prop: ' + name);\n      }\n      // push prop\n      props.push(prop);\n    }\n    return makePropsLinkFn(props);\n  }\n\n  /**\n   * Build a function that applies props to a vm.\n   *\n   * @param {Array} props\n   * @return {Function} propsLinkFn\n   */\n\n  function makePropsLinkFn(props) {\n    return function propsLinkFn(vm, scope) {\n      // store resolved props info\n      vm._props = {};\n      var i = props.length;\n      var prop, path, options, value, raw;\n      while (i--) {\n        prop = props[i];\n        raw = prop.raw;\n        path = prop.path;\n        options = prop.options;\n        vm._props[path] = prop;\n        if (raw === null) {\n          // initialize absent prop\n          initProp(vm, prop, getDefault(vm, options));\n        } else if (prop.dynamic) {\n          // dynamic prop\n          if (vm._context) {\n            if (prop.mode === propBindingModes.ONE_TIME) {\n              // one time binding\n              value = (scope || vm._context).$get(prop.parentPath);\n              initProp(vm, prop, value);\n            } else {\n              // dynamic binding\n              vm._bindDir({\n                name: 'prop',\n                def: propDef,\n                prop: prop\n              }, null, null, scope); // el, host, scope\n            }\n          } else {\n              'development' !== 'production' && warn('Cannot bind dynamic prop on a root instance' + ' with no parent: ' + prop.name + '=\"' + raw + '\"');\n            }\n        } else if (prop.optimizedLiteral) {\n          // optimized literal, cast it and just set once\n          var stripped = stripQuotes(raw);\n          value = stripped === raw ? toBoolean(toNumber(raw)) : stripped;\n          initProp(vm, prop, value);\n        } else {\n          // string literal, but we need to cater for\n          // Boolean props with no value\n          value = options.type === Boolean && raw === '' ? true : raw;\n          initProp(vm, prop, value);\n        }\n      }\n    };\n  }\n\n  /**\n   * Get the default value of a prop.\n   *\n   * @param {Vue} vm\n   * @param {Object} options\n   * @return {*}\n   */\n\n  function getDefault(vm, options) {\n    // no default, return undefined\n    if (!hasOwn(options, 'default')) {\n      // absent boolean value defaults to false\n      return options.type === Boolean ? false : undefined;\n    }\n    var def = options['default'];\n    // warn against non-factory defaults for Object & Array\n    if (isObject(def)) {\n      'development' !== 'production' && warn('Object/Array as default prop values will be shared ' + 'across multiple instances. Use a factory function ' + 'to return the default value instead.');\n    }\n    // call factory function for non-Function types\n    return typeof def === 'function' && options.type !== Function ? def.call(vm) : def;\n  }\n\n  // special binding prefixes\n  var bindRE = /^v-bind:|^:/;\n  var onRE = /^v-on:|^@/;\n  var argRE = /:(.*)$/;\n  var modifierRE = /\\.[^\\.]+/g;\n  var transitionRE = /^(v-bind:|:)?transition$/;\n\n  // terminal directives\n  var terminalDirectives = ['for', 'if'];\n\n  // default directive priority\n  var DEFAULT_PRIORITY = 1000;\n\n  /**\n   * Compile a template and return a reusable composite link\n   * function, which recursively contains more link functions\n   * inside. This top level compile function would normally\n   * be called on instance root nodes, but can also be used\n   * for partial compilation if the partial argument is true.\n   *\n   * The returned composite link function, when called, will\n   * return an unlink function that tearsdown all directives\n   * created during the linking phase.\n   *\n   * @param {Element|DocumentFragment} el\n   * @param {Object} options\n   * @param {Boolean} partial\n   * @return {Function}\n   */\n\n  function compile(el, options, partial) {\n    // link function for the node itself.\n    var nodeLinkFn = partial || !options._asComponent ? compileNode(el, options) : null;\n    // link function for the childNodes\n    var childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && el.tagName !== 'SCRIPT' && el.hasChildNodes() ? compileNodeList(el.childNodes, options) : null;\n\n    /**\n     * A composite linker function to be called on a already\n     * compiled piece of DOM, which instantiates all directive\n     * instances.\n     *\n     * @param {Vue} vm\n     * @param {Element|DocumentFragment} el\n     * @param {Vue} [host] - host vm of transcluded content\n     * @param {Object} [scope] - v-for scope\n     * @param {Fragment} [frag] - link context fragment\n     * @return {Function|undefined}\n     */\n\n    return function compositeLinkFn(vm, el, host, scope, frag) {\n      // cache childNodes before linking parent, fix #657\n      var childNodes = toArray(el.childNodes);\n      // link\n      var dirs = linkAndCapture(function compositeLinkCapturer() {\n        if (nodeLinkFn) nodeLinkFn(vm, el, host, scope, frag);\n        if (childLinkFn) childLinkFn(vm, childNodes, host, scope, frag);\n      }, vm);\n      return makeUnlinkFn(vm, dirs);\n    };\n  }\n\n  /**\n   * Apply a linker to a vm/element pair and capture the\n   * directives created during the process.\n   *\n   * @param {Function} linker\n   * @param {Vue} vm\n   */\n\n  function linkAndCapture(linker, vm) {\n    var originalDirCount = vm._directives.length;\n    linker();\n    var dirs = vm._directives.slice(originalDirCount);\n    dirs.sort(directiveComparator);\n    for (var i = 0, l = dirs.length; i < l; i++) {\n      dirs[i]._bind();\n    }\n    return dirs;\n  }\n\n  /**\n   * Directive priority sort comparator\n   *\n   * @param {Object} a\n   * @param {Object} b\n   */\n\n  function directiveComparator(a, b) {\n    a = a.descriptor.def.priority || DEFAULT_PRIORITY;\n    b = b.descriptor.def.priority || DEFAULT_PRIORITY;\n    return a > b ? -1 : a === b ? 0 : 1;\n  }\n\n  /**\n   * Linker functions return an unlink function that\n   * tearsdown all directives instances generated during\n   * the process.\n   *\n   * We create unlink functions with only the necessary\n   * information to avoid retaining additional closures.\n   *\n   * @param {Vue} vm\n   * @param {Array} dirs\n   * @param {Vue} [context]\n   * @param {Array} [contextDirs]\n   * @return {Function}\n   */\n\n  function makeUnlinkFn(vm, dirs, context, contextDirs) {\n    return function unlink(destroying) {\n      teardownDirs(vm, dirs, destroying);\n      if (context && contextDirs) {\n        teardownDirs(context, contextDirs);\n      }\n    };\n  }\n\n  /**\n   * Teardown partial linked directives.\n   *\n   * @param {Vue} vm\n   * @param {Array} dirs\n   * @param {Boolean} destroying\n   */\n\n  function teardownDirs(vm, dirs, destroying) {\n    var i = dirs.length;\n    while (i--) {\n      dirs[i]._teardown();\n      if (!destroying) {\n        vm._directives.$remove(dirs[i]);\n      }\n    }\n  }\n\n  /**\n   * Compile link props on an instance.\n   *\n   * @param {Vue} vm\n   * @param {Element} el\n   * @param {Object} props\n   * @param {Object} [scope]\n   * @return {Function}\n   */\n\n  function compileAndLinkProps(vm, el, props, scope) {\n    var propsLinkFn = compileProps(el, props);\n    var propDirs = linkAndCapture(function () {\n      propsLinkFn(vm, scope);\n    }, vm);\n    return makeUnlinkFn(vm, propDirs);\n  }\n\n  /**\n   * Compile the root element of an instance.\n   *\n   * 1. attrs on context container (context scope)\n   * 2. attrs on the component template root node, if\n   *    replace:true (child scope)\n   *\n   * If this is a fragment instance, we only need to compile 1.\n   *\n   * @param {Vue} vm\n   * @param {Element} el\n   * @param {Object} options\n   * @param {Object} contextOptions\n   * @return {Function}\n   */\n\n  function compileRoot(el, options, contextOptions) {\n    var containerAttrs = options._containerAttrs;\n    var replacerAttrs = options._replacerAttrs;\n    var contextLinkFn, replacerLinkFn;\n\n    // only need to compile other attributes for\n    // non-fragment instances\n    if (el.nodeType !== 11) {\n      // for components, container and replacer need to be\n      // compiled separately and linked in different scopes.\n      if (options._asComponent) {\n        // 2. container attributes\n        if (containerAttrs && contextOptions) {\n          contextLinkFn = compileDirectives(containerAttrs, contextOptions);\n        }\n        if (replacerAttrs) {\n          // 3. replacer attributes\n          replacerLinkFn = compileDirectives(replacerAttrs, options);\n        }\n      } else {\n        // non-component, just compile as a normal element.\n        replacerLinkFn = compileDirectives(el.attributes, options);\n      }\n    } else if ('development' !== 'production' && containerAttrs) {\n      // warn container directives for fragment instances\n      var names = containerAttrs.filter(function (attr) {\n        // allow vue-loader/vueify scoped css attributes\n        return attr.name.indexOf('_v-') < 0 &&\n        // allow event listeners\n        !onRE.test(attr.name) &&\n        // allow slots\n        attr.name !== 'slot';\n      }).map(function (attr) {\n        return '\"' + attr.name + '\"';\n      });\n      if (names.length) {\n        var plural = names.length > 1;\n        warn('Attribute' + (plural ? 's ' : ' ') + names.join(', ') + (plural ? ' are' : ' is') + ' ignored on component ' + '<' + options.el.tagName.toLowerCase() + '> because ' + 'the component is a fragment instance: ' + 'http://vuejs.org/guide/components.html#Fragment_Instance');\n      }\n    }\n\n    return function rootLinkFn(vm, el, scope) {\n      // link context scope dirs\n      var context = vm._context;\n      var contextDirs;\n      if (context && contextLinkFn) {\n        contextDirs = linkAndCapture(function () {\n          contextLinkFn(context, el, null, scope);\n        }, context);\n      }\n\n      // link self\n      var selfDirs = linkAndCapture(function () {\n        if (replacerLinkFn) replacerLinkFn(vm, el);\n      }, vm);\n\n      // return the unlink function that tearsdown context\n      // container directives.\n      return makeUnlinkFn(vm, selfDirs, context, contextDirs);\n    };\n  }\n\n  /**\n   * Compile a node and return a nodeLinkFn based on the\n   * node type.\n   *\n   * @param {Node} node\n   * @param {Object} options\n   * @return {Function|null}\n   */\n\n  function compileNode(node, options) {\n    var type = node.nodeType;\n    if (type === 1 && node.tagName !== 'SCRIPT') {\n      return compileElement(node, options);\n    } else if (type === 3 && node.data.trim()) {\n      return compileTextNode(node, options);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Compile an element and return a nodeLinkFn.\n   *\n   * @param {Element} el\n   * @param {Object} options\n   * @return {Function|null}\n   */\n\n  function compileElement(el, options) {\n    // preprocess textareas.\n    // textarea treats its text content as the initial value.\n    // just bind it as an attr directive for value.\n    if (el.tagName === 'TEXTAREA') {\n      var tokens = parseText(el.value);\n      if (tokens) {\n        el.setAttribute(':value', tokensToExp(tokens));\n        el.value = '';\n      }\n    }\n    var linkFn;\n    var hasAttrs = el.hasAttributes();\n    // check terminal directives (for & if)\n    if (hasAttrs) {\n      linkFn = checkTerminalDirectives(el, options);\n    }\n    // check element directives\n    if (!linkFn) {\n      linkFn = checkElementDirectives(el, options);\n    }\n    // check component\n    if (!linkFn) {\n      linkFn = checkComponent(el, options);\n    }\n    // normal directives\n    if (!linkFn && hasAttrs) {\n      linkFn = compileDirectives(el.attributes, options);\n    }\n    return linkFn;\n  }\n\n  /**\n   * Compile a textNode and return a nodeLinkFn.\n   *\n   * @param {TextNode} node\n   * @param {Object} options\n   * @return {Function|null} textNodeLinkFn\n   */\n\n  function compileTextNode(node, options) {\n    // skip marked text nodes\n    if (node._skip) {\n      return removeText;\n    }\n\n    var tokens = parseText(node.wholeText);\n    if (!tokens) {\n      return null;\n    }\n\n    // mark adjacent text nodes as skipped,\n    // because we are using node.wholeText to compile\n    // all adjacent text nodes together. This fixes\n    // issues in IE where sometimes it splits up a single\n    // text node into multiple ones.\n    var next = node.nextSibling;\n    while (next && next.nodeType === 3) {\n      next._skip = true;\n      next = next.nextSibling;\n    }\n\n    var frag = document.createDocumentFragment();\n    var el, token;\n    for (var i = 0, l = tokens.length; i < l; i++) {\n      token = tokens[i];\n      el = token.tag ? processTextToken(token, options) : document.createTextNode(token.value);\n      frag.appendChild(el);\n    }\n    return makeTextNodeLinkFn(tokens, frag, options);\n  }\n\n  /**\n   * Linker for an skipped text node.\n   *\n   * @param {Vue} vm\n   * @param {Text} node\n   */\n\n  function removeText(vm, node) {\n    remove(node);\n  }\n\n  /**\n   * Process a single text token.\n   *\n   * @param {Object} token\n   * @param {Object} options\n   * @return {Node}\n   */\n\n  function processTextToken(token, options) {\n    var el;\n    if (token.oneTime) {\n      el = document.createTextNode(token.value);\n    } else {\n      if (token.html) {\n        el = document.createComment('v-html');\n        setTokenType('html');\n      } else {\n        // IE will clean up empty textNodes during\n        // frag.cloneNode(true), so we have to give it\n        // something here...\n        el = document.createTextNode(' ');\n        setTokenType('text');\n      }\n    }\n    function setTokenType(type) {\n      if (token.descriptor) return;\n      var parsed = parseDirective(token.value);\n      token.descriptor = {\n        name: type,\n        def: publicDirectives[type],\n        expression: parsed.expression,\n        filters: parsed.filters\n      };\n    }\n    return el;\n  }\n\n  /**\n   * Build a function that processes a textNode.\n   *\n   * @param {Array<Object>} tokens\n   * @param {DocumentFragment} frag\n   */\n\n  function makeTextNodeLinkFn(tokens, frag) {\n    return function textNodeLinkFn(vm, el, host, scope) {\n      var fragClone = frag.cloneNode(true);\n      var childNodes = toArray(fragClone.childNodes);\n      var token, value, node;\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        token = tokens[i];\n        value = token.value;\n        if (token.tag) {\n          node = childNodes[i];\n          if (token.oneTime) {\n            value = (scope || vm).$eval(value);\n            if (token.html) {\n              replace(node, parseTemplate(value, true));\n            } else {\n              node.data = value;\n            }\n          } else {\n            vm._bindDir(token.descriptor, node, host, scope);\n          }\n        }\n      }\n      replace(el, fragClone);\n    };\n  }\n\n  /**\n   * Compile a node list and return a childLinkFn.\n   *\n   * @param {NodeList} nodeList\n   * @param {Object} options\n   * @return {Function|undefined}\n   */\n\n  function compileNodeList(nodeList, options) {\n    var linkFns = [];\n    var nodeLinkFn, childLinkFn, node;\n    for (var i = 0, l = nodeList.length; i < l; i++) {\n      node = nodeList[i];\n      nodeLinkFn = compileNode(node, options);\n      childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && node.tagName !== 'SCRIPT' && node.hasChildNodes() ? compileNodeList(node.childNodes, options) : null;\n      linkFns.push(nodeLinkFn, childLinkFn);\n    }\n    return linkFns.length ? makeChildLinkFn(linkFns) : null;\n  }\n\n  /**\n   * Make a child link function for a node's childNodes.\n   *\n   * @param {Array<Function>} linkFns\n   * @return {Function} childLinkFn\n   */\n\n  function makeChildLinkFn(linkFns) {\n    return function childLinkFn(vm, nodes, host, scope, frag) {\n      var node, nodeLinkFn, childrenLinkFn;\n      for (var i = 0, n = 0, l = linkFns.length; i < l; n++) {\n        node = nodes[n];\n        nodeLinkFn = linkFns[i++];\n        childrenLinkFn = linkFns[i++];\n        // cache childNodes before linking parent, fix #657\n        var childNodes = toArray(node.childNodes);\n        if (nodeLinkFn) {\n          nodeLinkFn(vm, node, host, scope, frag);\n        }\n        if (childrenLinkFn) {\n          childrenLinkFn(vm, childNodes, host, scope, frag);\n        }\n      }\n    };\n  }\n\n  /**\n   * Check for element directives (custom elements that should\n   * be resovled as terminal directives).\n   *\n   * @param {Element} el\n   * @param {Object} options\n   */\n\n  function checkElementDirectives(el, options) {\n    var tag = el.tagName.toLowerCase();\n    if (commonTagRE.test(tag)) return;\n    var def = resolveAsset(options, 'elementDirectives', tag);\n    if (def) {\n      return makeTerminalNodeLinkFn(el, tag, '', options, def);\n    }\n  }\n\n  /**\n   * Check if an element is a component. If yes, return\n   * a component link function.\n   *\n   * @param {Element} el\n   * @param {Object} options\n   * @return {Function|undefined}\n   */\n\n  function checkComponent(el, options) {\n    var component = checkComponentAttr(el, options);\n    if (component) {\n      var ref = findRef(el);\n      var descriptor = {\n        name: 'component',\n        ref: ref,\n        expression: component.id,\n        def: internalDirectives.component,\n        modifiers: {\n          literal: !component.dynamic\n        }\n      };\n      var componentLinkFn = function componentLinkFn(vm, el, host, scope, frag) {\n        if (ref) {\n          defineReactive((scope || vm).$refs, ref, null);\n        }\n        vm._bindDir(descriptor, el, host, scope, frag);\n      };\n      componentLinkFn.terminal = true;\n      return componentLinkFn;\n    }\n  }\n\n  /**\n   * Check an element for terminal directives in fixed order.\n   * If it finds one, return a terminal link function.\n   *\n   * @param {Element} el\n   * @param {Object} options\n   * @return {Function} terminalLinkFn\n   */\n\n  function checkTerminalDirectives(el, options) {\n    // skip v-pre\n    if (getAttr(el, 'v-pre') !== null) {\n      return skip;\n    }\n    // skip v-else block, but only if following v-if\n    if (el.hasAttribute('v-else')) {\n      var prev = el.previousElementSibling;\n      if (prev && prev.hasAttribute('v-if')) {\n        return skip;\n      }\n    }\n    var value, dirName;\n    for (var i = 0, l = terminalDirectives.length; i < l; i++) {\n      dirName = terminalDirectives[i];\n      /* eslint-disable no-cond-assign */\n      if (value = el.getAttribute('v-' + dirName)) {\n        return makeTerminalNodeLinkFn(el, dirName, value, options);\n      }\n      /* eslint-enable no-cond-assign */\n    }\n  }\n\n  function skip() {}\n  skip.terminal = true;\n\n  /**\n   * Build a node link function for a terminal directive.\n   * A terminal link function terminates the current\n   * compilation recursion and handles compilation of the\n   * subtree in the directive.\n   *\n   * @param {Element} el\n   * @param {String} dirName\n   * @param {String} value\n   * @param {Object} options\n   * @param {Object} [def]\n   * @return {Function} terminalLinkFn\n   */\n\n  function makeTerminalNodeLinkFn(el, dirName, value, options, def) {\n    var parsed = parseDirective(value);\n    var descriptor = {\n      name: dirName,\n      expression: parsed.expression,\n      filters: parsed.filters,\n      raw: value,\n      // either an element directive, or if/for\n      def: def || publicDirectives[dirName]\n    };\n    // check ref for v-for and router-view\n    if (dirName === 'for' || dirName === 'router-view') {\n      descriptor.ref = findRef(el);\n    }\n    var fn = function terminalNodeLinkFn(vm, el, host, scope, frag) {\n      if (descriptor.ref) {\n        defineReactive((scope || vm).$refs, descriptor.ref, null);\n      }\n      vm._bindDir(descriptor, el, host, scope, frag);\n    };\n    fn.terminal = true;\n    return fn;\n  }\n\n  /**\n   * Compile the directives on an element and return a linker.\n   *\n   * @param {Array|NamedNodeMap} attrs\n   * @param {Object} options\n   * @return {Function}\n   */\n\n  function compileDirectives(attrs, options) {\n    var i = attrs.length;\n    var dirs = [];\n    var attr, name, value, rawName, rawValue, dirName, arg, modifiers, dirDef, tokens;\n    while (i--) {\n      attr = attrs[i];\n      name = rawName = attr.name;\n      value = rawValue = attr.value;\n      tokens = parseText(value);\n      // reset arg\n      arg = null;\n      // check modifiers\n      modifiers = parseModifiers(name);\n      name = name.replace(modifierRE, '');\n\n      // attribute interpolations\n      if (tokens) {\n        value = tokensToExp(tokens);\n        arg = name;\n        pushDir('bind', publicDirectives.bind, true);\n        // warn against mixing mustaches with v-bind\n        if ('development' !== 'production') {\n          if (name === 'class' && Array.prototype.some.call(attrs, function (attr) {\n            return attr.name === ':class' || attr.name === 'v-bind:class';\n          })) {\n            warn('class=\"' + rawValue + '\": Do not mix mustache interpolation ' + 'and v-bind for \"class\" on the same element. Use one or the other.');\n          }\n        }\n      } else\n\n        // special attribute: transition\n        if (transitionRE.test(name)) {\n          modifiers.literal = !bindRE.test(name);\n          pushDir('transition', internalDirectives.transition);\n        } else\n\n          // event handlers\n          if (onRE.test(name)) {\n            arg = name.replace(onRE, '');\n            pushDir('on', publicDirectives.on);\n          } else\n\n            // attribute bindings\n            if (bindRE.test(name)) {\n              dirName = name.replace(bindRE, '');\n              if (dirName === 'style' || dirName === 'class') {\n                pushDir(dirName, internalDirectives[dirName]);\n              } else {\n                arg = dirName;\n                pushDir('bind', publicDirectives.bind);\n              }\n            } else\n\n              // normal directives\n              if (name.indexOf('v-') === 0) {\n                // check arg\n                arg = (arg = name.match(argRE)) && arg[1];\n                if (arg) {\n                  name = name.replace(argRE, '');\n                }\n                // extract directive name\n                dirName = name.slice(2);\n\n                // skip v-else (when used with v-show)\n                if (dirName === 'else') {\n                  continue;\n                }\n\n                dirDef = resolveAsset(options, 'directives', dirName);\n\n                if ('development' !== 'production') {\n                  assertAsset(dirDef, 'directive', dirName);\n                }\n\n                if (dirDef) {\n                  pushDir(dirName, dirDef);\n                }\n              }\n    }\n\n    /**\n     * Push a directive.\n     *\n     * @param {String} dirName\n     * @param {Object|Function} def\n     * @param {Boolean} [interp]\n     */\n\n    function pushDir(dirName, def, interp) {\n      var parsed = parseDirective(value);\n      dirs.push({\n        name: dirName,\n        attr: rawName,\n        raw: rawValue,\n        def: def,\n        arg: arg,\n        modifiers: modifiers,\n        expression: parsed.expression,\n        filters: parsed.filters,\n        interp: interp\n      });\n    }\n\n    if (dirs.length) {\n      return makeNodeLinkFn(dirs);\n    }\n  }\n\n  /**\n   * Parse modifiers from directive attribute name.\n   *\n   * @param {String} name\n   * @return {Object}\n   */\n\n  function parseModifiers(name) {\n    var res = Object.create(null);\n    var match = name.match(modifierRE);\n    if (match) {\n      var i = match.length;\n      while (i--) {\n        res[match[i].slice(1)] = true;\n      }\n    }\n    return res;\n  }\n\n  /**\n   * Build a link function for all directives on a single node.\n   *\n   * @param {Array} directives\n   * @return {Function} directivesLinkFn\n   */\n\n  function makeNodeLinkFn(directives) {\n    return function nodeLinkFn(vm, el, host, scope, frag) {\n      // reverse apply because it's sorted low to high\n      var i = directives.length;\n      while (i--) {\n        vm._bindDir(directives[i], el, host, scope, frag);\n      }\n    };\n  }\n\n  var specialCharRE = /[^\\w\\-:\\.]/;\n\n  /**\n   * Process an element or a DocumentFragment based on a\n   * instance option object. This allows us to transclude\n   * a template node/fragment before the instance is created,\n   * so the processed fragment can then be cloned and reused\n   * in v-for.\n   *\n   * @param {Element} el\n   * @param {Object} options\n   * @return {Element|DocumentFragment}\n   */\n\n  function transclude(el, options) {\n    // extract container attributes to pass them down\n    // to compiler, because they need to be compiled in\n    // parent scope. we are mutating the options object here\n    // assuming the same object will be used for compile\n    // right after this.\n    if (options) {\n      options._containerAttrs = extractAttrs(el);\n    }\n    // for template tags, what we want is its content as\n    // a documentFragment (for fragment instances)\n    if (isTemplate(el)) {\n      el = parseTemplate(el);\n    }\n    if (options) {\n      if (options._asComponent && !options.template) {\n        options.template = '<slot></slot>';\n      }\n      if (options.template) {\n        options._content = extractContent(el);\n        el = transcludeTemplate(el, options);\n      }\n    }\n    if (el instanceof DocumentFragment) {\n      // anchors for fragment instance\n      // passing in `persist: true` to avoid them being\n      // discarded by IE during template cloning\n      prepend(createAnchor('v-start', true), el);\n      el.appendChild(createAnchor('v-end', true));\n    }\n    return el;\n  }\n\n  /**\n   * Process the template option.\n   * If the replace option is true this will swap the $el.\n   *\n   * @param {Element} el\n   * @param {Object} options\n   * @return {Element|DocumentFragment}\n   */\n\n  function transcludeTemplate(el, options) {\n    var template = options.template;\n    var frag = parseTemplate(template, true);\n    if (frag) {\n      var replacer = frag.firstChild;\n      var tag = replacer.tagName && replacer.tagName.toLowerCase();\n      if (options.replace) {\n        /* istanbul ignore if */\n        if (el === document.body) {\n          'development' !== 'production' && warn('You are mounting an instance with a template to ' + '<body>. This will replace <body> entirely. You ' + 'should probably use `replace: false` here.');\n        }\n        // there are many cases where the instance must\n        // become a fragment instance: basically anything that\n        // can create more than 1 root nodes.\n        if (\n        // multi-children template\n        frag.childNodes.length > 1 ||\n        // non-element template\n        replacer.nodeType !== 1 ||\n        // single nested component\n        tag === 'component' || resolveAsset(options, 'components', tag) || replacer.hasAttribute('is') || replacer.hasAttribute(':is') || replacer.hasAttribute('v-bind:is') ||\n        // element directive\n        resolveAsset(options, 'elementDirectives', tag) ||\n        // for block\n        replacer.hasAttribute('v-for') ||\n        // if block\n        replacer.hasAttribute('v-if')) {\n          return frag;\n        } else {\n          options._replacerAttrs = extractAttrs(replacer);\n          mergeAttrs(el, replacer);\n          return replacer;\n        }\n      } else {\n        el.appendChild(frag);\n        return el;\n      }\n    } else {\n      'development' !== 'production' && warn('Invalid template option: ' + template);\n    }\n  }\n\n  /**\n   * Helper to extract a component container's attributes\n   * into a plain object array.\n   *\n   * @param {Element} el\n   * @return {Array}\n   */\n\n  function extractAttrs(el) {\n    if (el.nodeType === 1 && el.hasAttributes()) {\n      return toArray(el.attributes);\n    }\n  }\n\n  /**\n   * Merge the attributes of two elements, and make sure\n   * the class names are merged properly.\n   *\n   * @param {Element} from\n   * @param {Element} to\n   */\n\n  function mergeAttrs(from, to) {\n    var attrs = from.attributes;\n    var i = attrs.length;\n    var name, value;\n    while (i--) {\n      name = attrs[i].name;\n      value = attrs[i].value;\n      if (!to.hasAttribute(name) && !specialCharRE.test(name)) {\n        to.setAttribute(name, value);\n      } else if (name === 'class') {\n        value.split(/\\s+/).forEach(function (cls) {\n          addClass(to, cls);\n        });\n      }\n    }\n  }\n\n  var compiler = Object.freeze({\n  \tcompile: compile,\n  \tcompileAndLinkProps: compileAndLinkProps,\n  \tcompileRoot: compileRoot,\n  \ttransclude: transclude\n  });\n\n  function stateMixin (Vue) {\n\n    /**\n     * Accessor for `$data` property, since setting $data\n     * requires observing the new object and updating\n     * proxied properties.\n     */\n\n    Object.defineProperty(Vue.prototype, '$data', {\n      get: function get() {\n        return this._data;\n      },\n      set: function set(newData) {\n        if (newData !== this._data) {\n          this._setData(newData);\n        }\n      }\n    });\n\n    /**\n     * Setup the scope of an instance, which contains:\n     * - observed data\n     * - computed properties\n     * - user methods\n     * - meta properties\n     */\n\n    Vue.prototype._initState = function () {\n      this._initProps();\n      this._initMeta();\n      this._initMethods();\n      this._initData();\n      this._initComputed();\n    };\n\n    /**\n     * Initialize props.\n     */\n\n    Vue.prototype._initProps = function () {\n      var options = this.$options;\n      var el = options.el;\n      var props = options.props;\n      if (props && !el) {\n        'development' !== 'production' && warn('Props will not be compiled if no `el` option is ' + 'provided at instantiation.');\n      }\n      // make sure to convert string selectors into element now\n      el = options.el = query(el);\n      this._propsUnlinkFn = el && el.nodeType === 1 && props\n      // props must be linked in proper scope if inside v-for\n      ? compileAndLinkProps(this, el, props, this._scope) : null;\n    };\n\n    /**\n     * Initialize the data.\n     */\n\n    Vue.prototype._initData = function () {\n      var propsData = this._data;\n      var optionsDataFn = this.$options.data;\n      var optionsData = optionsDataFn && optionsDataFn();\n      if (optionsData) {\n        this._data = optionsData;\n        for (var prop in propsData) {\n          if ('development' !== 'production' && hasOwn(optionsData, prop)) {\n            warn('Data field \"' + prop + '\" is already defined ' + 'as a prop. Use prop default value instead.');\n          }\n          if (this._props[prop].raw !== null || !hasOwn(optionsData, prop)) {\n            set(optionsData, prop, propsData[prop]);\n          }\n        }\n      }\n      var data = this._data;\n      // proxy data on instance\n      var keys = Object.keys(data);\n      var i, key;\n      i = keys.length;\n      while (i--) {\n        key = keys[i];\n        this._proxy(key);\n      }\n      // observe data\n      observe(data, this);\n    };\n\n    /**\n     * Swap the instance's $data. Called in $data's setter.\n     *\n     * @param {Object} newData\n     */\n\n    Vue.prototype._setData = function (newData) {\n      newData = newData || {};\n      var oldData = this._data;\n      this._data = newData;\n      var keys, key, i;\n      // unproxy keys not present in new data\n      keys = Object.keys(oldData);\n      i = keys.length;\n      while (i--) {\n        key = keys[i];\n        if (!(key in newData)) {\n          this._unproxy(key);\n        }\n      }\n      // proxy keys not already proxied,\n      // and trigger change for changed values\n      keys = Object.keys(newData);\n      i = keys.length;\n      while (i--) {\n        key = keys[i];\n        if (!hasOwn(this, key)) {\n          // new property\n          this._proxy(key);\n        }\n      }\n      oldData.__ob__.removeVm(this);\n      observe(newData, this);\n      this._digest();\n    };\n\n    /**\n     * Proxy a property, so that\n     * vm.prop === vm._data.prop\n     *\n     * @param {String} key\n     */\n\n    Vue.prototype._proxy = function (key) {\n      if (!isReserved(key)) {\n        // need to store ref to self here\n        // because these getter/setters might\n        // be called by child scopes via\n        // prototype inheritance.\n        var self = this;\n        Object.defineProperty(self, key, {\n          configurable: true,\n          enumerable: true,\n          get: function proxyGetter() {\n            return self._data[key];\n          },\n          set: function proxySetter(val) {\n            self._data[key] = val;\n          }\n        });\n      }\n    };\n\n    /**\n     * Unproxy a property.\n     *\n     * @param {String} key\n     */\n\n    Vue.prototype._unproxy = function (key) {\n      if (!isReserved(key)) {\n        delete this[key];\n      }\n    };\n\n    /**\n     * Force update on every watcher in scope.\n     */\n\n    Vue.prototype._digest = function () {\n      for (var i = 0, l = this._watchers.length; i < l; i++) {\n        this._watchers[i].update(true); // shallow updates\n      }\n    };\n\n    /**\n     * Setup computed properties. They are essentially\n     * special getter/setters\n     */\n\n    function noop() {}\n    Vue.prototype._initComputed = function () {\n      var computed = this.$options.computed;\n      if (computed) {\n        for (var key in computed) {\n          var userDef = computed[key];\n          var def = {\n            enumerable: true,\n            configurable: true\n          };\n          if (typeof userDef === 'function') {\n            def.get = makeComputedGetter(userDef, this);\n            def.set = noop;\n          } else {\n            def.get = userDef.get ? userDef.cache !== false ? makeComputedGetter(userDef.get, this) : bind$1(userDef.get, this) : noop;\n            def.set = userDef.set ? bind$1(userDef.set, this) : noop;\n          }\n          Object.defineProperty(this, key, def);\n        }\n      }\n    };\n\n    function makeComputedGetter(getter, owner) {\n      var watcher = new Watcher(owner, getter, null, {\n        lazy: true\n      });\n      return function computedGetter() {\n        if (watcher.dirty) {\n          watcher.evaluate();\n        }\n        if (Dep.target) {\n          watcher.depend();\n        }\n        return watcher.value;\n      };\n    }\n\n    /**\n     * Setup instance methods. Methods must be bound to the\n     * instance since they might be passed down as a prop to\n     * child components.\n     */\n\n    Vue.prototype._initMethods = function () {\n      var methods = this.$options.methods;\n      if (methods) {\n        for (var key in methods) {\n          this[key] = bind$1(methods[key], this);\n        }\n      }\n    };\n\n    /**\n     * Initialize meta information like $index, $key & $value.\n     */\n\n    Vue.prototype._initMeta = function () {\n      var metas = this.$options._meta;\n      if (metas) {\n        for (var key in metas) {\n          defineReactive(this, key, metas[key]);\n        }\n      }\n    };\n  }\n\n  var eventRE = /^v-on:|^@/;\n\n  function eventsMixin (Vue) {\n\n    /**\n     * Setup the instance's option events & watchers.\n     * If the value is a string, we pull it from the\n     * instance's methods by name.\n     */\n\n    Vue.prototype._initEvents = function () {\n      var options = this.$options;\n      if (options._asComponent) {\n        registerComponentEvents(this, options.el);\n      }\n      registerCallbacks(this, '$on', options.events);\n      registerCallbacks(this, '$watch', options.watch);\n    };\n\n    /**\n     * Register v-on events on a child component\n     *\n     * @param {Vue} vm\n     * @param {Element} el\n     */\n\n    function registerComponentEvents(vm, el) {\n      var attrs = el.attributes;\n      var name, handler;\n      for (var i = 0, l = attrs.length; i < l; i++) {\n        name = attrs[i].name;\n        if (eventRE.test(name)) {\n          name = name.replace(eventRE, '');\n          handler = (vm._scope || vm._context).$eval(attrs[i].value, true);\n          vm.$on(name.replace(eventRE), handler);\n        }\n      }\n    }\n\n    /**\n     * Register callbacks for option events and watchers.\n     *\n     * @param {Vue} vm\n     * @param {String} action\n     * @param {Object} hash\n     */\n\n    function registerCallbacks(vm, action, hash) {\n      if (!hash) return;\n      var handlers, key, i, j;\n      for (key in hash) {\n        handlers = hash[key];\n        if (isArray(handlers)) {\n          for (i = 0, j = handlers.length; i < j; i++) {\n            register(vm, action, key, handlers[i]);\n          }\n        } else {\n          register(vm, action, key, handlers);\n        }\n      }\n    }\n\n    /**\n     * Helper to register an event/watch callback.\n     *\n     * @param {Vue} vm\n     * @param {String} action\n     * @param {String} key\n     * @param {Function|String|Object} handler\n     * @param {Object} [options]\n     */\n\n    function register(vm, action, key, handler, options) {\n      var type = typeof handler;\n      if (type === 'function') {\n        vm[action](key, handler, options);\n      } else if (type === 'string') {\n        var methods = vm.$options.methods;\n        var method = methods && methods[handler];\n        if (method) {\n          vm[action](key, method, options);\n        } else {\n          'development' !== 'production' && warn('Unknown method: \"' + handler + '\" when ' + 'registering callback for ' + action + ': \"' + key + '\".');\n        }\n      } else if (handler && type === 'object') {\n        register(vm, action, key, handler.handler, handler);\n      }\n    }\n\n    /**\n     * Setup recursive attached/detached calls\n     */\n\n    Vue.prototype._initDOMHooks = function () {\n      this.$on('hook:attached', onAttached);\n      this.$on('hook:detached', onDetached);\n    };\n\n    /**\n     * Callback to recursively call attached hook on children\n     */\n\n    function onAttached() {\n      if (!this._isAttached) {\n        this._isAttached = true;\n        this.$children.forEach(callAttach);\n      }\n    }\n\n    /**\n     * Iterator to call attached hook\n     *\n     * @param {Vue} child\n     */\n\n    function callAttach(child) {\n      if (!child._isAttached && inDoc(child.$el)) {\n        child._callHook('attached');\n      }\n    }\n\n    /**\n     * Callback to recursively call detached hook on children\n     */\n\n    function onDetached() {\n      if (this._isAttached) {\n        this._isAttached = false;\n        this.$children.forEach(callDetach);\n      }\n    }\n\n    /**\n     * Iterator to call detached hook\n     *\n     * @param {Vue} child\n     */\n\n    function callDetach(child) {\n      if (child._isAttached && !inDoc(child.$el)) {\n        child._callHook('detached');\n      }\n    }\n\n    /**\n     * Trigger all handlers for a hook\n     *\n     * @param {String} hook\n     */\n\n    Vue.prototype._callHook = function (hook) {\n      var handlers = this.$options[hook];\n      if (handlers) {\n        for (var i = 0, j = handlers.length; i < j; i++) {\n          handlers[i].call(this);\n        }\n      }\n      this.$emit('hook:' + hook);\n    };\n  }\n\n  function noop() {}\n\n  /**\n   * A directive links a DOM element with a piece of data,\n   * which is the result of evaluating an expression.\n   * It registers a watcher with the expression and calls\n   * the DOM update function when a change is triggered.\n   *\n   * @param {String} name\n   * @param {Node} el\n   * @param {Vue} vm\n   * @param {Object} descriptor\n   *                 - {String} name\n   *                 - {Object} def\n   *                 - {String} expression\n   *                 - {Array<Object>} [filters]\n   *                 - {Boolean} literal\n   *                 - {String} attr\n   *                 - {String} raw\n   * @param {Object} def - directive definition object\n   * @param {Vue} [host] - transclusion host component\n   * @param {Object} [scope] - v-for scope\n   * @param {Fragment} [frag] - owner fragment\n   * @constructor\n   */\n  function Directive(descriptor, vm, el, host, scope, frag) {\n    this.vm = vm;\n    this.el = el;\n    // copy descriptor properties\n    this.descriptor = descriptor;\n    this.name = descriptor.name;\n    this.expression = descriptor.expression;\n    this.arg = descriptor.arg;\n    this.modifiers = descriptor.modifiers;\n    this.filters = descriptor.filters;\n    this.literal = this.modifiers && this.modifiers.literal;\n    // private\n    this._locked = false;\n    this._bound = false;\n    this._listeners = null;\n    // link context\n    this._host = host;\n    this._scope = scope;\n    this._frag = frag;\n    // store directives on node in dev mode\n    if ('development' !== 'production' && this.el) {\n      this.el._vue_directives = this.el._vue_directives || [];\n      this.el._vue_directives.push(this);\n    }\n  }\n\n  /**\n   * Initialize the directive, mixin definition properties,\n   * setup the watcher, call definition bind() and update()\n   * if present.\n   *\n   * @param {Object} def\n   */\n\n  Directive.prototype._bind = function () {\n    var name = this.name;\n    var descriptor = this.descriptor;\n\n    // remove attribute\n    if ((name !== 'cloak' || this.vm._isCompiled) && this.el && this.el.removeAttribute) {\n      var attr = descriptor.attr || 'v-' + name;\n      this.el.removeAttribute(attr);\n    }\n\n    // copy def properties\n    var def = descriptor.def;\n    if (typeof def === 'function') {\n      this.update = def;\n    } else {\n      extend(this, def);\n    }\n\n    // setup directive params\n    this._setupParams();\n\n    // initial bind\n    if (this.bind) {\n      this.bind();\n    }\n\n    if (this.literal) {\n      this.update && this.update(descriptor.raw);\n    } else if ((this.expression || this.modifiers) && (this.update || this.twoWay) && !this._checkStatement()) {\n      // wrapped updater for context\n      var dir = this;\n      if (this.update) {\n        this._update = function (val, oldVal) {\n          if (!dir._locked) {\n            dir.update(val, oldVal);\n          }\n        };\n      } else {\n        this._update = noop;\n      }\n      var preProcess = this._preProcess ? bind$1(this._preProcess, this) : null;\n      var postProcess = this._postProcess ? bind$1(this._postProcess, this) : null;\n      var watcher = this._watcher = new Watcher(this.vm, this.expression, this._update, // callback\n      {\n        filters: this.filters,\n        twoWay: this.twoWay,\n        deep: this.deep,\n        preProcess: preProcess,\n        postProcess: postProcess,\n        scope: this._scope\n      });\n      // v-model with inital inline value need to sync back to\n      // model instead of update to DOM on init. They would\n      // set the afterBind hook to indicate that.\n      if (this.afterBind) {\n        this.afterBind();\n      } else if (this.update) {\n        this.update(watcher.value);\n      }\n    }\n    this._bound = true;\n  };\n\n  /**\n   * Setup all param attributes, e.g. track-by,\n   * transition-mode, etc...\n   */\n\n  Directive.prototype._setupParams = function () {\n    if (!this.params) {\n      return;\n    }\n    var params = this.params;\n    // swap the params array with a fresh object.\n    this.params = Object.create(null);\n    var i = params.length;\n    var key, val, mappedKey;\n    while (i--) {\n      key = params[i];\n      mappedKey = camelize(key);\n      val = getBindAttr(this.el, key);\n      if (val != null) {\n        // dynamic\n        this._setupParamWatcher(mappedKey, val);\n      } else {\n        // static\n        val = getAttr(this.el, key);\n        if (val != null) {\n          this.params[mappedKey] = val === '' ? true : val;\n        }\n      }\n    }\n  };\n\n  /**\n   * Setup a watcher for a dynamic param.\n   *\n   * @param {String} key\n   * @param {String} expression\n   */\n\n  Directive.prototype._setupParamWatcher = function (key, expression) {\n    var self = this;\n    var called = false;\n    var unwatch = (this._scope || this.vm).$watch(expression, function (val, oldVal) {\n      self.params[key] = val;\n      // since we are in immediate mode,\n      // only call the param change callbacks if this is not the first update.\n      if (called) {\n        var cb = self.paramWatchers && self.paramWatchers[key];\n        if (cb) {\n          cb.call(self, val, oldVal);\n        }\n      } else {\n        called = true;\n      }\n    }, {\n      immediate: true\n    });(this._paramUnwatchFns || (this._paramUnwatchFns = [])).push(unwatch);\n  };\n\n  /**\n   * Check if the directive is a function caller\n   * and if the expression is a callable one. If both true,\n   * we wrap up the expression and use it as the event\n   * handler.\n   *\n   * e.g. on-click=\"a++\"\n   *\n   * @return {Boolean}\n   */\n\n  Directive.prototype._checkStatement = function () {\n    var expression = this.expression;\n    if (expression && this.acceptStatement && !isSimplePath(expression)) {\n      var fn = parseExpression(expression).get;\n      var scope = this._scope || this.vm;\n      var handler = function handler(e) {\n        scope.$event = e;\n        fn.call(scope, scope);\n        scope.$event = null;\n      };\n      if (this.filters) {\n        handler = scope._applyFilters(handler, null, this.filters);\n      }\n      this.update(handler);\n      return true;\n    }\n  };\n\n  /**\n   * Set the corresponding value with the setter.\n   * This should only be used in two-way directives\n   * e.g. v-model.\n   *\n   * @param {*} value\n   * @public\n   */\n\n  Directive.prototype.set = function (value) {\n    /* istanbul ignore else */\n    if (this.twoWay) {\n      this._withLock(function () {\n        this._watcher.set(value);\n      });\n    } else if ('development' !== 'production') {\n      warn('Directive.set() can only be used inside twoWay' + 'directives.');\n    }\n  };\n\n  /**\n   * Execute a function while preventing that function from\n   * triggering updates on this directive instance.\n   *\n   * @param {Function} fn\n   */\n\n  Directive.prototype._withLock = function (fn) {\n    var self = this;\n    self._locked = true;\n    fn.call(self);\n    nextTick(function () {\n      self._locked = false;\n    });\n  };\n\n  /**\n   * Convenience method that attaches a DOM event listener\n   * to the directive element and autometically tears it down\n   * during unbind.\n   *\n   * @param {String} event\n   * @param {Function} handler\n   */\n\n  Directive.prototype.on = function (event, handler) {\n    on$1(this.el, event, handler);(this._listeners || (this._listeners = [])).push([event, handler]);\n  };\n\n  /**\n   * Teardown the watcher and call unbind.\n   */\n\n  Directive.prototype._teardown = function () {\n    if (this._bound) {\n      this._bound = false;\n      if (this.unbind) {\n        this.unbind();\n      }\n      if (this._watcher) {\n        this._watcher.teardown();\n      }\n      var listeners = this._listeners;\n      var i;\n      if (listeners) {\n        i = listeners.length;\n        while (i--) {\n          off(this.el, listeners[i][0], listeners[i][1]);\n        }\n      }\n      var unwatchFns = this._paramUnwatchFns;\n      if (unwatchFns) {\n        i = unwatchFns.length;\n        while (i--) {\n          unwatchFns[i]();\n        }\n      }\n      if ('development' !== 'production' && this.el) {\n        this.el._vue_directives.$remove(this);\n      }\n      this.vm = this.el = this._watcher = this._listeners = null;\n    }\n  };\n\n  function lifecycleMixin (Vue) {\n\n    /**\n     * Update v-ref for component.\n     *\n     * @param {Boolean} remove\n     */\n\n    Vue.prototype._updateRef = function (remove) {\n      var ref = this.$options._ref;\n      if (ref) {\n        var refs = (this._scope || this._context).$refs;\n        if (remove) {\n          if (refs[ref] === this) {\n            refs[ref] = null;\n          }\n        } else {\n          refs[ref] = this;\n        }\n      }\n    };\n\n    /**\n     * Transclude, compile and link element.\n     *\n     * If a pre-compiled linker is available, that means the\n     * passed in element will be pre-transcluded and compiled\n     * as well - all we need to do is to call the linker.\n     *\n     * Otherwise we need to call transclude/compile/link here.\n     *\n     * @param {Element} el\n     * @return {Element}\n     */\n\n    Vue.prototype._compile = function (el) {\n      var options = this.$options;\n\n      // transclude and init element\n      // transclude can potentially replace original\n      // so we need to keep reference; this step also injects\n      // the template and caches the original attributes\n      // on the container node and replacer node.\n      var original = el;\n      el = transclude(el, options);\n      this._initElement(el);\n\n      // root is always compiled per-instance, because\n      // container attrs and props can be different every time.\n      var contextOptions = this._context && this._context.$options;\n      var rootLinker = compileRoot(el, options, contextOptions);\n\n      // compile and link the rest\n      var contentLinkFn;\n      var ctor = this.constructor;\n      // component compilation can be cached\n      // as long as it's not using inline-template\n      if (options._linkerCachable) {\n        contentLinkFn = ctor.linker;\n        if (!contentLinkFn) {\n          contentLinkFn = ctor.linker = compile(el, options);\n        }\n      }\n\n      // link phase\n      // make sure to link root with prop scope!\n      var rootUnlinkFn = rootLinker(this, el, this._scope);\n      var contentUnlinkFn = contentLinkFn ? contentLinkFn(this, el) : compile(el, options)(this, el);\n\n      // register composite unlink function\n      // to be called during instance destruction\n      this._unlinkFn = function () {\n        rootUnlinkFn();\n        // passing destroying: true to avoid searching and\n        // splicing the directives\n        contentUnlinkFn(true);\n      };\n\n      // finally replace original\n      if (options.replace) {\n        replace(original, el);\n      }\n\n      this._isCompiled = true;\n      this._callHook('compiled');\n      return el;\n    };\n\n    /**\n     * Initialize instance element. Called in the public\n     * $mount() method.\n     *\n     * @param {Element} el\n     */\n\n    Vue.prototype._initElement = function (el) {\n      if (el instanceof DocumentFragment) {\n        this._isFragment = true;\n        this.$el = this._fragmentStart = el.firstChild;\n        this._fragmentEnd = el.lastChild;\n        // set persisted text anchors to empty\n        if (this._fragmentStart.nodeType === 3) {\n          this._fragmentStart.data = this._fragmentEnd.data = '';\n        }\n        this._fragment = el;\n      } else {\n        this.$el = el;\n      }\n      this.$el.__vue__ = this;\n      this._callHook('beforeCompile');\n    };\n\n    /**\n     * Create and bind a directive to an element.\n     *\n     * @param {String} name - directive name\n     * @param {Node} node   - target node\n     * @param {Object} desc - parsed directive descriptor\n     * @param {Object} def  - directive definition object\n     * @param {Vue} [host] - transclusion host component\n     * @param {Object} [scope] - v-for scope\n     * @param {Fragment} [frag] - owner fragment\n     */\n\n    Vue.prototype._bindDir = function (descriptor, node, host, scope, frag) {\n      this._directives.push(new Directive(descriptor, this, node, host, scope, frag));\n    };\n\n    /**\n     * Teardown an instance, unobserves the data, unbind all the\n     * directives, turn off all the event listeners, etc.\n     *\n     * @param {Boolean} remove - whether to remove the DOM node.\n     * @param {Boolean} deferCleanup - if true, defer cleanup to\n     *                                 be called later\n     */\n\n    Vue.prototype._destroy = function (remove, deferCleanup) {\n      if (this._isBeingDestroyed) {\n        if (!deferCleanup) {\n          this._cleanup();\n        }\n        return;\n      }\n      this._callHook('beforeDestroy');\n      this._isBeingDestroyed = true;\n      var i;\n      // remove self from parent. only necessary\n      // if parent is not being destroyed as well.\n      var parent = this.$parent;\n      if (parent && !parent._isBeingDestroyed) {\n        parent.$children.$remove(this);\n        // unregister ref (remove: true)\n        this._updateRef(true);\n      }\n      // destroy all children.\n      i = this.$children.length;\n      while (i--) {\n        this.$children[i].$destroy();\n      }\n      // teardown props\n      if (this._propsUnlinkFn) {\n        this._propsUnlinkFn();\n      }\n      // teardown all directives. this also tearsdown all\n      // directive-owned watchers.\n      if (this._unlinkFn) {\n        this._unlinkFn();\n      }\n      i = this._watchers.length;\n      while (i--) {\n        this._watchers[i].teardown();\n      }\n      // remove reference to self on $el\n      if (this.$el) {\n        this.$el.__vue__ = null;\n      }\n      // remove DOM element\n      var self = this;\n      if (remove && this.$el) {\n        this.$remove(function () {\n          self._cleanup();\n        });\n      } else if (!deferCleanup) {\n        this._cleanup();\n      }\n    };\n\n    /**\n     * Clean up to ensure garbage collection.\n     * This is called after the leave transition if there\n     * is any.\n     */\n\n    Vue.prototype._cleanup = function () {\n      if (this._isDestroyed) {\n        return;\n      }\n      // remove self from owner fragment\n      // do it in cleanup so that we can call $destroy with\n      // defer right when a fragment is about to be removed.\n      if (this._frag) {\n        this._frag.children.$remove(this);\n      }\n      // remove reference from data ob\n      // frozen object may not have observer.\n      if (this._data.__ob__) {\n        this._data.__ob__.removeVm(this);\n      }\n      // Clean up references to private properties and other\n      // instances. preserve reference to _data so that proxy\n      // accessors still work. The only potential side effect\n      // here is that mutating the instance after it's destroyed\n      // may affect the state of other components that are still\n      // observing the same object, but that seems to be a\n      // reasonable responsibility for the user rather than\n      // always throwing an error on them.\n      this.$el = this.$parent = this.$root = this.$children = this._watchers = this._context = this._scope = this._directives = null;\n      // call the last hook...\n      this._isDestroyed = true;\n      this._callHook('destroyed');\n      // turn off all instance listeners.\n      this.$off();\n    };\n  }\n\n  function miscMixin (Vue) {\n\n    /**\n     * Apply a list of filter (descriptors) to a value.\n     * Using plain for loops here because this will be called in\n     * the getter of any watcher with filters so it is very\n     * performance sensitive.\n     *\n     * @param {*} value\n     * @param {*} [oldValue]\n     * @param {Array} filters\n     * @param {Boolean} write\n     * @return {*}\n     */\n\n    Vue.prototype._applyFilters = function (value, oldValue, filters, write) {\n      var filter, fn, args, arg, offset, i, l, j, k;\n      for (i = 0, l = filters.length; i < l; i++) {\n        filter = filters[i];\n        fn = resolveAsset(this.$options, 'filters', filter.name);\n        if ('development' !== 'production') {\n          assertAsset(fn, 'filter', filter.name);\n        }\n        if (!fn) continue;\n        fn = write ? fn.write : fn.read || fn;\n        if (typeof fn !== 'function') continue;\n        args = write ? [value, oldValue] : [value];\n        offset = write ? 2 : 1;\n        if (filter.args) {\n          for (j = 0, k = filter.args.length; j < k; j++) {\n            arg = filter.args[j];\n            args[j + offset] = arg.dynamic ? this.$get(arg.value) : arg.value;\n          }\n        }\n        value = fn.apply(this, args);\n      }\n      return value;\n    };\n\n    /**\n     * Resolve a component, depending on whether the component\n     * is defined normally or using an async factory function.\n     * Resolves synchronously if already resolved, otherwise\n     * resolves asynchronously and caches the resolved\n     * constructor on the factory.\n     *\n     * @param {String} id\n     * @param {Function} cb\n     */\n\n    Vue.prototype._resolveComponent = function (id, cb) {\n      var factory = resolveAsset(this.$options, 'components', id);\n      if ('development' !== 'production') {\n        assertAsset(factory, 'component', id);\n      }\n      if (!factory) {\n        return;\n      }\n      // async component factory\n      if (!factory.options) {\n        if (factory.resolved) {\n          // cached\n          cb(factory.resolved);\n        } else if (factory.requested) {\n          // pool callbacks\n          factory.pendingCallbacks.push(cb);\n        } else {\n          factory.requested = true;\n          var cbs = factory.pendingCallbacks = [cb];\n          factory(function resolve(res) {\n            if (isPlainObject(res)) {\n              res = Vue.extend(res);\n            }\n            // cache resolved\n            factory.resolved = res;\n            // invoke callbacks\n            for (var i = 0, l = cbs.length; i < l; i++) {\n              cbs[i](res);\n            }\n          }, function reject(reason) {\n            'development' !== 'production' && warn('Failed to resolve async component: ' + id + '. ' + (reason ? '\\nReason: ' + reason : ''));\n          });\n        }\n      } else {\n        // normal component\n        cb(factory);\n      }\n    };\n  }\n\n  function globalAPI (Vue) {\n\n    /**\n     * Expose useful internals\n     */\n\n    Vue.util = util;\n    Vue.config = config;\n    Vue.set = set;\n    Vue['delete'] = del;\n    Vue.nextTick = nextTick;\n\n    /**\n     * The following are exposed for advanced usage / plugins\n     */\n\n    Vue.compiler = compiler;\n    Vue.FragmentFactory = FragmentFactory;\n    Vue.internalDirectives = internalDirectives;\n    Vue.parsers = {\n      path: path,\n      text: text$1,\n      template: template,\n      directive: directive,\n      expression: expression\n    };\n\n    /**\n     * Each instance constructor, including Vue, has a unique\n     * cid. This enables us to create wrapped \"child\n     * constructors\" for prototypal inheritance and cache them.\n     */\n\n    Vue.cid = 0;\n    var cid = 1;\n\n    /**\n     * Class inheritance\n     *\n     * @param {Object} extendOptions\n     */\n\n    Vue.extend = function (extendOptions) {\n      extendOptions = extendOptions || {};\n      var Super = this;\n      var isFirstExtend = Super.cid === 0;\n      if (isFirstExtend && extendOptions._Ctor) {\n        return extendOptions._Ctor;\n      }\n      var name = extendOptions.name || Super.options.name;\n      var Sub = createClass(name || 'VueComponent');\n      Sub.prototype = Object.create(Super.prototype);\n      Sub.prototype.constructor = Sub;\n      Sub.cid = cid++;\n      Sub.options = mergeOptions(Super.options, extendOptions);\n      Sub['super'] = Super;\n      // allow further extension\n      Sub.extend = Super.extend;\n      // create asset registers, so extended classes\n      // can have their private assets too.\n      config._assetTypes.forEach(function (type) {\n        Sub[type] = Super[type];\n      });\n      // enable recursive self-lookup\n      if (name) {\n        Sub.options.components[name] = Sub;\n      }\n      // cache constructor\n      if (isFirstExtend) {\n        extendOptions._Ctor = Sub;\n      }\n      return Sub;\n    };\n\n    /**\n     * A function that returns a sub-class constructor with the\n     * given name. This gives us much nicer output when\n     * logging instances in the console.\n     *\n     * @param {String} name\n     * @return {Function}\n     */\n\n    function createClass(name) {\n      return new Function('return function ' + classify(name) + ' (options) { this._init(options) }')();\n    }\n\n    /**\n     * Plugin system\n     *\n     * @param {Object} plugin\n     */\n\n    Vue.use = function (plugin) {\n      /* istanbul ignore if */\n      if (plugin.installed) {\n        return;\n      }\n      // additional parameters\n      var args = toArray(arguments, 1);\n      args.unshift(this);\n      if (typeof plugin.install === 'function') {\n        plugin.install.apply(plugin, args);\n      } else {\n        plugin.apply(null, args);\n      }\n      plugin.installed = true;\n      return this;\n    };\n\n    /**\n     * Apply a global mixin by merging it into the default\n     * options.\n     */\n\n    Vue.mixin = function (mixin) {\n      Vue.options = mergeOptions(Vue.options, mixin);\n    };\n\n    /**\n     * Create asset registration methods with the following\n     * signature:\n     *\n     * @param {String} id\n     * @param {*} definition\n     */\n\n    config._assetTypes.forEach(function (type) {\n      Vue[type] = function (id, definition) {\n        if (!definition) {\n          return this.options[type + 's'][id];\n        } else {\n          /* istanbul ignore if */\n          if ('development' !== 'production') {\n            if (type === 'component' && commonTagRE.test(id)) {\n              warn('Do not use built-in HTML elements as component ' + 'id: ' + id);\n            }\n          }\n          if (type === 'component' && isPlainObject(definition)) {\n            definition.name = id;\n            definition = Vue.extend(definition);\n          }\n          this.options[type + 's'][id] = definition;\n          return definition;\n        }\n      };\n    });\n  }\n\n  var filterRE = /[^|]\\|[^|]/;\n\n  function dataAPI (Vue) {\n\n    /**\n     * Get the value from an expression on this vm.\n     *\n     * @param {String} exp\n     * @param {Boolean} [asStatement]\n     * @return {*}\n     */\n\n    Vue.prototype.$get = function (exp, asStatement) {\n      var res = parseExpression(exp);\n      if (res) {\n        if (asStatement && !isSimplePath(exp)) {\n          var self = this;\n          return function statementHandler() {\n            res.get.call(self, self);\n          };\n        } else {\n          try {\n            return res.get.call(this, this);\n          } catch (e) {}\n        }\n      }\n    };\n\n    /**\n     * Set the value from an expression on this vm.\n     * The expression must be a valid left-hand\n     * expression in an assignment.\n     *\n     * @param {String} exp\n     * @param {*} val\n     */\n\n    Vue.prototype.$set = function (exp, val) {\n      var res = parseExpression(exp, true);\n      if (res && res.set) {\n        res.set.call(this, this, val);\n      }\n    };\n\n    /**\n     * Delete a property on the VM\n     *\n     * @param {String} key\n     */\n\n    Vue.prototype.$delete = function (key) {\n      del(this._data, key);\n    };\n\n    /**\n     * Watch an expression, trigger callback when its\n     * value changes.\n     *\n     * @param {String|Function} expOrFn\n     * @param {Function} cb\n     * @param {Object} [options]\n     *                 - {Boolean} deep\n     *                 - {Boolean} immediate\n     * @return {Function} - unwatchFn\n     */\n\n    Vue.prototype.$watch = function (expOrFn, cb, options) {\n      var vm = this;\n      var parsed;\n      if (typeof expOrFn === 'string') {\n        parsed = parseDirective(expOrFn);\n        expOrFn = parsed.expression;\n      }\n      var watcher = new Watcher(vm, expOrFn, cb, {\n        deep: options && options.deep,\n        filters: parsed && parsed.filters\n      });\n      if (options && options.immediate) {\n        cb.call(vm, watcher.value);\n      }\n      return function unwatchFn() {\n        watcher.teardown();\n      };\n    };\n\n    /**\n     * Evaluate a text directive, including filters.\n     *\n     * @param {String} text\n     * @param {Boolean} [asStatement]\n     * @return {String}\n     */\n\n    Vue.prototype.$eval = function (text, asStatement) {\n      // check for filters.\n      if (filterRE.test(text)) {\n        var dir = parseDirective(text);\n        // the filter regex check might give false positive\n        // for pipes inside strings, so it's possible that\n        // we don't get any filters here\n        var val = this.$get(dir.expression, asStatement);\n        return dir.filters ? this._applyFilters(val, null, dir.filters) : val;\n      } else {\n        // no filter\n        return this.$get(text, asStatement);\n      }\n    };\n\n    /**\n     * Interpolate a piece of template text.\n     *\n     * @param {String} text\n     * @return {String}\n     */\n\n    Vue.prototype.$interpolate = function (text) {\n      var tokens = parseText(text);\n      var vm = this;\n      if (tokens) {\n        if (tokens.length === 1) {\n          return vm.$eval(tokens[0].value) + '';\n        } else {\n          return tokens.map(function (token) {\n            return token.tag ? vm.$eval(token.value) : token.value;\n          }).join('');\n        }\n      } else {\n        return text;\n      }\n    };\n\n    /**\n     * Log instance data as a plain JS object\n     * so that it is easier to inspect in console.\n     * This method assumes console is available.\n     *\n     * @param {String} [path]\n     */\n\n    Vue.prototype.$log = function (path) {\n      var data = path ? getPath(this._data, path) : this._data;\n      if (data) {\n        data = clean(data);\n      }\n      // include computed fields\n      if (!path) {\n        for (var key in this.$options.computed) {\n          data[key] = clean(this[key]);\n        }\n      }\n      console.log(data);\n    };\n\n    /**\n     * \"clean\" a getter/setter converted object into a plain\n     * object copy.\n     *\n     * @param {Object} - obj\n     * @return {Object}\n     */\n\n    function clean(obj) {\n      return JSON.parse(JSON.stringify(obj));\n    }\n  }\n\n  function domAPI (Vue) {\n\n    /**\n     * Convenience on-instance nextTick. The callback is\n     * auto-bound to the instance, and this avoids component\n     * modules having to rely on the global Vue.\n     *\n     * @param {Function} fn\n     */\n\n    Vue.prototype.$nextTick = function (fn) {\n      nextTick(fn, this);\n    };\n\n    /**\n     * Append instance to target\n     *\n     * @param {Node} target\n     * @param {Function} [cb]\n     * @param {Boolean} [withTransition] - defaults to true\n     */\n\n    Vue.prototype.$appendTo = function (target, cb, withTransition) {\n      return insert(this, target, cb, withTransition, append, appendWithTransition);\n    };\n\n    /**\n     * Prepend instance to target\n     *\n     * @param {Node} target\n     * @param {Function} [cb]\n     * @param {Boolean} [withTransition] - defaults to true\n     */\n\n    Vue.prototype.$prependTo = function (target, cb, withTransition) {\n      target = query(target);\n      if (target.hasChildNodes()) {\n        this.$before(target.firstChild, cb, withTransition);\n      } else {\n        this.$appendTo(target, cb, withTransition);\n      }\n      return this;\n    };\n\n    /**\n     * Insert instance before target\n     *\n     * @param {Node} target\n     * @param {Function} [cb]\n     * @param {Boolean} [withTransition] - defaults to true\n     */\n\n    Vue.prototype.$before = function (target, cb, withTransition) {\n      return insert(this, target, cb, withTransition, beforeWithCb, beforeWithTransition);\n    };\n\n    /**\n     * Insert instance after target\n     *\n     * @param {Node} target\n     * @param {Function} [cb]\n     * @param {Boolean} [withTransition] - defaults to true\n     */\n\n    Vue.prototype.$after = function (target, cb, withTransition) {\n      target = query(target);\n      if (target.nextSibling) {\n        this.$before(target.nextSibling, cb, withTransition);\n      } else {\n        this.$appendTo(target.parentNode, cb, withTransition);\n      }\n      return this;\n    };\n\n    /**\n     * Remove instance from DOM\n     *\n     * @param {Function} [cb]\n     * @param {Boolean} [withTransition] - defaults to true\n     */\n\n    Vue.prototype.$remove = function (cb, withTransition) {\n      if (!this.$el.parentNode) {\n        return cb && cb();\n      }\n      var inDocument = this._isAttached && inDoc(this.$el);\n      // if we are not in document, no need to check\n      // for transitions\n      if (!inDocument) withTransition = false;\n      var self = this;\n      var realCb = function realCb() {\n        if (inDocument) self._callHook('detached');\n        if (cb) cb();\n      };\n      if (this._isFragment) {\n        removeNodeRange(this._fragmentStart, this._fragmentEnd, this, this._fragment, realCb);\n      } else {\n        var op = withTransition === false ? removeWithCb : removeWithTransition;\n        op(this.$el, this, realCb);\n      }\n      return this;\n    };\n\n    /**\n     * Shared DOM insertion function.\n     *\n     * @param {Vue} vm\n     * @param {Element} target\n     * @param {Function} [cb]\n     * @param {Boolean} [withTransition]\n     * @param {Function} op1 - op for non-transition insert\n     * @param {Function} op2 - op for transition insert\n     * @return vm\n     */\n\n    function insert(vm, target, cb, withTransition, op1, op2) {\n      target = query(target);\n      var targetIsDetached = !inDoc(target);\n      var op = withTransition === false || targetIsDetached ? op1 : op2;\n      var shouldCallHook = !targetIsDetached && !vm._isAttached && !inDoc(vm.$el);\n      if (vm._isFragment) {\n        mapNodeRange(vm._fragmentStart, vm._fragmentEnd, function (node) {\n          op(node, target, vm);\n        });\n        cb && cb();\n      } else {\n        op(vm.$el, target, vm, cb);\n      }\n      if (shouldCallHook) {\n        vm._callHook('attached');\n      }\n      return vm;\n    }\n\n    /**\n     * Check for selectors\n     *\n     * @param {String|Element} el\n     */\n\n    function query(el) {\n      return typeof el === 'string' ? document.querySelector(el) : el;\n    }\n\n    /**\n     * Append operation that takes a callback.\n     *\n     * @param {Node} el\n     * @param {Node} target\n     * @param {Vue} vm - unused\n     * @param {Function} [cb]\n     */\n\n    function append(el, target, vm, cb) {\n      target.appendChild(el);\n      if (cb) cb();\n    }\n\n    /**\n     * InsertBefore operation that takes a callback.\n     *\n     * @param {Node} el\n     * @param {Node} target\n     * @param {Vue} vm - unused\n     * @param {Function} [cb]\n     */\n\n    function beforeWithCb(el, target, vm, cb) {\n      before(el, target);\n      if (cb) cb();\n    }\n\n    /**\n     * Remove operation that takes a callback.\n     *\n     * @param {Node} el\n     * @param {Vue} vm - unused\n     * @param {Function} [cb]\n     */\n\n    function removeWithCb(el, vm, cb) {\n      remove(el);\n      if (cb) cb();\n    }\n  }\n\n  function eventsAPI (Vue) {\n\n    /**\n     * Listen on the given `event` with `fn`.\n     *\n     * @param {String} event\n     * @param {Function} fn\n     */\n\n    Vue.prototype.$on = function (event, fn) {\n      (this._events[event] || (this._events[event] = [])).push(fn);\n      modifyListenerCount(this, event, 1);\n      return this;\n    };\n\n    /**\n     * Adds an `event` listener that will be invoked a single\n     * time then automatically removed.\n     *\n     * @param {String} event\n     * @param {Function} fn\n     */\n\n    Vue.prototype.$once = function (event, fn) {\n      var self = this;\n      function on() {\n        self.$off(event, on);\n        fn.apply(this, arguments);\n      }\n      on.fn = fn;\n      this.$on(event, on);\n      return this;\n    };\n\n    /**\n     * Remove the given callback for `event` or all\n     * registered callbacks.\n     *\n     * @param {String} event\n     * @param {Function} fn\n     */\n\n    Vue.prototype.$off = function (event, fn) {\n      var cbs;\n      // all\n      if (!arguments.length) {\n        if (this.$parent) {\n          for (event in this._events) {\n            cbs = this._events[event];\n            if (cbs) {\n              modifyListenerCount(this, event, -cbs.length);\n            }\n          }\n        }\n        this._events = {};\n        return this;\n      }\n      // specific event\n      cbs = this._events[event];\n      if (!cbs) {\n        return this;\n      }\n      if (arguments.length === 1) {\n        modifyListenerCount(this, event, -cbs.length);\n        this._events[event] = null;\n        return this;\n      }\n      // specific handler\n      var cb;\n      var i = cbs.length;\n      while (i--) {\n        cb = cbs[i];\n        if (cb === fn || cb.fn === fn) {\n          modifyListenerCount(this, event, -1);\n          cbs.splice(i, 1);\n          break;\n        }\n      }\n      return this;\n    };\n\n    /**\n     * Trigger an event on self.\n     *\n     * @param {String} event\n     * @return {Boolean} shouldPropagate\n     */\n\n    Vue.prototype.$emit = function (event) {\n      var cbs = this._events[event];\n      var shouldPropagate = !cbs;\n      if (cbs) {\n        cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n        var args = toArray(arguments, 1);\n        for (var i = 0, l = cbs.length; i < l; i++) {\n          var res = cbs[i].apply(this, args);\n          if (res === true) {\n            shouldPropagate = true;\n          }\n        }\n      }\n      return shouldPropagate;\n    };\n\n    /**\n     * Recursively broadcast an event to all children instances.\n     *\n     * @param {String} event\n     * @param {...*} additional arguments\n     */\n\n    Vue.prototype.$broadcast = function (event) {\n      // if no child has registered for this event,\n      // then there's no need to broadcast.\n      if (!this._eventsCount[event]) return;\n      var children = this.$children;\n      for (var i = 0, l = children.length; i < l; i++) {\n        var child = children[i];\n        var shouldPropagate = child.$emit.apply(child, arguments);\n        if (shouldPropagate) {\n          child.$broadcast.apply(child, arguments);\n        }\n      }\n      return this;\n    };\n\n    /**\n     * Recursively propagate an event up the parent chain.\n     *\n     * @param {String} event\n     * @param {...*} additional arguments\n     */\n\n    Vue.prototype.$dispatch = function () {\n      this.$emit.apply(this, arguments);\n      var parent = this.$parent;\n      while (parent) {\n        var shouldPropagate = parent.$emit.apply(parent, arguments);\n        parent = shouldPropagate ? parent.$parent : null;\n      }\n      return this;\n    };\n\n    /**\n     * Modify the listener counts on all parents.\n     * This bookkeeping allows $broadcast to return early when\n     * no child has listened to a certain event.\n     *\n     * @param {Vue} vm\n     * @param {String} event\n     * @param {Number} count\n     */\n\n    var hookRE = /^hook:/;\n    function modifyListenerCount(vm, event, count) {\n      var parent = vm.$parent;\n      // hooks do not get broadcasted so no need\n      // to do bookkeeping for them\n      if (!parent || !count || hookRE.test(event)) return;\n      while (parent) {\n        parent._eventsCount[event] = (parent._eventsCount[event] || 0) + count;\n        parent = parent.$parent;\n      }\n    }\n  }\n\n  function lifecycleAPI (Vue) {\n\n    /**\n     * Set instance target element and kick off the compilation\n     * process. The passed in `el` can be a selector string, an\n     * existing Element, or a DocumentFragment (for block\n     * instances).\n     *\n     * @param {Element|DocumentFragment|string} el\n     * @public\n     */\n\n    Vue.prototype.$mount = function (el) {\n      if (this._isCompiled) {\n        'development' !== 'production' && warn('$mount() should be called only once.');\n        return;\n      }\n      el = query(el);\n      if (!el) {\n        el = document.createElement('div');\n      }\n      this._compile(el);\n      this._initDOMHooks();\n      if (inDoc(this.$el)) {\n        this._callHook('attached');\n        ready.call(this);\n      } else {\n        this.$once('hook:attached', ready);\n      }\n      return this;\n    };\n\n    /**\n     * Mark an instance as ready.\n     */\n\n    function ready() {\n      this._isAttached = true;\n      this._isReady = true;\n      this._callHook('ready');\n    }\n\n    /**\n     * Teardown the instance, simply delegate to the internal\n     * _destroy.\n     */\n\n    Vue.prototype.$destroy = function (remove, deferCleanup) {\n      this._destroy(remove, deferCleanup);\n    };\n\n    /**\n     * Partially compile a piece of DOM and return a\n     * decompile function.\n     *\n     * @param {Element|DocumentFragment} el\n     * @param {Vue} [host]\n     * @return {Function}\n     */\n\n    Vue.prototype.$compile = function (el, host, scope, frag) {\n      return compile(el, this.$options, true)(this, el, host, scope, frag);\n    };\n  }\n\n  /**\n   * The exposed Vue constructor.\n   *\n   * API conventions:\n   * - public API methods/properties are prefixed with `$`\n   * - internal methods/properties are prefixed with `_`\n   * - non-prefixed properties are assumed to be proxied user\n   *   data.\n   *\n   * @constructor\n   * @param {Object} [options]\n   * @public\n   */\n\n  function Vue(options) {\n    this._init(options);\n  }\n\n  // install internals\n  initMixin(Vue);\n  stateMixin(Vue);\n  eventsMixin(Vue);\n  lifecycleMixin(Vue);\n  miscMixin(Vue);\n\n  // install APIs\n  globalAPI(Vue);\n  dataAPI(Vue);\n  domAPI(Vue);\n  eventsAPI(Vue);\n  lifecycleAPI(Vue);\n\n  var convertArray = vFor._postProcess;\n\n  /**\n   * Limit filter for arrays\n   *\n   * @param {Number} n\n   * @param {Number} offset (Decimal expected)\n   */\n\n  function limitBy(arr, n, offset) {\n    offset = offset ? parseInt(offset, 10) : 0;\n    return typeof n === 'number' ? arr.slice(offset, offset + n) : arr;\n  }\n\n  /**\n   * Filter filter for arrays\n   *\n   * @param {String} search\n   * @param {String} [delimiter]\n   * @param {String} ...dataKeys\n   */\n\n  function filterBy(arr, search, delimiter) {\n    arr = convertArray(arr);\n    if (search == null) {\n      return arr;\n    }\n    if (typeof search === 'function') {\n      return arr.filter(search);\n    }\n    // cast to lowercase string\n    search = ('' + search).toLowerCase();\n    // allow optional `in` delimiter\n    // because why not\n    var n = delimiter === 'in' ? 3 : 2;\n    // extract and flatten keys\n    var keys = toArray(arguments, n).reduce(function (prev, cur) {\n      return prev.concat(cur);\n    }, []);\n    var res = [];\n    var item, key, val, j;\n    for (var i = 0, l = arr.length; i < l; i++) {\n      item = arr[i];\n      val = item && item.$value || item;\n      j = keys.length;\n      if (j) {\n        while (j--) {\n          key = keys[j];\n          if (key === '$key' && contains(item.$key, search) || contains(getPath(val, key), search)) {\n            res.push(item);\n            break;\n          }\n        }\n      } else if (contains(item, search)) {\n        res.push(item);\n      }\n    }\n    return res;\n  }\n\n  /**\n   * Filter filter for arrays\n   *\n   * @param {String} sortKey\n   * @param {String} reverse\n   */\n\n  function orderBy(arr, sortKey, reverse) {\n    arr = convertArray(arr);\n    if (!sortKey) {\n      return arr;\n    }\n    var order = reverse && reverse < 0 ? -1 : 1;\n    // sort on a copy to avoid mutating original array\n    return arr.slice().sort(function (a, b) {\n      if (sortKey !== '$key') {\n        if (isObject(a) && '$value' in a) a = a.$value;\n        if (isObject(b) && '$value' in b) b = b.$value;\n      }\n      a = isObject(a) ? getPath(a, sortKey) : a;\n      b = isObject(b) ? getPath(b, sortKey) : b;\n      return a === b ? 0 : a > b ? order : -order;\n    });\n  }\n\n  /**\n   * String contain helper\n   *\n   * @param {*} val\n   * @param {String} search\n   */\n\n  function contains(val, search) {\n    var i;\n    if (isPlainObject(val)) {\n      var keys = Object.keys(val);\n      i = keys.length;\n      while (i--) {\n        if (contains(val[keys[i]], search)) {\n          return true;\n        }\n      }\n    } else if (isArray(val)) {\n      i = val.length;\n      while (i--) {\n        if (contains(val[i], search)) {\n          return true;\n        }\n      }\n    } else if (val != null) {\n      return val.toString().toLowerCase().indexOf(search) > -1;\n    }\n  }\n\n  var digitsRE = /(\\d{3})(?=\\d)/g;\n\n  // asset collections must be a plain object.\n  var filters = {\n\n    orderBy: orderBy,\n    filterBy: filterBy,\n    limitBy: limitBy,\n\n    /**\n     * Stringify value.\n     *\n     * @param {Number} indent\n     */\n\n    json: {\n      read: function read(value, indent) {\n        return typeof value === 'string' ? value : JSON.stringify(value, null, Number(indent) || 2);\n      },\n      write: function write(value) {\n        try {\n          return JSON.parse(value);\n        } catch (e) {\n          return value;\n        }\n      }\n    },\n\n    /**\n     * 'abc' => 'Abc'\n     */\n\n    capitalize: function capitalize(value) {\n      if (!value && value !== 0) return '';\n      value = value.toString();\n      return value.charAt(0).toUpperCase() + value.slice(1);\n    },\n\n    /**\n     * 'abc' => 'ABC'\n     */\n\n    uppercase: function uppercase(value) {\n      return value || value === 0 ? value.toString().toUpperCase() : '';\n    },\n\n    /**\n     * 'AbC' => 'abc'\n     */\n\n    lowercase: function lowercase(value) {\n      return value || value === 0 ? value.toString().toLowerCase() : '';\n    },\n\n    /**\n     * 12345 => $12,345.00\n     *\n     * @param {String} sign\n     */\n\n    currency: function currency(value, _currency) {\n      value = parseFloat(value);\n      if (!isFinite(value) || !value && value !== 0) return '';\n      _currency = _currency != null ? _currency : '$';\n      var stringified = Math.abs(value).toFixed(2);\n      var _int = stringified.slice(0, -3);\n      var i = _int.length % 3;\n      var head = i > 0 ? _int.slice(0, i) + (_int.length > 3 ? ',' : '') : '';\n      var _float = stringified.slice(-3);\n      var sign = value < 0 ? '-' : '';\n      return _currency + sign + head + _int.slice(i).replace(digitsRE, '$1,') + _float;\n    },\n\n    /**\n     * 'item' => 'items'\n     *\n     * @params\n     *  an array of strings corresponding to\n     *  the single, double, triple ... forms of the word to\n     *  be pluralized. When the number to be pluralized\n     *  exceeds the length of the args, it will use the last\n     *  entry in the array.\n     *\n     *  e.g. ['single', 'double', 'triple', 'multiple']\n     */\n\n    pluralize: function pluralize(value) {\n      var args = toArray(arguments, 1);\n      return args.length > 1 ? args[value % 10 - 1] || args[args.length - 1] : args[0] + (value === 1 ? '' : 's');\n    },\n\n    /**\n     * Debounce a handler function.\n     *\n     * @param {Function} handler\n     * @param {Number} delay = 300\n     * @return {Function}\n     */\n\n    debounce: function debounce(handler, delay) {\n      if (!handler) return;\n      if (!delay) {\n        delay = 300;\n      }\n      return _debounce(handler, delay);\n    }\n  };\n\n  var partial = {\n\n    priority: 1750,\n\n    params: ['name'],\n\n    // watch changes to name for dynamic partials\n    paramWatchers: {\n      name: function name(value) {\n        vIf.remove.call(this);\n        if (value) {\n          this.insert(value);\n        }\n      }\n    },\n\n    bind: function bind() {\n      this.anchor = createAnchor('v-partial');\n      replace(this.el, this.anchor);\n      this.insert(this.params.name);\n    },\n\n    insert: function insert(id) {\n      var partial = resolveAsset(this.vm.$options, 'partials', id);\n      if ('development' !== 'production') {\n        assertAsset(partial, 'partial', id);\n      }\n      if (partial) {\n        this.factory = new FragmentFactory(this.vm, partial);\n        vIf.insert.call(this);\n      }\n    },\n\n    unbind: function unbind() {\n      if (this.frag) {\n        this.frag.destroy();\n      }\n    }\n  };\n\n  // This is the elementDirective that handles <content>\n  // transclusions. It relies on the raw content of an\n  // instance being stored as `$options._content` during\n  // the transclude phase.\n\n  var slot = {\n\n    priority: 1750,\n\n    params: ['name'],\n\n    bind: function bind() {\n      var host = this.vm;\n      var raw = host.$options._content;\n      var content;\n      if (!raw) {\n        this.fallback();\n        return;\n      }\n      var context = host._context;\n      var slotName = this.params.name;\n      if (!slotName) {\n        // Default content\n        var self = this;\n        var compileDefaultContent = function compileDefaultContent() {\n          self.compile(extractFragment(raw.childNodes, raw, true), context, host);\n        };\n        if (!host._isCompiled) {\n          // defer until the end of instance compilation,\n          // because the default outlet must wait until all\n          // other possible outlets with selectors have picked\n          // out their contents.\n          host.$once('hook:compiled', compileDefaultContent);\n        } else {\n          compileDefaultContent();\n        }\n      } else {\n        var selector = '[slot=\"' + slotName + '\"]';\n        var nodes = raw.querySelectorAll(selector);\n        if (nodes.length) {\n          content = extractFragment(nodes, raw);\n          if (content.hasChildNodes()) {\n            this.compile(content, context, host);\n          } else {\n            this.fallback();\n          }\n        } else {\n          this.fallback();\n        }\n      }\n    },\n\n    fallback: function fallback() {\n      this.compile(extractContent(this.el, true), this.vm);\n    },\n\n    compile: function compile(content, context, host) {\n      if (content && context) {\n        var scope = host ? host._scope : this._scope;\n        this.unlink = context.$compile(content, host, scope, this._frag);\n      }\n      if (content) {\n        replace(this.el, content);\n      } else {\n        remove(this.el);\n      }\n    },\n\n    unbind: function unbind() {\n      if (this.unlink) {\n        this.unlink();\n      }\n    }\n  };\n\n  /**\n   * Extract qualified content nodes from a node list.\n   *\n   * @param {NodeList} nodes\n   * @param {Element} parent\n   * @param {Boolean} main\n   * @return {DocumentFragment}\n   */\n\n  function extractFragment(nodes, parent, main) {\n    var frag = document.createDocumentFragment();\n    for (var i = 0, l = nodes.length; i < l; i++) {\n      var node = nodes[i];\n      // if this is the main outlet, we want to skip all\n      // previously selected nodes;\n      // otherwise, we want to mark the node as selected.\n      // clone the node so the original raw content remains\n      // intact. this ensures proper re-compilation in cases\n      // where the outlet is inside a conditional block\n      if (main && !node.__v_selected) {\n        append(node);\n      } else if (!main && node.parentNode === parent) {\n        node.__v_selected = true;\n        append(node);\n      }\n    }\n    return frag;\n\n    function append(node) {\n      if (isTemplate(node) && !node.hasAttribute('v-if') && !node.hasAttribute('v-for')) {\n        node = parseTemplate(node);\n      }\n      node = cloneNode(node);\n      frag.appendChild(node);\n    }\n  }\n\n  var elementDirectives = {\n    slot: slot,\n    partial: partial\n  };\n\n  Vue.version = '1.0.10';\n\n  /**\n   * Vue and every constructor that extends Vue has an\n   * associated options object, which can be accessed during\n   * compilation steps as `this.constructor.options`.\n   *\n   * These can be seen as the default options of every\n   * Vue instance.\n   */\n\n  Vue.options = {\n    directives: publicDirectives,\n    elementDirectives: elementDirectives,\n    filters: filters,\n    transitions: {},\n    components: {},\n    partials: {},\n    replace: true\n  };\n\n  // devtools global hook\n  /* istanbul ignore if */\n  if ('development' !== 'production') {\n    if (inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__) {\n      window.__VUE_DEVTOOLS_GLOBAL_HOOK__.emit('init', Vue);\n    }\n  }\n\n  return Vue;\n\n}));\n},{}],2:[function(require,module,exports){\nvar Vue = require(\"./../../bower_components/vue/dist/vue.js\");\nvar app = new Vue\n\n},{\"./../../bower_components/vue/dist/vue.js\":1}]},{},[2])\n\n","var Vue = require(\"./../../bower_components/vue/dist/vue.js\");\nvar app = new Vue\n"],"sourceRoot":"/source/"}